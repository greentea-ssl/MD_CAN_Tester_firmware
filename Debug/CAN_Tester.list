
CAN_Tester.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d964  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000330  0800db38  0800db38  0001db38  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800de68  0800de68  00020370  2**0
                  CONTENTS
  4 .ARM          00000008  0800de68  0800de68  0001de68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800de70  0800de70  00020370  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800de70  0800de70  0001de70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800de74  0800de74  0001de74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000370  20000000  0800de78  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001e10  20000370  0800e1e8  00020370  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002180  0800e1e8  00022180  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020370  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c885  00000000  00000000  000203a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003b58  00000000  00000000  0003cc25  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001590  00000000  00000000  00040780  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000013d8  00000000  00000000  00041d10  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00026436  00000000  00000000  000430e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000133c0  00000000  00000000  0006951e  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000daa99  00000000  00000000  0007c8de  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00157377  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006828  00000000  00000000  001573f4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000370 	.word	0x20000370
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800db1c 	.word	0x0800db1c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000374 	.word	0x20000374
 800020c:	0800db1c 	.word	0x0800db1c

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003fe:	f1a4 0401 	sub.w	r4, r4, #1
 8000402:	d1e9      	bne.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cdc:	f000 b972 	b.w	8000fc4 <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f806 	bl	8000cf8 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__udivmoddi4>:
 8000cf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cfc:	9e08      	ldr	r6, [sp, #32]
 8000cfe:	4604      	mov	r4, r0
 8000d00:	4688      	mov	r8, r1
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d14b      	bne.n	8000d9e <__udivmoddi4+0xa6>
 8000d06:	428a      	cmp	r2, r1
 8000d08:	4615      	mov	r5, r2
 8000d0a:	d967      	bls.n	8000ddc <__udivmoddi4+0xe4>
 8000d0c:	fab2 f282 	clz	r2, r2
 8000d10:	b14a      	cbz	r2, 8000d26 <__udivmoddi4+0x2e>
 8000d12:	f1c2 0720 	rsb	r7, r2, #32
 8000d16:	fa01 f302 	lsl.w	r3, r1, r2
 8000d1a:	fa20 f707 	lsr.w	r7, r0, r7
 8000d1e:	4095      	lsls	r5, r2
 8000d20:	ea47 0803 	orr.w	r8, r7, r3
 8000d24:	4094      	lsls	r4, r2
 8000d26:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d2a:	0c23      	lsrs	r3, r4, #16
 8000d2c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000d30:	fa1f fc85 	uxth.w	ip, r5
 8000d34:	fb0e 8817 	mls	r8, lr, r7, r8
 8000d38:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d3c:	fb07 f10c 	mul.w	r1, r7, ip
 8000d40:	4299      	cmp	r1, r3
 8000d42:	d909      	bls.n	8000d58 <__udivmoddi4+0x60>
 8000d44:	18eb      	adds	r3, r5, r3
 8000d46:	f107 30ff 	add.w	r0, r7, #4294967295
 8000d4a:	f080 811b 	bcs.w	8000f84 <__udivmoddi4+0x28c>
 8000d4e:	4299      	cmp	r1, r3
 8000d50:	f240 8118 	bls.w	8000f84 <__udivmoddi4+0x28c>
 8000d54:	3f02      	subs	r7, #2
 8000d56:	442b      	add	r3, r5
 8000d58:	1a5b      	subs	r3, r3, r1
 8000d5a:	b2a4      	uxth	r4, r4
 8000d5c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d60:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d64:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d68:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d6c:	45a4      	cmp	ip, r4
 8000d6e:	d909      	bls.n	8000d84 <__udivmoddi4+0x8c>
 8000d70:	192c      	adds	r4, r5, r4
 8000d72:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d76:	f080 8107 	bcs.w	8000f88 <__udivmoddi4+0x290>
 8000d7a:	45a4      	cmp	ip, r4
 8000d7c:	f240 8104 	bls.w	8000f88 <__udivmoddi4+0x290>
 8000d80:	3802      	subs	r0, #2
 8000d82:	442c      	add	r4, r5
 8000d84:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d88:	eba4 040c 	sub.w	r4, r4, ip
 8000d8c:	2700      	movs	r7, #0
 8000d8e:	b11e      	cbz	r6, 8000d98 <__udivmoddi4+0xa0>
 8000d90:	40d4      	lsrs	r4, r2
 8000d92:	2300      	movs	r3, #0
 8000d94:	e9c6 4300 	strd	r4, r3, [r6]
 8000d98:	4639      	mov	r1, r7
 8000d9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d9e:	428b      	cmp	r3, r1
 8000da0:	d909      	bls.n	8000db6 <__udivmoddi4+0xbe>
 8000da2:	2e00      	cmp	r6, #0
 8000da4:	f000 80eb 	beq.w	8000f7e <__udivmoddi4+0x286>
 8000da8:	2700      	movs	r7, #0
 8000daa:	e9c6 0100 	strd	r0, r1, [r6]
 8000dae:	4638      	mov	r0, r7
 8000db0:	4639      	mov	r1, r7
 8000db2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000db6:	fab3 f783 	clz	r7, r3
 8000dba:	2f00      	cmp	r7, #0
 8000dbc:	d147      	bne.n	8000e4e <__udivmoddi4+0x156>
 8000dbe:	428b      	cmp	r3, r1
 8000dc0:	d302      	bcc.n	8000dc8 <__udivmoddi4+0xd0>
 8000dc2:	4282      	cmp	r2, r0
 8000dc4:	f200 80fa 	bhi.w	8000fbc <__udivmoddi4+0x2c4>
 8000dc8:	1a84      	subs	r4, r0, r2
 8000dca:	eb61 0303 	sbc.w	r3, r1, r3
 8000dce:	2001      	movs	r0, #1
 8000dd0:	4698      	mov	r8, r3
 8000dd2:	2e00      	cmp	r6, #0
 8000dd4:	d0e0      	beq.n	8000d98 <__udivmoddi4+0xa0>
 8000dd6:	e9c6 4800 	strd	r4, r8, [r6]
 8000dda:	e7dd      	b.n	8000d98 <__udivmoddi4+0xa0>
 8000ddc:	b902      	cbnz	r2, 8000de0 <__udivmoddi4+0xe8>
 8000dde:	deff      	udf	#255	; 0xff
 8000de0:	fab2 f282 	clz	r2, r2
 8000de4:	2a00      	cmp	r2, #0
 8000de6:	f040 808f 	bne.w	8000f08 <__udivmoddi4+0x210>
 8000dea:	1b49      	subs	r1, r1, r5
 8000dec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000df0:	fa1f f885 	uxth.w	r8, r5
 8000df4:	2701      	movs	r7, #1
 8000df6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dfa:	0c23      	lsrs	r3, r4, #16
 8000dfc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000e00:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e04:	fb08 f10c 	mul.w	r1, r8, ip
 8000e08:	4299      	cmp	r1, r3
 8000e0a:	d907      	bls.n	8000e1c <__udivmoddi4+0x124>
 8000e0c:	18eb      	adds	r3, r5, r3
 8000e0e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e12:	d202      	bcs.n	8000e1a <__udivmoddi4+0x122>
 8000e14:	4299      	cmp	r1, r3
 8000e16:	f200 80cd 	bhi.w	8000fb4 <__udivmoddi4+0x2bc>
 8000e1a:	4684      	mov	ip, r0
 8000e1c:	1a59      	subs	r1, r3, r1
 8000e1e:	b2a3      	uxth	r3, r4
 8000e20:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e24:	fb0e 1410 	mls	r4, lr, r0, r1
 8000e28:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000e2c:	fb08 f800 	mul.w	r8, r8, r0
 8000e30:	45a0      	cmp	r8, r4
 8000e32:	d907      	bls.n	8000e44 <__udivmoddi4+0x14c>
 8000e34:	192c      	adds	r4, r5, r4
 8000e36:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e3a:	d202      	bcs.n	8000e42 <__udivmoddi4+0x14a>
 8000e3c:	45a0      	cmp	r8, r4
 8000e3e:	f200 80b6 	bhi.w	8000fae <__udivmoddi4+0x2b6>
 8000e42:	4618      	mov	r0, r3
 8000e44:	eba4 0408 	sub.w	r4, r4, r8
 8000e48:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e4c:	e79f      	b.n	8000d8e <__udivmoddi4+0x96>
 8000e4e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e52:	40bb      	lsls	r3, r7
 8000e54:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e58:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e5c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e60:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e64:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e68:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e6c:	4325      	orrs	r5, r4
 8000e6e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e72:	0c2c      	lsrs	r4, r5, #16
 8000e74:	fb08 3319 	mls	r3, r8, r9, r3
 8000e78:	fa1f fa8e 	uxth.w	sl, lr
 8000e7c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e80:	fb09 f40a 	mul.w	r4, r9, sl
 8000e84:	429c      	cmp	r4, r3
 8000e86:	fa02 f207 	lsl.w	r2, r2, r7
 8000e8a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e8e:	d90b      	bls.n	8000ea8 <__udivmoddi4+0x1b0>
 8000e90:	eb1e 0303 	adds.w	r3, lr, r3
 8000e94:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e98:	f080 8087 	bcs.w	8000faa <__udivmoddi4+0x2b2>
 8000e9c:	429c      	cmp	r4, r3
 8000e9e:	f240 8084 	bls.w	8000faa <__udivmoddi4+0x2b2>
 8000ea2:	f1a9 0902 	sub.w	r9, r9, #2
 8000ea6:	4473      	add	r3, lr
 8000ea8:	1b1b      	subs	r3, r3, r4
 8000eaa:	b2ad      	uxth	r5, r5
 8000eac:	fbb3 f0f8 	udiv	r0, r3, r8
 8000eb0:	fb08 3310 	mls	r3, r8, r0, r3
 8000eb4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000eb8:	fb00 fa0a 	mul.w	sl, r0, sl
 8000ebc:	45a2      	cmp	sl, r4
 8000ebe:	d908      	bls.n	8000ed2 <__udivmoddi4+0x1da>
 8000ec0:	eb1e 0404 	adds.w	r4, lr, r4
 8000ec4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ec8:	d26b      	bcs.n	8000fa2 <__udivmoddi4+0x2aa>
 8000eca:	45a2      	cmp	sl, r4
 8000ecc:	d969      	bls.n	8000fa2 <__udivmoddi4+0x2aa>
 8000ece:	3802      	subs	r0, #2
 8000ed0:	4474      	add	r4, lr
 8000ed2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ed6:	fba0 8902 	umull	r8, r9, r0, r2
 8000eda:	eba4 040a 	sub.w	r4, r4, sl
 8000ede:	454c      	cmp	r4, r9
 8000ee0:	46c2      	mov	sl, r8
 8000ee2:	464b      	mov	r3, r9
 8000ee4:	d354      	bcc.n	8000f90 <__udivmoddi4+0x298>
 8000ee6:	d051      	beq.n	8000f8c <__udivmoddi4+0x294>
 8000ee8:	2e00      	cmp	r6, #0
 8000eea:	d069      	beq.n	8000fc0 <__udivmoddi4+0x2c8>
 8000eec:	ebb1 050a 	subs.w	r5, r1, sl
 8000ef0:	eb64 0403 	sbc.w	r4, r4, r3
 8000ef4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000ef8:	40fd      	lsrs	r5, r7
 8000efa:	40fc      	lsrs	r4, r7
 8000efc:	ea4c 0505 	orr.w	r5, ip, r5
 8000f00:	e9c6 5400 	strd	r5, r4, [r6]
 8000f04:	2700      	movs	r7, #0
 8000f06:	e747      	b.n	8000d98 <__udivmoddi4+0xa0>
 8000f08:	f1c2 0320 	rsb	r3, r2, #32
 8000f0c:	fa20 f703 	lsr.w	r7, r0, r3
 8000f10:	4095      	lsls	r5, r2
 8000f12:	fa01 f002 	lsl.w	r0, r1, r2
 8000f16:	fa21 f303 	lsr.w	r3, r1, r3
 8000f1a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000f1e:	4338      	orrs	r0, r7
 8000f20:	0c01      	lsrs	r1, r0, #16
 8000f22:	fbb3 f7fe 	udiv	r7, r3, lr
 8000f26:	fa1f f885 	uxth.w	r8, r5
 8000f2a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000f2e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f32:	fb07 f308 	mul.w	r3, r7, r8
 8000f36:	428b      	cmp	r3, r1
 8000f38:	fa04 f402 	lsl.w	r4, r4, r2
 8000f3c:	d907      	bls.n	8000f4e <__udivmoddi4+0x256>
 8000f3e:	1869      	adds	r1, r5, r1
 8000f40:	f107 3cff 	add.w	ip, r7, #4294967295
 8000f44:	d22f      	bcs.n	8000fa6 <__udivmoddi4+0x2ae>
 8000f46:	428b      	cmp	r3, r1
 8000f48:	d92d      	bls.n	8000fa6 <__udivmoddi4+0x2ae>
 8000f4a:	3f02      	subs	r7, #2
 8000f4c:	4429      	add	r1, r5
 8000f4e:	1acb      	subs	r3, r1, r3
 8000f50:	b281      	uxth	r1, r0
 8000f52:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f56:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f5a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f5e:	fb00 f308 	mul.w	r3, r0, r8
 8000f62:	428b      	cmp	r3, r1
 8000f64:	d907      	bls.n	8000f76 <__udivmoddi4+0x27e>
 8000f66:	1869      	adds	r1, r5, r1
 8000f68:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f6c:	d217      	bcs.n	8000f9e <__udivmoddi4+0x2a6>
 8000f6e:	428b      	cmp	r3, r1
 8000f70:	d915      	bls.n	8000f9e <__udivmoddi4+0x2a6>
 8000f72:	3802      	subs	r0, #2
 8000f74:	4429      	add	r1, r5
 8000f76:	1ac9      	subs	r1, r1, r3
 8000f78:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f7c:	e73b      	b.n	8000df6 <__udivmoddi4+0xfe>
 8000f7e:	4637      	mov	r7, r6
 8000f80:	4630      	mov	r0, r6
 8000f82:	e709      	b.n	8000d98 <__udivmoddi4+0xa0>
 8000f84:	4607      	mov	r7, r0
 8000f86:	e6e7      	b.n	8000d58 <__udivmoddi4+0x60>
 8000f88:	4618      	mov	r0, r3
 8000f8a:	e6fb      	b.n	8000d84 <__udivmoddi4+0x8c>
 8000f8c:	4541      	cmp	r1, r8
 8000f8e:	d2ab      	bcs.n	8000ee8 <__udivmoddi4+0x1f0>
 8000f90:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f94:	eb69 020e 	sbc.w	r2, r9, lr
 8000f98:	3801      	subs	r0, #1
 8000f9a:	4613      	mov	r3, r2
 8000f9c:	e7a4      	b.n	8000ee8 <__udivmoddi4+0x1f0>
 8000f9e:	4660      	mov	r0, ip
 8000fa0:	e7e9      	b.n	8000f76 <__udivmoddi4+0x27e>
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	e795      	b.n	8000ed2 <__udivmoddi4+0x1da>
 8000fa6:	4667      	mov	r7, ip
 8000fa8:	e7d1      	b.n	8000f4e <__udivmoddi4+0x256>
 8000faa:	4681      	mov	r9, r0
 8000fac:	e77c      	b.n	8000ea8 <__udivmoddi4+0x1b0>
 8000fae:	3802      	subs	r0, #2
 8000fb0:	442c      	add	r4, r5
 8000fb2:	e747      	b.n	8000e44 <__udivmoddi4+0x14c>
 8000fb4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fb8:	442b      	add	r3, r5
 8000fba:	e72f      	b.n	8000e1c <__udivmoddi4+0x124>
 8000fbc:	4638      	mov	r0, r7
 8000fbe:	e708      	b.n	8000dd2 <__udivmoddi4+0xda>
 8000fc0:	4637      	mov	r7, r6
 8000fc2:	e6e9      	b.n	8000d98 <__udivmoddi4+0xa0>

08000fc4 <__aeabi_idiv0>:
 8000fc4:	4770      	bx	lr
 8000fc6:	bf00      	nop

08000fc8 <driveMotor_speed>:
/* USER CODE BEGIN 0 */



void driveMotor_speed(uint8_t channel, float omega)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b08c      	sub	sp, #48	; 0x30
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	4603      	mov	r3, r0
 8000fd0:	ed87 0a00 	vstr	s0, [r7]
 8000fd4:	71fb      	strb	r3, [r7, #7]
		struct{
			uint8_t byte[4];
		};
	}controlRef;

	can1TxHeader.StdId = 0x200 | ((channel & 0x07) << 5) | (0x01 << 2);
 8000fd6:	79fb      	ldrb	r3, [r7, #7]
 8000fd8:	015b      	lsls	r3, r3, #5
 8000fda:	b2db      	uxtb	r3, r3
 8000fdc:	f443 7301 	orr.w	r3, r3, #516	; 0x204
 8000fe0:	617b      	str	r3, [r7, #20]
	can1TxHeader.ExtId = 0x00;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	61bb      	str	r3, [r7, #24]
	can1TxHeader.IDE = CAN_ID_STD;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	61fb      	str	r3, [r7, #28]
	can1TxHeader.RTR = CAN_RTR_DATA;
 8000fea:	2300      	movs	r3, #0
 8000fec:	623b      	str	r3, [r7, #32]
	can1TxHeader.DLC = 4;
 8000fee:	2304      	movs	r3, #4
 8000ff0:	627b      	str	r3, [r7, #36]	; 0x24

	controlRef.fval = omega;
 8000ff2:	683b      	ldr	r3, [r7, #0]
 8000ff4:	60bb      	str	r3, [r7, #8]

	can1TxData[0] = controlRef.byte[0];
 8000ff6:	7a3b      	ldrb	r3, [r7, #8]
 8000ff8:	733b      	strb	r3, [r7, #12]
	can1TxData[1] = controlRef.byte[1];
 8000ffa:	7a7b      	ldrb	r3, [r7, #9]
 8000ffc:	737b      	strb	r3, [r7, #13]
	can1TxData[2] = controlRef.byte[2];
 8000ffe:	7abb      	ldrb	r3, [r7, #10]
 8001000:	73bb      	strb	r3, [r7, #14]
	can1TxData[3] = controlRef.byte[3];
 8001002:	7afb      	ldrb	r3, [r7, #11]
 8001004:	73fb      	strb	r3, [r7, #15]


	HAL_CAN_ActivateNotification(&hcan1, CAN_IT_TX_MAILBOX_EMPTY);
 8001006:	2101      	movs	r1, #1
 8001008:	4807      	ldr	r0, [pc, #28]	; (8001028 <driveMotor_speed+0x60>)
 800100a:	f001 fc2b 	bl	8002864 <HAL_CAN_ActivateNotification>

	HAL_CAN_AddTxMessage(&hcan1, &can1TxHeader, can1TxData, &can1TxMailbox);
 800100e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001012:	f107 020c 	add.w	r2, r7, #12
 8001016:	f107 0114 	add.w	r1, r7, #20
 800101a:	4803      	ldr	r0, [pc, #12]	; (8001028 <driveMotor_speed+0x60>)
 800101c:	f001 fb47 	bl	80026ae <HAL_CAN_AddTxMessage>

	return;
 8001020:	bf00      	nop
}
 8001022:	3730      	adds	r7, #48	; 0x30
 8001024:	46bd      	mov	sp, r7
 8001026:	bd80      	pop	{r7, pc}
 8001028:	20000878 	.word	0x20000878

0800102c <getChannel>:



uint8_t getChannel()
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b082      	sub	sp, #8
 8001030:	af00      	add	r7, sp, #0
	uint8_t ch = 0;
 8001032:	2300      	movs	r3, #0
 8001034:	71fb      	strb	r3, [r7, #7]

	ch |= !HAL_GPIO_ReadPin(CH_b0_GPIO_Port, CH_b0_Pin) << 0;
 8001036:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800103a:	4823      	ldr	r0, [pc, #140]	; (80010c8 <getChannel+0x9c>)
 800103c:	f002 f910 	bl	8003260 <HAL_GPIO_ReadPin>
 8001040:	4603      	mov	r3, r0
 8001042:	2b00      	cmp	r3, #0
 8001044:	bf0c      	ite	eq
 8001046:	2301      	moveq	r3, #1
 8001048:	2300      	movne	r3, #0
 800104a:	b2db      	uxtb	r3, r3
 800104c:	b25a      	sxtb	r2, r3
 800104e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001052:	4313      	orrs	r3, r2
 8001054:	b25b      	sxtb	r3, r3
 8001056:	71fb      	strb	r3, [r7, #7]
	ch |= !HAL_GPIO_ReadPin(CH_b1_GPIO_Port, CH_b1_Pin) << 1;
 8001058:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800105c:	481a      	ldr	r0, [pc, #104]	; (80010c8 <getChannel+0x9c>)
 800105e:	f002 f8ff 	bl	8003260 <HAL_GPIO_ReadPin>
 8001062:	4603      	mov	r3, r0
 8001064:	2b00      	cmp	r3, #0
 8001066:	d101      	bne.n	800106c <getChannel+0x40>
 8001068:	2302      	movs	r3, #2
 800106a:	e000      	b.n	800106e <getChannel+0x42>
 800106c:	2300      	movs	r3, #0
 800106e:	b25a      	sxtb	r2, r3
 8001070:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001074:	4313      	orrs	r3, r2
 8001076:	b25b      	sxtb	r3, r3
 8001078:	71fb      	strb	r3, [r7, #7]
	ch |= !HAL_GPIO_ReadPin(CH_b2_GPIO_Port, CH_b2_Pin) << 2;
 800107a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800107e:	4812      	ldr	r0, [pc, #72]	; (80010c8 <getChannel+0x9c>)
 8001080:	f002 f8ee 	bl	8003260 <HAL_GPIO_ReadPin>
 8001084:	4603      	mov	r3, r0
 8001086:	2b00      	cmp	r3, #0
 8001088:	d101      	bne.n	800108e <getChannel+0x62>
 800108a:	2304      	movs	r3, #4
 800108c:	e000      	b.n	8001090 <getChannel+0x64>
 800108e:	2300      	movs	r3, #0
 8001090:	b25a      	sxtb	r2, r3
 8001092:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001096:	4313      	orrs	r3, r2
 8001098:	b25b      	sxtb	r3, r3
 800109a:	71fb      	strb	r3, [r7, #7]
	ch |= !HAL_GPIO_ReadPin(CH_b3_GPIO_Port, CH_b3_Pin) << 3;
 800109c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80010a0:	4809      	ldr	r0, [pc, #36]	; (80010c8 <getChannel+0x9c>)
 80010a2:	f002 f8dd 	bl	8003260 <HAL_GPIO_ReadPin>
 80010a6:	4603      	mov	r3, r0
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d101      	bne.n	80010b0 <getChannel+0x84>
 80010ac:	2308      	movs	r3, #8
 80010ae:	e000      	b.n	80010b2 <getChannel+0x86>
 80010b0:	2300      	movs	r3, #0
 80010b2:	b25a      	sxtb	r2, r3
 80010b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010b8:	4313      	orrs	r3, r2
 80010ba:	b25b      	sxtb	r3, r3
 80010bc:	71fb      	strb	r3, [r7, #7]

	return ch;
 80010be:	79fb      	ldrb	r3, [r7, #7]
}
 80010c0:	4618      	mov	r0, r3
 80010c2:	3708      	adds	r7, #8
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bd80      	pop	{r7, pc}
 80010c8:	40020400 	.word	0x40020400

080010cc <getVolume>:


float getVolume()
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	af00      	add	r7, sp, #0
	static float rate = 0.0;

	if (HAL_ADC_PollForConversion(&hadc1, 10) != HAL_OK)
 80010d0:	210a      	movs	r1, #10
 80010d2:	4813      	ldr	r0, [pc, #76]	; (8001120 <getVolume+0x54>)
 80010d4:	f000 fe1b 	bl	8001d0e <HAL_ADC_PollForConversion>
 80010d8:	4603      	mov	r3, r0
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d002      	beq.n	80010e4 <getVolume+0x18>
	{
		Error_Handler();
 80010de:	f000 fb53 	bl	8001788 <Error_Handler>
 80010e2:	e00d      	b.n	8001100 <getVolume+0x34>
	}
	else
	{
		rate = HAL_ADC_GetValue(&hadc1) / 4096.0f;
 80010e4:	480e      	ldr	r0, [pc, #56]	; (8001120 <getVolume+0x54>)
 80010e6:	f000 ff67 	bl	8001fb8 <HAL_ADC_GetValue>
 80010ea:	ee07 0a90 	vmov	s15, r0
 80010ee:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80010f2:	eddf 6a0c 	vldr	s13, [pc, #48]	; 8001124 <getVolume+0x58>
 80010f6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80010fa:	4b0b      	ldr	r3, [pc, #44]	; (8001128 <getVolume+0x5c>)
 80010fc:	edc3 7a00 	vstr	s15, [r3]
	}

	if(HAL_ADC_Start_IT(&hadc1) != HAL_OK)
 8001100:	4807      	ldr	r0, [pc, #28]	; (8001120 <getVolume+0x54>)
 8001102:	f000 fe89 	bl	8001e18 <HAL_ADC_Start_IT>
 8001106:	4603      	mov	r3, r0
 8001108:	2b00      	cmp	r3, #0
 800110a:	d001      	beq.n	8001110 <getVolume+0x44>
	{
		Error_Handler();
 800110c:	f000 fb3c 	bl	8001788 <Error_Handler>
	}

	return rate;
 8001110:	4b05      	ldr	r3, [pc, #20]	; (8001128 <getVolume+0x5c>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	ee07 3a90 	vmov	s15, r3

}
 8001118:	eeb0 0a67 	vmov.f32	s0, s15
 800111c:	bd80      	pop	{r7, pc}
 800111e:	bf00      	nop
 8001120:	200007b0 	.word	0x200007b0
 8001124:	45800000 	.word	0x45800000
 8001128:	2000039c 	.word	0x2000039c

0800112c <printf_cdc>:

int32_t printf_cdc(char *format, ...)
{
 800112c:	b40f      	push	{r0, r1, r2, r3}
 800112e:	b580      	push	{r7, lr}
 8001130:	b082      	sub	sp, #8
 8001132:	af00      	add	r7, sp, #0
	int32_t TransStrLength;
	static char TransStr[1024];

	va_list args;
	va_start(args, format);
 8001134:	f107 0314 	add.w	r3, r7, #20
 8001138:	603b      	str	r3, [r7, #0]
	TransStrLength = vsprintf(TransStr, format, args);
 800113a:	683a      	ldr	r2, [r7, #0]
 800113c:	6939      	ldr	r1, [r7, #16]
 800113e:	4809      	ldr	r0, [pc, #36]	; (8001164 <printf_cdc+0x38>)
 8001140:	f00a fd7e 	bl	800bc40 <vsiprintf>
 8001144:	6078      	str	r0, [r7, #4]
	va_end(args);

	CDC_Transmit_FS((uint8_t *)TransStr, TransStrLength);
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	b29b      	uxth	r3, r3
 800114a:	4619      	mov	r1, r3
 800114c:	4805      	ldr	r0, [pc, #20]	; (8001164 <printf_cdc+0x38>)
 800114e:	f008 faa5 	bl	800969c <CDC_Transmit_FS>

	return TransStrLength;
 8001152:	687b      	ldr	r3, [r7, #4]
}
 8001154:	4618      	mov	r0, r3
 8001156:	3708      	adds	r7, #8
 8001158:	46bd      	mov	sp, r7
 800115a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800115e:	b004      	add	sp, #16
 8001160:	4770      	bx	lr
 8001162:	bf00      	nop
 8001164:	200003a0 	.word	0x200003a0

08001168 <LED_blink>:


void LED_blink()
{
 8001168:	b580      	push	{r7, lr}
 800116a:	af00      	add	r7, sp, #0

	switch(LED_blink_state)
 800116c:	4b31      	ldr	r3, [pc, #196]	; (8001234 <LED_blink+0xcc>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	2b01      	cmp	r3, #1
 8001172:	d01d      	beq.n	80011b0 <LED_blink+0x48>
 8001174:	2b01      	cmp	r3, #1
 8001176:	d302      	bcc.n	800117e <LED_blink+0x16>
 8001178:	2b02      	cmp	r3, #2
 800117a:	d030      	beq.n	80011de <LED_blink+0x76>
		}
		break;

	default:

		break;
 800117c:	e050      	b.n	8001220 <LED_blink+0xb8>
		HAL_GPIO_WritePin(USER_LED_GPIO_Port, USER_LED_Pin, GPIO_PIN_RESET);
 800117e:	2200      	movs	r2, #0
 8001180:	2101      	movs	r1, #1
 8001182:	482d      	ldr	r0, [pc, #180]	; (8001238 <LED_blink+0xd0>)
 8001184:	f002 f884 	bl	8003290 <HAL_GPIO_WritePin>
		if(LED_blink_t_us >= LED_blink_T_wait_us)
 8001188:	4b2c      	ldr	r3, [pc, #176]	; (800123c <LED_blink+0xd4>)
 800118a:	681a      	ldr	r2, [r3, #0]
 800118c:	4b2c      	ldr	r3, [pc, #176]	; (8001240 <LED_blink+0xd8>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	429a      	cmp	r2, r3
 8001192:	d340      	bcc.n	8001216 <LED_blink+0xae>
			if(LED_blink_times > 0)
 8001194:	4b2b      	ldr	r3, [pc, #172]	; (8001244 <LED_blink+0xdc>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	2b00      	cmp	r3, #0
 800119a:	d005      	beq.n	80011a8 <LED_blink+0x40>
				LED_blink_state = 1;
 800119c:	4b25      	ldr	r3, [pc, #148]	; (8001234 <LED_blink+0xcc>)
 800119e:	2201      	movs	r2, #1
 80011a0:	601a      	str	r2, [r3, #0]
				LED_blink_count = 0;
 80011a2:	4b29      	ldr	r3, [pc, #164]	; (8001248 <LED_blink+0xe0>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	601a      	str	r2, [r3, #0]
			LED_blink_t_us = 0;
 80011a8:	4b24      	ldr	r3, [pc, #144]	; (800123c <LED_blink+0xd4>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	601a      	str	r2, [r3, #0]
		break;
 80011ae:	e032      	b.n	8001216 <LED_blink+0xae>
		HAL_GPIO_WritePin(USER_LED_GPIO_Port, USER_LED_Pin, GPIO_PIN_SET);
 80011b0:	2201      	movs	r2, #1
 80011b2:	2101      	movs	r1, #1
 80011b4:	4820      	ldr	r0, [pc, #128]	; (8001238 <LED_blink+0xd0>)
 80011b6:	f002 f86b 	bl	8003290 <HAL_GPIO_WritePin>
		if(LED_blink_t_us >= LED_blink_Ton_us)
 80011ba:	4b20      	ldr	r3, [pc, #128]	; (800123c <LED_blink+0xd4>)
 80011bc:	681a      	ldr	r2, [r3, #0]
 80011be:	4b23      	ldr	r3, [pc, #140]	; (800124c <LED_blink+0xe4>)
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	429a      	cmp	r2, r3
 80011c4:	d329      	bcc.n	800121a <LED_blink+0xb2>
			LED_blink_count += 1;
 80011c6:	4b20      	ldr	r3, [pc, #128]	; (8001248 <LED_blink+0xe0>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	3301      	adds	r3, #1
 80011cc:	4a1e      	ldr	r2, [pc, #120]	; (8001248 <LED_blink+0xe0>)
 80011ce:	6013      	str	r3, [r2, #0]
			LED_blink_state = 2;
 80011d0:	4b18      	ldr	r3, [pc, #96]	; (8001234 <LED_blink+0xcc>)
 80011d2:	2202      	movs	r2, #2
 80011d4:	601a      	str	r2, [r3, #0]
			LED_blink_t_us = 0;
 80011d6:	4b19      	ldr	r3, [pc, #100]	; (800123c <LED_blink+0xd4>)
 80011d8:	2200      	movs	r2, #0
 80011da:	601a      	str	r2, [r3, #0]
		break;
 80011dc:	e01d      	b.n	800121a <LED_blink+0xb2>
		HAL_GPIO_WritePin(USER_LED_GPIO_Port, USER_LED_Pin, GPIO_PIN_RESET);
 80011de:	2200      	movs	r2, #0
 80011e0:	2101      	movs	r1, #1
 80011e2:	4815      	ldr	r0, [pc, #84]	; (8001238 <LED_blink+0xd0>)
 80011e4:	f002 f854 	bl	8003290 <HAL_GPIO_WritePin>
		if(LED_blink_t_us >= LED_blink_Toff_us)
 80011e8:	4b14      	ldr	r3, [pc, #80]	; (800123c <LED_blink+0xd4>)
 80011ea:	681a      	ldr	r2, [r3, #0]
 80011ec:	4b18      	ldr	r3, [pc, #96]	; (8001250 <LED_blink+0xe8>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	429a      	cmp	r2, r3
 80011f2:	d314      	bcc.n	800121e <LED_blink+0xb6>
			if(LED_blink_count < LED_blink_times)
 80011f4:	4b14      	ldr	r3, [pc, #80]	; (8001248 <LED_blink+0xe0>)
 80011f6:	681a      	ldr	r2, [r3, #0]
 80011f8:	4b12      	ldr	r3, [pc, #72]	; (8001244 <LED_blink+0xdc>)
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	429a      	cmp	r2, r3
 80011fe:	d203      	bcs.n	8001208 <LED_blink+0xa0>
				LED_blink_state = 1;
 8001200:	4b0c      	ldr	r3, [pc, #48]	; (8001234 <LED_blink+0xcc>)
 8001202:	2201      	movs	r2, #1
 8001204:	601a      	str	r2, [r3, #0]
 8001206:	e002      	b.n	800120e <LED_blink+0xa6>
				LED_blink_state = 0;
 8001208:	4b0a      	ldr	r3, [pc, #40]	; (8001234 <LED_blink+0xcc>)
 800120a:	2200      	movs	r2, #0
 800120c:	601a      	str	r2, [r3, #0]
			LED_blink_t_us = 0;
 800120e:	4b0b      	ldr	r3, [pc, #44]	; (800123c <LED_blink+0xd4>)
 8001210:	2200      	movs	r2, #0
 8001212:	601a      	str	r2, [r3, #0]
		break;
 8001214:	e003      	b.n	800121e <LED_blink+0xb6>
		break;
 8001216:	bf00      	nop
 8001218:	e002      	b.n	8001220 <LED_blink+0xb8>
		break;
 800121a:	bf00      	nop
 800121c:	e000      	b.n	8001220 <LED_blink+0xb8>
		break;
 800121e:	bf00      	nop
	}

	LED_blink_t_us += LED_blink_Ts_us;
 8001220:	4b0c      	ldr	r3, [pc, #48]	; (8001254 <LED_blink+0xec>)
 8001222:	681a      	ldr	r2, [r3, #0]
 8001224:	4b05      	ldr	r3, [pc, #20]	; (800123c <LED_blink+0xd4>)
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	4413      	add	r3, r2
 800122a:	4a04      	ldr	r2, [pc, #16]	; (800123c <LED_blink+0xd4>)
 800122c:	6013      	str	r3, [r2, #0]

}
 800122e:	bf00      	nop
 8001230:	bd80      	pop	{r7, pc}
 8001232:	bf00      	nop
 8001234:	20000390 	.word	0x20000390
 8001238:	40020400 	.word	0x40020400
 800123c:	20000394 	.word	0x20000394
 8001240:	20000008 	.word	0x20000008
 8001244:	20000398 	.word	0x20000398
 8001248:	2000038c 	.word	0x2000038c
 800124c:	20000000 	.word	0x20000000
 8001250:	20000004 	.word	0x20000004
 8001254:	2000000c 	.word	0x2000000c

08001258 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback (TIM_HandleTypeDef * htim)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b082      	sub	sp, #8
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]

	if(htim->Instance == TIM1)
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	4a04      	ldr	r2, [pc, #16]	; (8001278 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001266:	4293      	cmp	r3, r2
 8001268:	d101      	bne.n	800126e <HAL_TIM_PeriodElapsedCallback+0x16>
	{
		// 1ms
		LED_blink();
 800126a:	f7ff ff7d 	bl	8001168 <LED_blink>
	}

}
 800126e:	bf00      	nop
 8001270:	3708      	adds	r7, #8
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}
 8001276:	bf00      	nop
 8001278:	40010000 	.word	0x40010000

0800127c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800127c:	b590      	push	{r4, r7, lr}
 800127e:	ed2d 8b02 	vpush	{d8}
 8001282:	b085      	sub	sp, #20
 8001284:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

	uint8_t targetChannel = 0;
 8001286:	2300      	movs	r3, #0
 8001288:	72bb      	strb	r3, [r7, #10]

	float omega_ref = 0.0;
 800128a:	f04f 0300 	mov.w	r3, #0
 800128e:	607b      	str	r3, [r7, #4]

	int omega_sign = 1;
 8001290:	2301      	movs	r3, #1
 8001292:	60fb      	str	r3, [r7, #12]

	uint8_t button = 0;
 8001294:	2300      	movs	r3, #0
 8001296:	70fb      	strb	r3, [r7, #3]
	uint8_t p_button = 0;
 8001298:	2300      	movs	r3, #0
 800129a:	72fb      	strb	r3, [r7, #11]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800129c:	f000 fc60 	bl	8001b60 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012a0:	f000 f876 	bl	8001390 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012a4:	f000 fa12 	bl	80016cc <MX_GPIO_Init>
  MX_ADC1_Init();
 80012a8:	f000 f90e 	bl	80014c8 <MX_ADC1_Init>
  MX_CAN1_Init();
 80012ac:	f000 f95e 	bl	800156c <MX_CAN1_Init>
  MX_USART2_UART_Init();
 80012b0:	f000 f9e2 	bl	8001678 <MX_USART2_UART_Init>
  MX_USB_DEVICE_Init();
 80012b4:	f008 f934 	bl	8009520 <MX_USB_DEVICE_Init>
  MX_TIM1_Init();
 80012b8:	f000 f98e 	bl	80015d8 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  // CAN Start
  if(HAL_CAN_Start(&hcan1) != HAL_OK)
 80012bc:	482d      	ldr	r0, [pc, #180]	; (8001374 <main+0xf8>)
 80012be:	f001 f9b2 	bl	8002626 <HAL_CAN_Start>
 80012c2:	4603      	mov	r3, r0
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d001      	beq.n	80012cc <main+0x50>
  {
	  Error_Handler();
 80012c8:	f000 fa5e 	bl	8001788 <Error_Handler>
  }

  // ADC Start
  if(HAL_ADC_Start_IT(&hadc1) != HAL_OK)
 80012cc:	482a      	ldr	r0, [pc, #168]	; (8001378 <main+0xfc>)
 80012ce:	f000 fda3 	bl	8001e18 <HAL_ADC_Start_IT>
 80012d2:	4603      	mov	r3, r0
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d001      	beq.n	80012dc <main+0x60>
  {
	  Error_Handler();
 80012d8:	f000 fa56 	bl	8001788 <Error_Handler>
  }

  // Timer Start
  if(HAL_TIM_Base_Start_IT(&htim1) != HAL_OK)
 80012dc:	4827      	ldr	r0, [pc, #156]	; (800137c <main+0x100>)
 80012de:	f004 fa2a 	bl	8005736 <HAL_TIM_Base_Start_IT>
 80012e2:	4603      	mov	r3, r0
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d001      	beq.n	80012ec <main+0x70>
  {
	  Error_Handler();
 80012e8:	f000 fa4e 	bl	8001788 <Error_Handler>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  HAL_Delay(10);
 80012ec:	200a      	movs	r0, #10
 80012ee:	f000 fca9 	bl	8001c44 <HAL_Delay>


	  targetChannel = getChannel();
 80012f2:	f7ff fe9b 	bl	800102c <getChannel>
 80012f6:	4603      	mov	r3, r0
 80012f8:	72bb      	strb	r3, [r7, #10]

	  LED_blink_times = targetChannel;
 80012fa:	7abb      	ldrb	r3, [r7, #10]
 80012fc:	4a20      	ldr	r2, [pc, #128]	; (8001380 <main+0x104>)
 80012fe:	6013      	str	r3, [r2, #0]

	  button = !HAL_GPIO_ReadPin(USER_BUTTON_GPIO_Port, USER_BUTTON_Pin);
 8001300:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001304:	481f      	ldr	r0, [pc, #124]	; (8001384 <main+0x108>)
 8001306:	f001 ffab 	bl	8003260 <HAL_GPIO_ReadPin>
 800130a:	4603      	mov	r3, r0
 800130c:	2b00      	cmp	r3, #0
 800130e:	bf0c      	ite	eq
 8001310:	2301      	moveq	r3, #1
 8001312:	2300      	movne	r3, #0
 8001314:	b2db      	uxtb	r3, r3
 8001316:	70fb      	strb	r3, [r7, #3]

	  if(button && !p_button)
 8001318:	78fb      	ldrb	r3, [r7, #3]
 800131a:	2b00      	cmp	r3, #0
 800131c:	d005      	beq.n	800132a <main+0xae>
 800131e:	7afb      	ldrb	r3, [r7, #11]
 8001320:	2b00      	cmp	r3, #0
 8001322:	d102      	bne.n	800132a <main+0xae>
	  {
		  omega_sign *= -1;
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	425b      	negs	r3, r3
 8001328:	60fb      	str	r3, [r7, #12]
	  }
	  p_button = button;
 800132a:	78fb      	ldrb	r3, [r7, #3]
 800132c:	72fb      	strb	r3, [r7, #11]

	  omega_ref = omega_sign * getVolume() * 50.0f;
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	ee07 3a90 	vmov	s15, r3
 8001334:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8001338:	f7ff fec8 	bl	80010cc <getVolume>
 800133c:	eef0 7a40 	vmov.f32	s15, s0
 8001340:	ee68 7a27 	vmul.f32	s15, s16, s15
 8001344:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8001388 <main+0x10c>
 8001348:	ee67 7a87 	vmul.f32	s15, s15, s14
 800134c:	edc7 7a01 	vstr	s15, [r7, #4]

	  driveMotor_speed(targetChannel, omega_ref);
 8001350:	7abb      	ldrb	r3, [r7, #10]
 8001352:	ed97 0a01 	vldr	s0, [r7, #4]
 8001356:	4618      	mov	r0, r3
 8001358:	f7ff fe36 	bl	8000fc8 <driveMotor_speed>

	  printf_cdc("ID:%d, speed_ref=%.1f\n", targetChannel, omega_ref);
 800135c:	7abc      	ldrb	r4, [r7, #10]
 800135e:	6878      	ldr	r0, [r7, #4]
 8001360:	f7ff f912 	bl	8000588 <__aeabi_f2d>
 8001364:	4602      	mov	r2, r0
 8001366:	460b      	mov	r3, r1
 8001368:	4621      	mov	r1, r4
 800136a:	4808      	ldr	r0, [pc, #32]	; (800138c <main+0x110>)
 800136c:	f7ff fede 	bl	800112c <printf_cdc>
	  HAL_Delay(10);
 8001370:	e7bc      	b.n	80012ec <main+0x70>
 8001372:	bf00      	nop
 8001374:	20000878 	.word	0x20000878
 8001378:	200007b0 	.word	0x200007b0
 800137c:	200007f8 	.word	0x200007f8
 8001380:	20000398 	.word	0x20000398
 8001384:	40020400 	.word	0x40020400
 8001388:	42480000 	.word	0x42480000
 800138c:	0800db38 	.word	0x0800db38

08001390 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b0ac      	sub	sp, #176	; 0xb0
 8001394:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001396:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800139a:	2234      	movs	r2, #52	; 0x34
 800139c:	2100      	movs	r1, #0
 800139e:	4618      	mov	r0, r3
 80013a0:	f008 fe66 	bl	800a070 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013a4:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80013a8:	2200      	movs	r2, #0
 80013aa:	601a      	str	r2, [r3, #0]
 80013ac:	605a      	str	r2, [r3, #4]
 80013ae:	609a      	str	r2, [r3, #8]
 80013b0:	60da      	str	r2, [r3, #12]
 80013b2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80013b4:	f107 030c 	add.w	r3, r7, #12
 80013b8:	225c      	movs	r2, #92	; 0x5c
 80013ba:	2100      	movs	r1, #0
 80013bc:	4618      	mov	r0, r3
 80013be:	f008 fe57 	bl	800a070 <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80013c2:	2300      	movs	r3, #0
 80013c4:	60bb      	str	r3, [r7, #8]
 80013c6:	4b3e      	ldr	r3, [pc, #248]	; (80014c0 <SystemClock_Config+0x130>)
 80013c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ca:	4a3d      	ldr	r2, [pc, #244]	; (80014c0 <SystemClock_Config+0x130>)
 80013cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013d0:	6413      	str	r3, [r2, #64]	; 0x40
 80013d2:	4b3b      	ldr	r3, [pc, #236]	; (80014c0 <SystemClock_Config+0x130>)
 80013d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013da:	60bb      	str	r3, [r7, #8]
 80013dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80013de:	2300      	movs	r3, #0
 80013e0:	607b      	str	r3, [r7, #4]
 80013e2:	4b38      	ldr	r3, [pc, #224]	; (80014c4 <SystemClock_Config+0x134>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	4a37      	ldr	r2, [pc, #220]	; (80014c4 <SystemClock_Config+0x134>)
 80013e8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80013ec:	6013      	str	r3, [r2, #0]
 80013ee:	4b35      	ldr	r3, [pc, #212]	; (80014c4 <SystemClock_Config+0x134>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80013f6:	607b      	str	r3, [r7, #4]
 80013f8:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80013fa:	2301      	movs	r3, #1
 80013fc:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80013fe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001402:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001406:	2302      	movs	r3, #2
 8001408:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800140c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001410:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001414:	2308      	movs	r3, #8
 8001416:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLN = 288;
 800141a:	f44f 7390 	mov.w	r3, #288	; 0x120
 800141e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001422:	2302      	movs	r3, #2
 8001424:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLQ = 10;
 8001428:	230a      	movs	r3, #10
 800142a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.PLL.PLLR = 2;
 800142e:	2302      	movs	r3, #2
 8001430:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001434:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001438:	4618      	mov	r0, r3
 800143a:	f003 fef7 	bl	800522c <HAL_RCC_OscConfig>
 800143e:	4603      	mov	r3, r0
 8001440:	2b00      	cmp	r3, #0
 8001442:	d001      	beq.n	8001448 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8001444:	f000 f9a0 	bl	8001788 <Error_Handler>
  }
  /** Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001448:	f003 f90a 	bl	8004660 <HAL_PWREx_EnableOverDrive>
 800144c:	4603      	mov	r3, r0
 800144e:	2b00      	cmp	r3, #0
 8001450:	d001      	beq.n	8001456 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8001452:	f000 f999 	bl	8001788 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001456:	230f      	movs	r3, #15
 8001458:	66bb      	str	r3, [r7, #104]	; 0x68
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800145a:	2302      	movs	r3, #2
 800145c:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800145e:	2300      	movs	r3, #0
 8001460:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001462:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001466:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001468:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800146c:	67bb      	str	r3, [r7, #120]	; 0x78

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800146e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001472:	2105      	movs	r1, #5
 8001474:	4618      	mov	r0, r3
 8001476:	f003 f943 	bl	8004700 <HAL_RCC_ClockConfig>
 800147a:	4603      	mov	r3, r0
 800147c:	2b00      	cmp	r3, #0
 800147e:	d001      	beq.n	8001484 <SystemClock_Config+0xf4>
  {
    Error_Handler();
 8001480:	f000 f982 	bl	8001788 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8001484:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001488:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLSAI.PLLSAIM = 10;
 800148a:	230a      	movs	r3, #10
 800148c:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 800148e:	23c0      	movs	r3, #192	; 0xc0
 8001490:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8001492:	2302      	movs	r3, #2
 8001494:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV4;
 8001496:	2304      	movs	r3, #4
 8001498:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 800149a:	2301      	movs	r3, #1
 800149c:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLSAIP;
 800149e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80014a2:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80014a4:	f107 030c 	add.w	r3, r7, #12
 80014a8:	4618      	mov	r0, r3
 80014aa:	f003 fa43 	bl	8004934 <HAL_RCCEx_PeriphCLKConfig>
 80014ae:	4603      	mov	r3, r0
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d001      	beq.n	80014b8 <SystemClock_Config+0x128>
  {
    Error_Handler();
 80014b4:	f000 f968 	bl	8001788 <Error_Handler>
  }
}
 80014b8:	bf00      	nop
 80014ba:	37b0      	adds	r7, #176	; 0xb0
 80014bc:	46bd      	mov	sp, r7
 80014be:	bd80      	pop	{r7, pc}
 80014c0:	40023800 	.word	0x40023800
 80014c4:	40007000 	.word	0x40007000

080014c8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b084      	sub	sp, #16
 80014cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80014ce:	463b      	mov	r3, r7
 80014d0:	2200      	movs	r2, #0
 80014d2:	601a      	str	r2, [r3, #0]
 80014d4:	605a      	str	r2, [r3, #4]
 80014d6:	609a      	str	r2, [r3, #8]
 80014d8:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 80014da:	4b21      	ldr	r3, [pc, #132]	; (8001560 <MX_ADC1_Init+0x98>)
 80014dc:	4a21      	ldr	r2, [pc, #132]	; (8001564 <MX_ADC1_Init+0x9c>)
 80014de:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80014e0:	4b1f      	ldr	r3, [pc, #124]	; (8001560 <MX_ADC1_Init+0x98>)
 80014e2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80014e6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80014e8:	4b1d      	ldr	r3, [pc, #116]	; (8001560 <MX_ADC1_Init+0x98>)
 80014ea:	2200      	movs	r2, #0
 80014ec:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80014ee:	4b1c      	ldr	r3, [pc, #112]	; (8001560 <MX_ADC1_Init+0x98>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80014f4:	4b1a      	ldr	r3, [pc, #104]	; (8001560 <MX_ADC1_Init+0x98>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80014fa:	4b19      	ldr	r3, [pc, #100]	; (8001560 <MX_ADC1_Init+0x98>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001502:	4b17      	ldr	r3, [pc, #92]	; (8001560 <MX_ADC1_Init+0x98>)
 8001504:	2200      	movs	r2, #0
 8001506:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001508:	4b15      	ldr	r3, [pc, #84]	; (8001560 <MX_ADC1_Init+0x98>)
 800150a:	4a17      	ldr	r2, [pc, #92]	; (8001568 <MX_ADC1_Init+0xa0>)
 800150c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800150e:	4b14      	ldr	r3, [pc, #80]	; (8001560 <MX_ADC1_Init+0x98>)
 8001510:	2200      	movs	r2, #0
 8001512:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001514:	4b12      	ldr	r3, [pc, #72]	; (8001560 <MX_ADC1_Init+0x98>)
 8001516:	2201      	movs	r2, #1
 8001518:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800151a:	4b11      	ldr	r3, [pc, #68]	; (8001560 <MX_ADC1_Init+0x98>)
 800151c:	2200      	movs	r2, #0
 800151e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001522:	4b0f      	ldr	r3, [pc, #60]	; (8001560 <MX_ADC1_Init+0x98>)
 8001524:	2201      	movs	r2, #1
 8001526:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001528:	480d      	ldr	r0, [pc, #52]	; (8001560 <MX_ADC1_Init+0x98>)
 800152a:	f000 fbad 	bl	8001c88 <HAL_ADC_Init>
 800152e:	4603      	mov	r3, r0
 8001530:	2b00      	cmp	r3, #0
 8001532:	d001      	beq.n	8001538 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001534:	f000 f928 	bl	8001788 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001538:	2300      	movs	r3, #0
 800153a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800153c:	2301      	movs	r3, #1
 800153e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001540:	2300      	movs	r3, #0
 8001542:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001544:	463b      	mov	r3, r7
 8001546:	4619      	mov	r1, r3
 8001548:	4805      	ldr	r0, [pc, #20]	; (8001560 <MX_ADC1_Init+0x98>)
 800154a:	f000 fd43 	bl	8001fd4 <HAL_ADC_ConfigChannel>
 800154e:	4603      	mov	r3, r0
 8001550:	2b00      	cmp	r3, #0
 8001552:	d001      	beq.n	8001558 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001554:	f000 f918 	bl	8001788 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001558:	bf00      	nop
 800155a:	3710      	adds	r7, #16
 800155c:	46bd      	mov	sp, r7
 800155e:	bd80      	pop	{r7, pc}
 8001560:	200007b0 	.word	0x200007b0
 8001564:	40012000 	.word	0x40012000
 8001568:	0f000001 	.word	0x0f000001

0800156c <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8001570:	4b17      	ldr	r3, [pc, #92]	; (80015d0 <MX_CAN1_Init+0x64>)
 8001572:	4a18      	ldr	r2, [pc, #96]	; (80015d4 <MX_CAN1_Init+0x68>)
 8001574:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 5;
 8001576:	4b16      	ldr	r3, [pc, #88]	; (80015d0 <MX_CAN1_Init+0x64>)
 8001578:	2205      	movs	r2, #5
 800157a:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 800157c:	4b14      	ldr	r3, [pc, #80]	; (80015d0 <MX_CAN1_Init+0x64>)
 800157e:	2200      	movs	r2, #0
 8001580:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001582:	4b13      	ldr	r3, [pc, #76]	; (80015d0 <MX_CAN1_Init+0x64>)
 8001584:	2200      	movs	r2, #0
 8001586:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_5TQ;
 8001588:	4b11      	ldr	r3, [pc, #68]	; (80015d0 <MX_CAN1_Init+0x64>)
 800158a:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800158e:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_3TQ;
 8001590:	4b0f      	ldr	r3, [pc, #60]	; (80015d0 <MX_CAN1_Init+0x64>)
 8001592:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001596:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8001598:	4b0d      	ldr	r3, [pc, #52]	; (80015d0 <MX_CAN1_Init+0x64>)
 800159a:	2200      	movs	r2, #0
 800159c:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 800159e:	4b0c      	ldr	r3, [pc, #48]	; (80015d0 <MX_CAN1_Init+0x64>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80015a4:	4b0a      	ldr	r3, [pc, #40]	; (80015d0 <MX_CAN1_Init+0x64>)
 80015a6:	2200      	movs	r2, #0
 80015a8:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80015aa:	4b09      	ldr	r3, [pc, #36]	; (80015d0 <MX_CAN1_Init+0x64>)
 80015ac:	2200      	movs	r2, #0
 80015ae:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80015b0:	4b07      	ldr	r3, [pc, #28]	; (80015d0 <MX_CAN1_Init+0x64>)
 80015b2:	2200      	movs	r2, #0
 80015b4:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80015b6:	4b06      	ldr	r3, [pc, #24]	; (80015d0 <MX_CAN1_Init+0x64>)
 80015b8:	2200      	movs	r2, #0
 80015ba:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80015bc:	4804      	ldr	r0, [pc, #16]	; (80015d0 <MX_CAN1_Init+0x64>)
 80015be:	f000 ff37 	bl	8002430 <HAL_CAN_Init>
 80015c2:	4603      	mov	r3, r0
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d001      	beq.n	80015cc <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 80015c8:	f000 f8de 	bl	8001788 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 80015cc:	bf00      	nop
 80015ce:	bd80      	pop	{r7, pc}
 80015d0:	20000878 	.word	0x20000878
 80015d4:	40006400 	.word	0x40006400

080015d8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b086      	sub	sp, #24
 80015dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80015de:	f107 0308 	add.w	r3, r7, #8
 80015e2:	2200      	movs	r2, #0
 80015e4:	601a      	str	r2, [r3, #0]
 80015e6:	605a      	str	r2, [r3, #4]
 80015e8:	609a      	str	r2, [r3, #8]
 80015ea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015ec:	463b      	mov	r3, r7
 80015ee:	2200      	movs	r2, #0
 80015f0:	601a      	str	r2, [r3, #0]
 80015f2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80015f4:	4b1e      	ldr	r3, [pc, #120]	; (8001670 <MX_TIM1_Init+0x98>)
 80015f6:	4a1f      	ldr	r2, [pc, #124]	; (8001674 <MX_TIM1_Init+0x9c>)
 80015f8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 18;
 80015fa:	4b1d      	ldr	r3, [pc, #116]	; (8001670 <MX_TIM1_Init+0x98>)
 80015fc:	2212      	movs	r2, #18
 80015fe:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001600:	4b1b      	ldr	r3, [pc, #108]	; (8001670 <MX_TIM1_Init+0x98>)
 8001602:	2200      	movs	r2, #0
 8001604:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 10000;
 8001606:	4b1a      	ldr	r3, [pc, #104]	; (8001670 <MX_TIM1_Init+0x98>)
 8001608:	f242 7210 	movw	r2, #10000	; 0x2710
 800160c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800160e:	4b18      	ldr	r3, [pc, #96]	; (8001670 <MX_TIM1_Init+0x98>)
 8001610:	2200      	movs	r2, #0
 8001612:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001614:	4b16      	ldr	r3, [pc, #88]	; (8001670 <MX_TIM1_Init+0x98>)
 8001616:	2200      	movs	r2, #0
 8001618:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800161a:	4b15      	ldr	r3, [pc, #84]	; (8001670 <MX_TIM1_Init+0x98>)
 800161c:	2200      	movs	r2, #0
 800161e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001620:	4813      	ldr	r0, [pc, #76]	; (8001670 <MX_TIM1_Init+0x98>)
 8001622:	f004 f85d 	bl	80056e0 <HAL_TIM_Base_Init>
 8001626:	4603      	mov	r3, r0
 8001628:	2b00      	cmp	r3, #0
 800162a:	d001      	beq.n	8001630 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 800162c:	f000 f8ac 	bl	8001788 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001630:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001634:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001636:	f107 0308 	add.w	r3, r7, #8
 800163a:	4619      	mov	r1, r3
 800163c:	480c      	ldr	r0, [pc, #48]	; (8001670 <MX_TIM1_Init+0x98>)
 800163e:	f004 f9a6 	bl	800598e <HAL_TIM_ConfigClockSource>
 8001642:	4603      	mov	r3, r0
 8001644:	2b00      	cmp	r3, #0
 8001646:	d001      	beq.n	800164c <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8001648:	f000 f89e 	bl	8001788 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800164c:	2300      	movs	r3, #0
 800164e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001650:	2300      	movs	r3, #0
 8001652:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001654:	463b      	mov	r3, r7
 8001656:	4619      	mov	r1, r3
 8001658:	4805      	ldr	r0, [pc, #20]	; (8001670 <MX_TIM1_Init+0x98>)
 800165a:	f004 fbb1 	bl	8005dc0 <HAL_TIMEx_MasterConfigSynchronization>
 800165e:	4603      	mov	r3, r0
 8001660:	2b00      	cmp	r3, #0
 8001662:	d001      	beq.n	8001668 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001664:	f000 f890 	bl	8001788 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001668:	bf00      	nop
 800166a:	3718      	adds	r7, #24
 800166c:	46bd      	mov	sp, r7
 800166e:	bd80      	pop	{r7, pc}
 8001670:	200007f8 	.word	0x200007f8
 8001674:	40010000 	.word	0x40010000

08001678 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800167c:	4b11      	ldr	r3, [pc, #68]	; (80016c4 <MX_USART2_UART_Init+0x4c>)
 800167e:	4a12      	ldr	r2, [pc, #72]	; (80016c8 <MX_USART2_UART_Init+0x50>)
 8001680:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001682:	4b10      	ldr	r3, [pc, #64]	; (80016c4 <MX_USART2_UART_Init+0x4c>)
 8001684:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001688:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800168a:	4b0e      	ldr	r3, [pc, #56]	; (80016c4 <MX_USART2_UART_Init+0x4c>)
 800168c:	2200      	movs	r2, #0
 800168e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001690:	4b0c      	ldr	r3, [pc, #48]	; (80016c4 <MX_USART2_UART_Init+0x4c>)
 8001692:	2200      	movs	r2, #0
 8001694:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001696:	4b0b      	ldr	r3, [pc, #44]	; (80016c4 <MX_USART2_UART_Init+0x4c>)
 8001698:	2200      	movs	r2, #0
 800169a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800169c:	4b09      	ldr	r3, [pc, #36]	; (80016c4 <MX_USART2_UART_Init+0x4c>)
 800169e:	220c      	movs	r2, #12
 80016a0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016a2:	4b08      	ldr	r3, [pc, #32]	; (80016c4 <MX_USART2_UART_Init+0x4c>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80016a8:	4b06      	ldr	r3, [pc, #24]	; (80016c4 <MX_USART2_UART_Init+0x4c>)
 80016aa:	2200      	movs	r2, #0
 80016ac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80016ae:	4805      	ldr	r0, [pc, #20]	; (80016c4 <MX_USART2_UART_Init+0x4c>)
 80016b0:	f004 fc16 	bl	8005ee0 <HAL_UART_Init>
 80016b4:	4603      	mov	r3, r0
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d001      	beq.n	80016be <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80016ba:	f000 f865 	bl	8001788 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80016be:	bf00      	nop
 80016c0:	bd80      	pop	{r7, pc}
 80016c2:	bf00      	nop
 80016c4:	20000838 	.word	0x20000838
 80016c8:	40004400 	.word	0x40004400

080016cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b088      	sub	sp, #32
 80016d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016d2:	f107 030c 	add.w	r3, r7, #12
 80016d6:	2200      	movs	r2, #0
 80016d8:	601a      	str	r2, [r3, #0]
 80016da:	605a      	str	r2, [r3, #4]
 80016dc:	609a      	str	r2, [r3, #8]
 80016de:	60da      	str	r2, [r3, #12]
 80016e0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80016e2:	2300      	movs	r3, #0
 80016e4:	60bb      	str	r3, [r7, #8]
 80016e6:	4b26      	ldr	r3, [pc, #152]	; (8001780 <MX_GPIO_Init+0xb4>)
 80016e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ea:	4a25      	ldr	r2, [pc, #148]	; (8001780 <MX_GPIO_Init+0xb4>)
 80016ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80016f0:	6313      	str	r3, [r2, #48]	; 0x30
 80016f2:	4b23      	ldr	r3, [pc, #140]	; (8001780 <MX_GPIO_Init+0xb4>)
 80016f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016fa:	60bb      	str	r3, [r7, #8]
 80016fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016fe:	2300      	movs	r3, #0
 8001700:	607b      	str	r3, [r7, #4]
 8001702:	4b1f      	ldr	r3, [pc, #124]	; (8001780 <MX_GPIO_Init+0xb4>)
 8001704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001706:	4a1e      	ldr	r2, [pc, #120]	; (8001780 <MX_GPIO_Init+0xb4>)
 8001708:	f043 0301 	orr.w	r3, r3, #1
 800170c:	6313      	str	r3, [r2, #48]	; 0x30
 800170e:	4b1c      	ldr	r3, [pc, #112]	; (8001780 <MX_GPIO_Init+0xb4>)
 8001710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001712:	f003 0301 	and.w	r3, r3, #1
 8001716:	607b      	str	r3, [r7, #4]
 8001718:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800171a:	2300      	movs	r3, #0
 800171c:	603b      	str	r3, [r7, #0]
 800171e:	4b18      	ldr	r3, [pc, #96]	; (8001780 <MX_GPIO_Init+0xb4>)
 8001720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001722:	4a17      	ldr	r2, [pc, #92]	; (8001780 <MX_GPIO_Init+0xb4>)
 8001724:	f043 0302 	orr.w	r3, r3, #2
 8001728:	6313      	str	r3, [r2, #48]	; 0x30
 800172a:	4b15      	ldr	r3, [pc, #84]	; (8001780 <MX_GPIO_Init+0xb4>)
 800172c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800172e:	f003 0302 	and.w	r3, r3, #2
 8001732:	603b      	str	r3, [r7, #0]
 8001734:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USER_LED_GPIO_Port, USER_LED_Pin, GPIO_PIN_RESET);
 8001736:	2200      	movs	r2, #0
 8001738:	2101      	movs	r1, #1
 800173a:	4812      	ldr	r0, [pc, #72]	; (8001784 <MX_GPIO_Init+0xb8>)
 800173c:	f001 fda8 	bl	8003290 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_LED_Pin */
  GPIO_InitStruct.Pin = USER_LED_Pin;
 8001740:	2301      	movs	r3, #1
 8001742:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001744:	2301      	movs	r3, #1
 8001746:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001748:	2300      	movs	r3, #0
 800174a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800174c:	2300      	movs	r3, #0
 800174e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(USER_LED_GPIO_Port, &GPIO_InitStruct);
 8001750:	f107 030c 	add.w	r3, r7, #12
 8001754:	4619      	mov	r1, r3
 8001756:	480b      	ldr	r0, [pc, #44]	; (8001784 <MX_GPIO_Init+0xb8>)
 8001758:	f001 fbf0 	bl	8002f3c <HAL_GPIO_Init>

  /*Configure GPIO pins : USER_BUTTON_Pin CH_b0_Pin CH_b1_Pin CH_b2_Pin 
                           CH_b3_Pin */
  GPIO_InitStruct.Pin = USER_BUTTON_Pin|CH_b0_Pin|CH_b1_Pin|CH_b2_Pin 
 800175c:	f44f 4374 	mov.w	r3, #62464	; 0xf400
 8001760:	60fb      	str	r3, [r7, #12]
                          |CH_b3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001762:	2300      	movs	r3, #0
 8001764:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001766:	2301      	movs	r3, #1
 8001768:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800176a:	f107 030c 	add.w	r3, r7, #12
 800176e:	4619      	mov	r1, r3
 8001770:	4804      	ldr	r0, [pc, #16]	; (8001784 <MX_GPIO_Init+0xb8>)
 8001772:	f001 fbe3 	bl	8002f3c <HAL_GPIO_Init>

}
 8001776:	bf00      	nop
 8001778:	3720      	adds	r7, #32
 800177a:	46bd      	mov	sp, r7
 800177c:	bd80      	pop	{r7, pc}
 800177e:	bf00      	nop
 8001780:	40023800 	.word	0x40023800
 8001784:	40020400 	.word	0x40020400

08001788 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001788:	b480      	push	{r7}
 800178a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800178c:	bf00      	nop
 800178e:	46bd      	mov	sp, r7
 8001790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001794:	4770      	bx	lr
	...

08001798 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001798:	b480      	push	{r7}
 800179a:	b083      	sub	sp, #12
 800179c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800179e:	2300      	movs	r3, #0
 80017a0:	607b      	str	r3, [r7, #4]
 80017a2:	4b10      	ldr	r3, [pc, #64]	; (80017e4 <HAL_MspInit+0x4c>)
 80017a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017a6:	4a0f      	ldr	r2, [pc, #60]	; (80017e4 <HAL_MspInit+0x4c>)
 80017a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017ac:	6453      	str	r3, [r2, #68]	; 0x44
 80017ae:	4b0d      	ldr	r3, [pc, #52]	; (80017e4 <HAL_MspInit+0x4c>)
 80017b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017b6:	607b      	str	r3, [r7, #4]
 80017b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017ba:	2300      	movs	r3, #0
 80017bc:	603b      	str	r3, [r7, #0]
 80017be:	4b09      	ldr	r3, [pc, #36]	; (80017e4 <HAL_MspInit+0x4c>)
 80017c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017c2:	4a08      	ldr	r2, [pc, #32]	; (80017e4 <HAL_MspInit+0x4c>)
 80017c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017c8:	6413      	str	r3, [r2, #64]	; 0x40
 80017ca:	4b06      	ldr	r3, [pc, #24]	; (80017e4 <HAL_MspInit+0x4c>)
 80017cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017d2:	603b      	str	r3, [r7, #0]
 80017d4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017d6:	bf00      	nop
 80017d8:	370c      	adds	r7, #12
 80017da:	46bd      	mov	sp, r7
 80017dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e0:	4770      	bx	lr
 80017e2:	bf00      	nop
 80017e4:	40023800 	.word	0x40023800

080017e8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b08a      	sub	sp, #40	; 0x28
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017f0:	f107 0314 	add.w	r3, r7, #20
 80017f4:	2200      	movs	r2, #0
 80017f6:	601a      	str	r2, [r3, #0]
 80017f8:	605a      	str	r2, [r3, #4]
 80017fa:	609a      	str	r2, [r3, #8]
 80017fc:	60da      	str	r2, [r3, #12]
 80017fe:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	4a17      	ldr	r2, [pc, #92]	; (8001864 <HAL_ADC_MspInit+0x7c>)
 8001806:	4293      	cmp	r3, r2
 8001808:	d127      	bne.n	800185a <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800180a:	2300      	movs	r3, #0
 800180c:	613b      	str	r3, [r7, #16]
 800180e:	4b16      	ldr	r3, [pc, #88]	; (8001868 <HAL_ADC_MspInit+0x80>)
 8001810:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001812:	4a15      	ldr	r2, [pc, #84]	; (8001868 <HAL_ADC_MspInit+0x80>)
 8001814:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001818:	6453      	str	r3, [r2, #68]	; 0x44
 800181a:	4b13      	ldr	r3, [pc, #76]	; (8001868 <HAL_ADC_MspInit+0x80>)
 800181c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800181e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001822:	613b      	str	r3, [r7, #16]
 8001824:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001826:	2300      	movs	r3, #0
 8001828:	60fb      	str	r3, [r7, #12]
 800182a:	4b0f      	ldr	r3, [pc, #60]	; (8001868 <HAL_ADC_MspInit+0x80>)
 800182c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800182e:	4a0e      	ldr	r2, [pc, #56]	; (8001868 <HAL_ADC_MspInit+0x80>)
 8001830:	f043 0301 	orr.w	r3, r3, #1
 8001834:	6313      	str	r3, [r2, #48]	; 0x30
 8001836:	4b0c      	ldr	r3, [pc, #48]	; (8001868 <HAL_ADC_MspInit+0x80>)
 8001838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800183a:	f003 0301 	and.w	r3, r3, #1
 800183e:	60fb      	str	r3, [r7, #12]
 8001840:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration    
    PA0-WKUP     ------> ADC1_IN0 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001842:	2301      	movs	r3, #1
 8001844:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001846:	2303      	movs	r3, #3
 8001848:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800184a:	2300      	movs	r3, #0
 800184c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800184e:	f107 0314 	add.w	r3, r7, #20
 8001852:	4619      	mov	r1, r3
 8001854:	4805      	ldr	r0, [pc, #20]	; (800186c <HAL_ADC_MspInit+0x84>)
 8001856:	f001 fb71 	bl	8002f3c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800185a:	bf00      	nop
 800185c:	3728      	adds	r7, #40	; 0x28
 800185e:	46bd      	mov	sp, r7
 8001860:	bd80      	pop	{r7, pc}
 8001862:	bf00      	nop
 8001864:	40012000 	.word	0x40012000
 8001868:	40023800 	.word	0x40023800
 800186c:	40020000 	.word	0x40020000

08001870 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b08a      	sub	sp, #40	; 0x28
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001878:	f107 0314 	add.w	r3, r7, #20
 800187c:	2200      	movs	r2, #0
 800187e:	601a      	str	r2, [r3, #0]
 8001880:	605a      	str	r2, [r3, #4]
 8001882:	609a      	str	r2, [r3, #8]
 8001884:	60da      	str	r2, [r3, #12]
 8001886:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	4a1d      	ldr	r2, [pc, #116]	; (8001904 <HAL_CAN_MspInit+0x94>)
 800188e:	4293      	cmp	r3, r2
 8001890:	d134      	bne.n	80018fc <HAL_CAN_MspInit+0x8c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001892:	2300      	movs	r3, #0
 8001894:	613b      	str	r3, [r7, #16]
 8001896:	4b1c      	ldr	r3, [pc, #112]	; (8001908 <HAL_CAN_MspInit+0x98>)
 8001898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800189a:	4a1b      	ldr	r2, [pc, #108]	; (8001908 <HAL_CAN_MspInit+0x98>)
 800189c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80018a0:	6413      	str	r3, [r2, #64]	; 0x40
 80018a2:	4b19      	ldr	r3, [pc, #100]	; (8001908 <HAL_CAN_MspInit+0x98>)
 80018a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018aa:	613b      	str	r3, [r7, #16]
 80018ac:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018ae:	2300      	movs	r3, #0
 80018b0:	60fb      	str	r3, [r7, #12]
 80018b2:	4b15      	ldr	r3, [pc, #84]	; (8001908 <HAL_CAN_MspInit+0x98>)
 80018b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018b6:	4a14      	ldr	r2, [pc, #80]	; (8001908 <HAL_CAN_MspInit+0x98>)
 80018b8:	f043 0302 	orr.w	r3, r3, #2
 80018bc:	6313      	str	r3, [r2, #48]	; 0x30
 80018be:	4b12      	ldr	r3, [pc, #72]	; (8001908 <HAL_CAN_MspInit+0x98>)
 80018c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018c2:	f003 0302 	and.w	r3, r3, #2
 80018c6:	60fb      	str	r3, [r7, #12]
 80018c8:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration    
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80018ca:	f44f 7340 	mov.w	r3, #768	; 0x300
 80018ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018d0:	2302      	movs	r3, #2
 80018d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018d4:	2300      	movs	r3, #0
 80018d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018d8:	2303      	movs	r3, #3
 80018da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80018dc:	2309      	movs	r3, #9
 80018de:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018e0:	f107 0314 	add.w	r3, r7, #20
 80018e4:	4619      	mov	r1, r3
 80018e6:	4809      	ldr	r0, [pc, #36]	; (800190c <HAL_CAN_MspInit+0x9c>)
 80018e8:	f001 fb28 	bl	8002f3c <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 80018ec:	2200      	movs	r2, #0
 80018ee:	2100      	movs	r1, #0
 80018f0:	2014      	movs	r0, #20
 80018f2:	f001 faec 	bl	8002ece <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80018f6:	2014      	movs	r0, #20
 80018f8:	f001 fb05 	bl	8002f06 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 80018fc:	bf00      	nop
 80018fe:	3728      	adds	r7, #40	; 0x28
 8001900:	46bd      	mov	sp, r7
 8001902:	bd80      	pop	{r7, pc}
 8001904:	40006400 	.word	0x40006400
 8001908:	40023800 	.word	0x40023800
 800190c:	40020400 	.word	0x40020400

08001910 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b084      	sub	sp, #16
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	4a0e      	ldr	r2, [pc, #56]	; (8001958 <HAL_TIM_Base_MspInit+0x48>)
 800191e:	4293      	cmp	r3, r2
 8001920:	d115      	bne.n	800194e <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001922:	2300      	movs	r3, #0
 8001924:	60fb      	str	r3, [r7, #12]
 8001926:	4b0d      	ldr	r3, [pc, #52]	; (800195c <HAL_TIM_Base_MspInit+0x4c>)
 8001928:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800192a:	4a0c      	ldr	r2, [pc, #48]	; (800195c <HAL_TIM_Base_MspInit+0x4c>)
 800192c:	f043 0301 	orr.w	r3, r3, #1
 8001930:	6453      	str	r3, [r2, #68]	; 0x44
 8001932:	4b0a      	ldr	r3, [pc, #40]	; (800195c <HAL_TIM_Base_MspInit+0x4c>)
 8001934:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001936:	f003 0301 	and.w	r3, r3, #1
 800193a:	60fb      	str	r3, [r7, #12]
 800193c:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 800193e:	2200      	movs	r2, #0
 8001940:	2100      	movs	r1, #0
 8001942:	2019      	movs	r0, #25
 8001944:	f001 fac3 	bl	8002ece <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001948:	2019      	movs	r0, #25
 800194a:	f001 fadc 	bl	8002f06 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800194e:	bf00      	nop
 8001950:	3710      	adds	r7, #16
 8001952:	46bd      	mov	sp, r7
 8001954:	bd80      	pop	{r7, pc}
 8001956:	bf00      	nop
 8001958:	40010000 	.word	0x40010000
 800195c:	40023800 	.word	0x40023800

08001960 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b08a      	sub	sp, #40	; 0x28
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001968:	f107 0314 	add.w	r3, r7, #20
 800196c:	2200      	movs	r2, #0
 800196e:	601a      	str	r2, [r3, #0]
 8001970:	605a      	str	r2, [r3, #4]
 8001972:	609a      	str	r2, [r3, #8]
 8001974:	60da      	str	r2, [r3, #12]
 8001976:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	4a19      	ldr	r2, [pc, #100]	; (80019e4 <HAL_UART_MspInit+0x84>)
 800197e:	4293      	cmp	r3, r2
 8001980:	d12b      	bne.n	80019da <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001982:	2300      	movs	r3, #0
 8001984:	613b      	str	r3, [r7, #16]
 8001986:	4b18      	ldr	r3, [pc, #96]	; (80019e8 <HAL_UART_MspInit+0x88>)
 8001988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800198a:	4a17      	ldr	r2, [pc, #92]	; (80019e8 <HAL_UART_MspInit+0x88>)
 800198c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001990:	6413      	str	r3, [r2, #64]	; 0x40
 8001992:	4b15      	ldr	r3, [pc, #84]	; (80019e8 <HAL_UART_MspInit+0x88>)
 8001994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001996:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800199a:	613b      	str	r3, [r7, #16]
 800199c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800199e:	2300      	movs	r3, #0
 80019a0:	60fb      	str	r3, [r7, #12]
 80019a2:	4b11      	ldr	r3, [pc, #68]	; (80019e8 <HAL_UART_MspInit+0x88>)
 80019a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019a6:	4a10      	ldr	r2, [pc, #64]	; (80019e8 <HAL_UART_MspInit+0x88>)
 80019a8:	f043 0301 	orr.w	r3, r3, #1
 80019ac:	6313      	str	r3, [r2, #48]	; 0x30
 80019ae:	4b0e      	ldr	r3, [pc, #56]	; (80019e8 <HAL_UART_MspInit+0x88>)
 80019b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019b2:	f003 0301 	and.w	r3, r3, #1
 80019b6:	60fb      	str	r3, [r7, #12]
 80019b8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80019ba:	230c      	movs	r3, #12
 80019bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019be:	2302      	movs	r3, #2
 80019c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019c2:	2300      	movs	r3, #0
 80019c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019c6:	2303      	movs	r3, #3
 80019c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80019ca:	2307      	movs	r3, #7
 80019cc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019ce:	f107 0314 	add.w	r3, r7, #20
 80019d2:	4619      	mov	r1, r3
 80019d4:	4805      	ldr	r0, [pc, #20]	; (80019ec <HAL_UART_MspInit+0x8c>)
 80019d6:	f001 fab1 	bl	8002f3c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80019da:	bf00      	nop
 80019dc:	3728      	adds	r7, #40	; 0x28
 80019de:	46bd      	mov	sp, r7
 80019e0:	bd80      	pop	{r7, pc}
 80019e2:	bf00      	nop
 80019e4:	40004400 	.word	0x40004400
 80019e8:	40023800 	.word	0x40023800
 80019ec:	40020000 	.word	0x40020000

080019f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019f0:	b480      	push	{r7}
 80019f2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80019f4:	bf00      	nop
 80019f6:	46bd      	mov	sp, r7
 80019f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fc:	4770      	bx	lr

080019fe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019fe:	b480      	push	{r7}
 8001a00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a02:	e7fe      	b.n	8001a02 <HardFault_Handler+0x4>

08001a04 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a04:	b480      	push	{r7}
 8001a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a08:	e7fe      	b.n	8001a08 <MemManage_Handler+0x4>

08001a0a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a0a:	b480      	push	{r7}
 8001a0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a0e:	e7fe      	b.n	8001a0e <BusFault_Handler+0x4>

08001a10 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a10:	b480      	push	{r7}
 8001a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a14:	e7fe      	b.n	8001a14 <UsageFault_Handler+0x4>

08001a16 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a16:	b480      	push	{r7}
 8001a18:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a1a:	bf00      	nop
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a22:	4770      	bx	lr

08001a24 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a24:	b480      	push	{r7}
 8001a26:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a28:	bf00      	nop
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a30:	4770      	bx	lr

08001a32 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a32:	b480      	push	{r7}
 8001a34:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a36:	bf00      	nop
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3e:	4770      	bx	lr

08001a40 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a44:	f000 f8de 	bl	8001c04 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a48:	bf00      	nop
 8001a4a:	bd80      	pop	{r7, pc}

08001a4c <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001a50:	4802      	ldr	r0, [pc, #8]	; (8001a5c <CAN1_RX0_IRQHandler+0x10>)
 8001a52:	f000 ff2d 	bl	80028b0 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8001a56:	bf00      	nop
 8001a58:	bd80      	pop	{r7, pc}
 8001a5a:	bf00      	nop
 8001a5c:	20000878 	.word	0x20000878

08001a60 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001a64:	4802      	ldr	r0, [pc, #8]	; (8001a70 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001a66:	f003 fe8a 	bl	800577e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001a6a:	bf00      	nop
 8001a6c:	bd80      	pop	{r7, pc}
 8001a6e:	bf00      	nop
 8001a70:	200007f8 	.word	0x200007f8

08001a74 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001a78:	4802      	ldr	r0, [pc, #8]	; (8001a84 <OTG_FS_IRQHandler+0x10>)
 8001a7a:	f001 fd79 	bl	8003570 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001a7e:	bf00      	nop
 8001a80:	bd80      	pop	{r7, pc}
 8001a82:	bf00      	nop
 8001a84:	20001d74 	.word	0x20001d74

08001a88 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b084      	sub	sp, #16
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001a90:	4b11      	ldr	r3, [pc, #68]	; (8001ad8 <_sbrk+0x50>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d102      	bne.n	8001a9e <_sbrk+0x16>
		heap_end = &end;
 8001a98:	4b0f      	ldr	r3, [pc, #60]	; (8001ad8 <_sbrk+0x50>)
 8001a9a:	4a10      	ldr	r2, [pc, #64]	; (8001adc <_sbrk+0x54>)
 8001a9c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001a9e:	4b0e      	ldr	r3, [pc, #56]	; (8001ad8 <_sbrk+0x50>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001aa4:	4b0c      	ldr	r3, [pc, #48]	; (8001ad8 <_sbrk+0x50>)
 8001aa6:	681a      	ldr	r2, [r3, #0]
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	4413      	add	r3, r2
 8001aac:	466a      	mov	r2, sp
 8001aae:	4293      	cmp	r3, r2
 8001ab0:	d907      	bls.n	8001ac2 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8001ab2:	f008 faa3 	bl	8009ffc <__errno>
 8001ab6:	4602      	mov	r2, r0
 8001ab8:	230c      	movs	r3, #12
 8001aba:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8001abc:	f04f 33ff 	mov.w	r3, #4294967295
 8001ac0:	e006      	b.n	8001ad0 <_sbrk+0x48>
	}

	heap_end += incr;
 8001ac2:	4b05      	ldr	r3, [pc, #20]	; (8001ad8 <_sbrk+0x50>)
 8001ac4:	681a      	ldr	r2, [r3, #0]
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	4413      	add	r3, r2
 8001aca:	4a03      	ldr	r2, [pc, #12]	; (8001ad8 <_sbrk+0x50>)
 8001acc:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8001ace:	68fb      	ldr	r3, [r7, #12]
}
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	3710      	adds	r7, #16
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	bd80      	pop	{r7, pc}
 8001ad8:	200007a0 	.word	0x200007a0
 8001adc:	20002180 	.word	0x20002180

08001ae0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ae4:	4b08      	ldr	r3, [pc, #32]	; (8001b08 <SystemInit+0x28>)
 8001ae6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001aea:	4a07      	ldr	r2, [pc, #28]	; (8001b08 <SystemInit+0x28>)
 8001aec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001af0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001af4:	4b04      	ldr	r3, [pc, #16]	; (8001b08 <SystemInit+0x28>)
 8001af6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001afa:	609a      	str	r2, [r3, #8]
#endif
}
 8001afc:	bf00      	nop
 8001afe:	46bd      	mov	sp, r7
 8001b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b04:	4770      	bx	lr
 8001b06:	bf00      	nop
 8001b08:	e000ed00 	.word	0xe000ed00

08001b0c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001b0c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001b44 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001b10:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001b12:	e003      	b.n	8001b1c <LoopCopyDataInit>

08001b14 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001b14:	4b0c      	ldr	r3, [pc, #48]	; (8001b48 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001b16:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001b18:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001b1a:	3104      	adds	r1, #4

08001b1c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001b1c:	480b      	ldr	r0, [pc, #44]	; (8001b4c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001b1e:	4b0c      	ldr	r3, [pc, #48]	; (8001b50 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001b20:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001b22:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001b24:	d3f6      	bcc.n	8001b14 <CopyDataInit>
  ldr  r2, =_sbss
 8001b26:	4a0b      	ldr	r2, [pc, #44]	; (8001b54 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001b28:	e002      	b.n	8001b30 <LoopFillZerobss>

08001b2a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001b2a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001b2c:	f842 3b04 	str.w	r3, [r2], #4

08001b30 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001b30:	4b09      	ldr	r3, [pc, #36]	; (8001b58 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001b32:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001b34:	d3f9      	bcc.n	8001b2a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001b36:	f7ff ffd3 	bl	8001ae0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001b3a:	f008 fa65 	bl	800a008 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b3e:	f7ff fb9d 	bl	800127c <main>
  bx  lr    
 8001b42:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001b44:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001b48:	0800de78 	.word	0x0800de78
  ldr  r0, =_sdata
 8001b4c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001b50:	20000370 	.word	0x20000370
  ldr  r2, =_sbss
 8001b54:	20000370 	.word	0x20000370
  ldr  r3, = _ebss
 8001b58:	20002180 	.word	0x20002180

08001b5c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b5c:	e7fe      	b.n	8001b5c <ADC_IRQHandler>
	...

08001b60 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001b64:	4b0e      	ldr	r3, [pc, #56]	; (8001ba0 <HAL_Init+0x40>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	4a0d      	ldr	r2, [pc, #52]	; (8001ba0 <HAL_Init+0x40>)
 8001b6a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b6e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001b70:	4b0b      	ldr	r3, [pc, #44]	; (8001ba0 <HAL_Init+0x40>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	4a0a      	ldr	r2, [pc, #40]	; (8001ba0 <HAL_Init+0x40>)
 8001b76:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b7a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b7c:	4b08      	ldr	r3, [pc, #32]	; (8001ba0 <HAL_Init+0x40>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	4a07      	ldr	r2, [pc, #28]	; (8001ba0 <HAL_Init+0x40>)
 8001b82:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b86:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b88:	2003      	movs	r0, #3
 8001b8a:	f001 f995 	bl	8002eb8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b8e:	2000      	movs	r0, #0
 8001b90:	f000 f808 	bl	8001ba4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b94:	f7ff fe00 	bl	8001798 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b98:	2300      	movs	r3, #0
}
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	bd80      	pop	{r7, pc}
 8001b9e:	bf00      	nop
 8001ba0:	40023c00 	.word	0x40023c00

08001ba4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b082      	sub	sp, #8
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001bac:	4b12      	ldr	r3, [pc, #72]	; (8001bf8 <HAL_InitTick+0x54>)
 8001bae:	681a      	ldr	r2, [r3, #0]
 8001bb0:	4b12      	ldr	r3, [pc, #72]	; (8001bfc <HAL_InitTick+0x58>)
 8001bb2:	781b      	ldrb	r3, [r3, #0]
 8001bb4:	4619      	mov	r1, r3
 8001bb6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001bba:	fbb3 f3f1 	udiv	r3, r3, r1
 8001bbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	f001 f9ad 	bl	8002f22 <HAL_SYSTICK_Config>
 8001bc8:	4603      	mov	r3, r0
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d001      	beq.n	8001bd2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001bce:	2301      	movs	r3, #1
 8001bd0:	e00e      	b.n	8001bf0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	2b0f      	cmp	r3, #15
 8001bd6:	d80a      	bhi.n	8001bee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001bd8:	2200      	movs	r2, #0
 8001bda:	6879      	ldr	r1, [r7, #4]
 8001bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8001be0:	f001 f975 	bl	8002ece <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001be4:	4a06      	ldr	r2, [pc, #24]	; (8001c00 <HAL_InitTick+0x5c>)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001bea:	2300      	movs	r3, #0
 8001bec:	e000      	b.n	8001bf0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001bee:	2301      	movs	r3, #1
}
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	3708      	adds	r7, #8
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	bd80      	pop	{r7, pc}
 8001bf8:	20000010 	.word	0x20000010
 8001bfc:	20000018 	.word	0x20000018
 8001c00:	20000014 	.word	0x20000014

08001c04 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c04:	b480      	push	{r7}
 8001c06:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c08:	4b06      	ldr	r3, [pc, #24]	; (8001c24 <HAL_IncTick+0x20>)
 8001c0a:	781b      	ldrb	r3, [r3, #0]
 8001c0c:	461a      	mov	r2, r3
 8001c0e:	4b06      	ldr	r3, [pc, #24]	; (8001c28 <HAL_IncTick+0x24>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	4413      	add	r3, r2
 8001c14:	4a04      	ldr	r2, [pc, #16]	; (8001c28 <HAL_IncTick+0x24>)
 8001c16:	6013      	str	r3, [r2, #0]
}
 8001c18:	bf00      	nop
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c20:	4770      	bx	lr
 8001c22:	bf00      	nop
 8001c24:	20000018 	.word	0x20000018
 8001c28:	200008a0 	.word	0x200008a0

08001c2c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	af00      	add	r7, sp, #0
  return uwTick;
 8001c30:	4b03      	ldr	r3, [pc, #12]	; (8001c40 <HAL_GetTick+0x14>)
 8001c32:	681b      	ldr	r3, [r3, #0]
}
 8001c34:	4618      	mov	r0, r3
 8001c36:	46bd      	mov	sp, r7
 8001c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3c:	4770      	bx	lr
 8001c3e:	bf00      	nop
 8001c40:	200008a0 	.word	0x200008a0

08001c44 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b084      	sub	sp, #16
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c4c:	f7ff ffee 	bl	8001c2c <HAL_GetTick>
 8001c50:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c5c:	d005      	beq.n	8001c6a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c5e:	4b09      	ldr	r3, [pc, #36]	; (8001c84 <HAL_Delay+0x40>)
 8001c60:	781b      	ldrb	r3, [r3, #0]
 8001c62:	461a      	mov	r2, r3
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	4413      	add	r3, r2
 8001c68:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001c6a:	bf00      	nop
 8001c6c:	f7ff ffde 	bl	8001c2c <HAL_GetTick>
 8001c70:	4602      	mov	r2, r0
 8001c72:	68bb      	ldr	r3, [r7, #8]
 8001c74:	1ad3      	subs	r3, r2, r3
 8001c76:	68fa      	ldr	r2, [r7, #12]
 8001c78:	429a      	cmp	r2, r3
 8001c7a:	d8f7      	bhi.n	8001c6c <HAL_Delay+0x28>
  {
  }
}
 8001c7c:	bf00      	nop
 8001c7e:	3710      	adds	r7, #16
 8001c80:	46bd      	mov	sp, r7
 8001c82:	bd80      	pop	{r7, pc}
 8001c84:	20000018 	.word	0x20000018

08001c88 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b084      	sub	sp, #16
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c90:	2300      	movs	r3, #0
 8001c92:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d101      	bne.n	8001c9e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001c9a:	2301      	movs	r3, #1
 8001c9c:	e033      	b.n	8001d06 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d109      	bne.n	8001cba <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001ca6:	6878      	ldr	r0, [r7, #4]
 8001ca8:	f7ff fd9e 	bl	80017e8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	2200      	movs	r2, #0
 8001cb0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cbe:	f003 0310 	and.w	r3, r3, #16
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d118      	bne.n	8001cf8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cca:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001cce:	f023 0302 	bic.w	r3, r3, #2
 8001cd2:	f043 0202 	orr.w	r2, r3, #2
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001cda:	6878      	ldr	r0, [r7, #4]
 8001cdc:	f000 faac 	bl	8002238 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cea:	f023 0303 	bic.w	r3, r3, #3
 8001cee:	f043 0201 	orr.w	r2, r3, #1
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	641a      	str	r2, [r3, #64]	; 0x40
 8001cf6:	e001      	b.n	8001cfc <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001cf8:	2301      	movs	r3, #1
 8001cfa:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	2200      	movs	r2, #0
 8001d00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001d04:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d06:	4618      	mov	r0, r3
 8001d08:	3710      	adds	r7, #16
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bd80      	pop	{r7, pc}

08001d0e <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001d0e:	b580      	push	{r7, lr}
 8001d10:	b084      	sub	sp, #16
 8001d12:	af00      	add	r7, sp, #0
 8001d14:	6078      	str	r0, [r7, #4]
 8001d16:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001d18:	2300      	movs	r3, #0
 8001d1a:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	689b      	ldr	r3, [r3, #8]
 8001d22:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d26:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d2a:	d113      	bne.n	8001d54 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	689b      	ldr	r3, [r3, #8]
 8001d32:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001d36:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001d3a:	d10b      	bne.n	8001d54 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d40:	f043 0220 	orr.w	r2, r3, #32
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8001d50:	2301      	movs	r3, #1
 8001d52:	e05c      	b.n	8001e0e <HAL_ADC_PollForConversion+0x100>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8001d54:	f7ff ff6a 	bl	8001c2c <HAL_GetTick>
 8001d58:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001d5a:	e01a      	b.n	8001d92 <HAL_ADC_PollForConversion+0x84>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d62:	d016      	beq.n	8001d92 <HAL_ADC_PollForConversion+0x84>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d007      	beq.n	8001d7a <HAL_ADC_PollForConversion+0x6c>
 8001d6a:	f7ff ff5f 	bl	8001c2c <HAL_GetTick>
 8001d6e:	4602      	mov	r2, r0
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	1ad3      	subs	r3, r2, r3
 8001d74:	683a      	ldr	r2, [r7, #0]
 8001d76:	429a      	cmp	r2, r3
 8001d78:	d20b      	bcs.n	8001d92 <HAL_ADC_PollForConversion+0x84>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d7e:	f043 0204 	orr.w	r2, r3, #4
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	2200      	movs	r2, #0
 8001d8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_TIMEOUT;
 8001d8e:	2303      	movs	r3, #3
 8001d90:	e03d      	b.n	8001e0e <HAL_ADC_PollForConversion+0x100>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f003 0302 	and.w	r3, r3, #2
 8001d9c:	2b02      	cmp	r3, #2
 8001d9e:	d1dd      	bne.n	8001d5c <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f06f 0212 	mvn.w	r2, #18
 8001da8:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dae:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	689b      	ldr	r3, [r3, #8]
 8001dbc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d123      	bne.n	8001e0c <HAL_ADC_PollForConversion+0xfe>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d11f      	bne.n	8001e0c <HAL_ADC_PollForConversion+0xfe>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dd2:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d006      	beq.n	8001de8 <HAL_ADC_PollForConversion+0xda>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	689b      	ldr	r3, [r3, #8]
 8001de0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d111      	bne.n	8001e0c <HAL_ADC_PollForConversion+0xfe>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dec:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001df8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d105      	bne.n	8001e0c <HAL_ADC_PollForConversion+0xfe>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e04:	f043 0201 	orr.w	r2, r3, #1
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001e0c:	2300      	movs	r3, #0
}
 8001e0e:	4618      	mov	r0, r3
 8001e10:	3710      	adds	r7, #16
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bd80      	pop	{r7, pc}
	...

08001e18 <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	b085      	sub	sp, #20
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001e20:	2300      	movs	r3, #0
 8001e22:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001e2a:	2b01      	cmp	r3, #1
 8001e2c:	d101      	bne.n	8001e32 <HAL_ADC_Start_IT+0x1a>
 8001e2e:	2302      	movs	r3, #2
 8001e30:	e0b0      	b.n	8001f94 <HAL_ADC_Start_IT+0x17c>
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	2201      	movs	r2, #1
 8001e36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	689b      	ldr	r3, [r3, #8]
 8001e40:	f003 0301 	and.w	r3, r3, #1
 8001e44:	2b01      	cmp	r3, #1
 8001e46:	d018      	beq.n	8001e7a <HAL_ADC_Start_IT+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	689a      	ldr	r2, [r3, #8]
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f042 0201 	orr.w	r2, r2, #1
 8001e56:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001e58:	4b51      	ldr	r3, [pc, #324]	; (8001fa0 <HAL_ADC_Start_IT+0x188>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	4a51      	ldr	r2, [pc, #324]	; (8001fa4 <HAL_ADC_Start_IT+0x18c>)
 8001e5e:	fba2 2303 	umull	r2, r3, r2, r3
 8001e62:	0c9a      	lsrs	r2, r3, #18
 8001e64:	4613      	mov	r3, r2
 8001e66:	005b      	lsls	r3, r3, #1
 8001e68:	4413      	add	r3, r2
 8001e6a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001e6c:	e002      	b.n	8001e74 <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 8001e6e:	68bb      	ldr	r3, [r7, #8]
 8001e70:	3b01      	subs	r3, #1
 8001e72:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001e74:	68bb      	ldr	r3, [r7, #8]
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d1f9      	bne.n	8001e6e <HAL_ADC_Start_IT+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	689b      	ldr	r3, [r3, #8]
 8001e80:	f003 0301 	and.w	r3, r3, #1
 8001e84:	2b01      	cmp	r3, #1
 8001e86:	f040 8084 	bne.w	8001f92 <HAL_ADC_Start_IT+0x17a>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e8e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001e92:	f023 0301 	bic.w	r3, r3, #1
 8001e96:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	685b      	ldr	r3, [r3, #4]
 8001ea4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d007      	beq.n	8001ebc <HAL_ADC_Start_IT+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eb0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001eb4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ec0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ec4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001ec8:	d106      	bne.n	8001ed8 <HAL_ADC_Start_IT+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ece:	f023 0206 	bic.w	r2, r3, #6
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	645a      	str	r2, [r3, #68]	; 0x44
 8001ed6:	e002      	b.n	8001ede <HAL_ADC_Start_IT+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	2200      	movs	r2, #0
 8001edc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001ee6:	4b30      	ldr	r3, [pc, #192]	; (8001fa8 <HAL_ADC_Start_IT+0x190>)
 8001ee8:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001ef2:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	685b      	ldr	r3, [r3, #4]
 8001efa:	687a      	ldr	r2, [r7, #4]
 8001efc:	6812      	ldr	r2, [r2, #0]
 8001efe:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001f02:	f043 0320 	orr.w	r3, r3, #32
 8001f06:	6053      	str	r3, [r2, #4]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	685b      	ldr	r3, [r3, #4]
 8001f0c:	f003 031f 	and.w	r3, r3, #31
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d12a      	bne.n	8001f6a <HAL_ADC_Start_IT+0x152>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	4a24      	ldr	r2, [pc, #144]	; (8001fac <HAL_ADC_Start_IT+0x194>)
 8001f1a:	4293      	cmp	r3, r2
 8001f1c:	d015      	beq.n	8001f4a <HAL_ADC_Start_IT+0x132>
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	4a23      	ldr	r2, [pc, #140]	; (8001fb0 <HAL_ADC_Start_IT+0x198>)
 8001f24:	4293      	cmp	r3, r2
 8001f26:	d105      	bne.n	8001f34 <HAL_ADC_Start_IT+0x11c>
 8001f28:	4b1f      	ldr	r3, [pc, #124]	; (8001fa8 <HAL_ADC_Start_IT+0x190>)
 8001f2a:	685b      	ldr	r3, [r3, #4]
 8001f2c:	f003 031f 	and.w	r3, r3, #31
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d00a      	beq.n	8001f4a <HAL_ADC_Start_IT+0x132>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	4a1e      	ldr	r2, [pc, #120]	; (8001fb4 <HAL_ADC_Start_IT+0x19c>)
 8001f3a:	4293      	cmp	r3, r2
 8001f3c:	d129      	bne.n	8001f92 <HAL_ADC_Start_IT+0x17a>
 8001f3e:	4b1a      	ldr	r3, [pc, #104]	; (8001fa8 <HAL_ADC_Start_IT+0x190>)
 8001f40:	685b      	ldr	r3, [r3, #4]
 8001f42:	f003 031f 	and.w	r3, r3, #31
 8001f46:	2b0f      	cmp	r3, #15
 8001f48:	d823      	bhi.n	8001f92 <HAL_ADC_Start_IT+0x17a>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	689b      	ldr	r3, [r3, #8]
 8001f50:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d11c      	bne.n	8001f92 <HAL_ADC_Start_IT+0x17a>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	689a      	ldr	r2, [r3, #8]
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001f66:	609a      	str	r2, [r3, #8]
 8001f68:	e013      	b.n	8001f92 <HAL_ADC_Start_IT+0x17a>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	4a0f      	ldr	r2, [pc, #60]	; (8001fac <HAL_ADC_Start_IT+0x194>)
 8001f70:	4293      	cmp	r3, r2
 8001f72:	d10e      	bne.n	8001f92 <HAL_ADC_Start_IT+0x17a>
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	689b      	ldr	r3, [r3, #8]
 8001f7a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d107      	bne.n	8001f92 <HAL_ADC_Start_IT+0x17a>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	689a      	ldr	r2, [r3, #8]
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001f90:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8001f92:	2300      	movs	r3, #0
}
 8001f94:	4618      	mov	r0, r3
 8001f96:	3714      	adds	r7, #20
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9e:	4770      	bx	lr
 8001fa0:	20000010 	.word	0x20000010
 8001fa4:	431bde83 	.word	0x431bde83
 8001fa8:	40012300 	.word	0x40012300
 8001fac:	40012000 	.word	0x40012000
 8001fb0:	40012100 	.word	0x40012100
 8001fb4:	40012200 	.word	0x40012200

08001fb8 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001fb8:	b480      	push	{r7}
 8001fba:	b083      	sub	sp, #12
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	370c      	adds	r7, #12
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd0:	4770      	bx	lr
	...

08001fd4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	b085      	sub	sp, #20
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
 8001fdc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001fde:	2300      	movs	r3, #0
 8001fe0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001fe8:	2b01      	cmp	r3, #1
 8001fea:	d101      	bne.n	8001ff0 <HAL_ADC_ConfigChannel+0x1c>
 8001fec:	2302      	movs	r3, #2
 8001fee:	e113      	b.n	8002218 <HAL_ADC_ConfigChannel+0x244>
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	2201      	movs	r2, #1
 8001ff4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	2b09      	cmp	r3, #9
 8001ffe:	d925      	bls.n	800204c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	68d9      	ldr	r1, [r3, #12]
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	b29b      	uxth	r3, r3
 800200c:	461a      	mov	r2, r3
 800200e:	4613      	mov	r3, r2
 8002010:	005b      	lsls	r3, r3, #1
 8002012:	4413      	add	r3, r2
 8002014:	3b1e      	subs	r3, #30
 8002016:	2207      	movs	r2, #7
 8002018:	fa02 f303 	lsl.w	r3, r2, r3
 800201c:	43da      	mvns	r2, r3
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	400a      	ands	r2, r1
 8002024:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	68d9      	ldr	r1, [r3, #12]
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	689a      	ldr	r2, [r3, #8]
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	b29b      	uxth	r3, r3
 8002036:	4618      	mov	r0, r3
 8002038:	4603      	mov	r3, r0
 800203a:	005b      	lsls	r3, r3, #1
 800203c:	4403      	add	r3, r0
 800203e:	3b1e      	subs	r3, #30
 8002040:	409a      	lsls	r2, r3
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	430a      	orrs	r2, r1
 8002048:	60da      	str	r2, [r3, #12]
 800204a:	e022      	b.n	8002092 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	6919      	ldr	r1, [r3, #16]
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	b29b      	uxth	r3, r3
 8002058:	461a      	mov	r2, r3
 800205a:	4613      	mov	r3, r2
 800205c:	005b      	lsls	r3, r3, #1
 800205e:	4413      	add	r3, r2
 8002060:	2207      	movs	r2, #7
 8002062:	fa02 f303 	lsl.w	r3, r2, r3
 8002066:	43da      	mvns	r2, r3
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	400a      	ands	r2, r1
 800206e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	6919      	ldr	r1, [r3, #16]
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	689a      	ldr	r2, [r3, #8]
 800207a:	683b      	ldr	r3, [r7, #0]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	b29b      	uxth	r3, r3
 8002080:	4618      	mov	r0, r3
 8002082:	4603      	mov	r3, r0
 8002084:	005b      	lsls	r3, r3, #1
 8002086:	4403      	add	r3, r0
 8002088:	409a      	lsls	r2, r3
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	430a      	orrs	r2, r1
 8002090:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	685b      	ldr	r3, [r3, #4]
 8002096:	2b06      	cmp	r3, #6
 8002098:	d824      	bhi.n	80020e4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	685a      	ldr	r2, [r3, #4]
 80020a4:	4613      	mov	r3, r2
 80020a6:	009b      	lsls	r3, r3, #2
 80020a8:	4413      	add	r3, r2
 80020aa:	3b05      	subs	r3, #5
 80020ac:	221f      	movs	r2, #31
 80020ae:	fa02 f303 	lsl.w	r3, r2, r3
 80020b2:	43da      	mvns	r2, r3
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	400a      	ands	r2, r1
 80020ba:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	b29b      	uxth	r3, r3
 80020c8:	4618      	mov	r0, r3
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	685a      	ldr	r2, [r3, #4]
 80020ce:	4613      	mov	r3, r2
 80020d0:	009b      	lsls	r3, r3, #2
 80020d2:	4413      	add	r3, r2
 80020d4:	3b05      	subs	r3, #5
 80020d6:	fa00 f203 	lsl.w	r2, r0, r3
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	430a      	orrs	r2, r1
 80020e0:	635a      	str	r2, [r3, #52]	; 0x34
 80020e2:	e04c      	b.n	800217e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	685b      	ldr	r3, [r3, #4]
 80020e8:	2b0c      	cmp	r3, #12
 80020ea:	d824      	bhi.n	8002136 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	685a      	ldr	r2, [r3, #4]
 80020f6:	4613      	mov	r3, r2
 80020f8:	009b      	lsls	r3, r3, #2
 80020fa:	4413      	add	r3, r2
 80020fc:	3b23      	subs	r3, #35	; 0x23
 80020fe:	221f      	movs	r2, #31
 8002100:	fa02 f303 	lsl.w	r3, r2, r3
 8002104:	43da      	mvns	r2, r3
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	400a      	ands	r2, r1
 800210c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	b29b      	uxth	r3, r3
 800211a:	4618      	mov	r0, r3
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	685a      	ldr	r2, [r3, #4]
 8002120:	4613      	mov	r3, r2
 8002122:	009b      	lsls	r3, r3, #2
 8002124:	4413      	add	r3, r2
 8002126:	3b23      	subs	r3, #35	; 0x23
 8002128:	fa00 f203 	lsl.w	r2, r0, r3
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	430a      	orrs	r2, r1
 8002132:	631a      	str	r2, [r3, #48]	; 0x30
 8002134:	e023      	b.n	800217e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	685a      	ldr	r2, [r3, #4]
 8002140:	4613      	mov	r3, r2
 8002142:	009b      	lsls	r3, r3, #2
 8002144:	4413      	add	r3, r2
 8002146:	3b41      	subs	r3, #65	; 0x41
 8002148:	221f      	movs	r2, #31
 800214a:	fa02 f303 	lsl.w	r3, r2, r3
 800214e:	43da      	mvns	r2, r3
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	400a      	ands	r2, r1
 8002156:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	b29b      	uxth	r3, r3
 8002164:	4618      	mov	r0, r3
 8002166:	683b      	ldr	r3, [r7, #0]
 8002168:	685a      	ldr	r2, [r3, #4]
 800216a:	4613      	mov	r3, r2
 800216c:	009b      	lsls	r3, r3, #2
 800216e:	4413      	add	r3, r2
 8002170:	3b41      	subs	r3, #65	; 0x41
 8002172:	fa00 f203 	lsl.w	r2, r0, r3
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	430a      	orrs	r2, r1
 800217c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800217e:	4b29      	ldr	r3, [pc, #164]	; (8002224 <HAL_ADC_ConfigChannel+0x250>)
 8002180:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	4a28      	ldr	r2, [pc, #160]	; (8002228 <HAL_ADC_ConfigChannel+0x254>)
 8002188:	4293      	cmp	r3, r2
 800218a:	d10f      	bne.n	80021ac <HAL_ADC_ConfigChannel+0x1d8>
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	2b12      	cmp	r3, #18
 8002192:	d10b      	bne.n	80021ac <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	685b      	ldr	r3, [r3, #4]
 8002198:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	685b      	ldr	r3, [r3, #4]
 80021a4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	4a1d      	ldr	r2, [pc, #116]	; (8002228 <HAL_ADC_ConfigChannel+0x254>)
 80021b2:	4293      	cmp	r3, r2
 80021b4:	d12b      	bne.n	800220e <HAL_ADC_ConfigChannel+0x23a>
 80021b6:	683b      	ldr	r3, [r7, #0]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	4a1c      	ldr	r2, [pc, #112]	; (800222c <HAL_ADC_ConfigChannel+0x258>)
 80021bc:	4293      	cmp	r3, r2
 80021be:	d003      	beq.n	80021c8 <HAL_ADC_ConfigChannel+0x1f4>
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	2b11      	cmp	r3, #17
 80021c6:	d122      	bne.n	800220e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	685b      	ldr	r3, [r3, #4]
 80021cc:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	685b      	ldr	r3, [r3, #4]
 80021d8:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	4a11      	ldr	r2, [pc, #68]	; (800222c <HAL_ADC_ConfigChannel+0x258>)
 80021e6:	4293      	cmp	r3, r2
 80021e8:	d111      	bne.n	800220e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80021ea:	4b11      	ldr	r3, [pc, #68]	; (8002230 <HAL_ADC_ConfigChannel+0x25c>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	4a11      	ldr	r2, [pc, #68]	; (8002234 <HAL_ADC_ConfigChannel+0x260>)
 80021f0:	fba2 2303 	umull	r2, r3, r2, r3
 80021f4:	0c9a      	lsrs	r2, r3, #18
 80021f6:	4613      	mov	r3, r2
 80021f8:	009b      	lsls	r3, r3, #2
 80021fa:	4413      	add	r3, r2
 80021fc:	005b      	lsls	r3, r3, #1
 80021fe:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002200:	e002      	b.n	8002208 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002202:	68bb      	ldr	r3, [r7, #8]
 8002204:	3b01      	subs	r3, #1
 8002206:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002208:	68bb      	ldr	r3, [r7, #8]
 800220a:	2b00      	cmp	r3, #0
 800220c:	d1f9      	bne.n	8002202 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	2200      	movs	r2, #0
 8002212:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002216:	2300      	movs	r3, #0
}
 8002218:	4618      	mov	r0, r3
 800221a:	3714      	adds	r7, #20
 800221c:	46bd      	mov	sp, r7
 800221e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002222:	4770      	bx	lr
 8002224:	40012300 	.word	0x40012300
 8002228:	40012000 	.word	0x40012000
 800222c:	10000012 	.word	0x10000012
 8002230:	20000010 	.word	0x20000010
 8002234:	431bde83 	.word	0x431bde83

08002238 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002238:	b480      	push	{r7}
 800223a:	b085      	sub	sp, #20
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002240:	4b79      	ldr	r3, [pc, #484]	; (8002428 <ADC_Init+0x1f0>)
 8002242:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	685b      	ldr	r3, [r3, #4]
 8002248:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	685a      	ldr	r2, [r3, #4]
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	685b      	ldr	r3, [r3, #4]
 8002258:	431a      	orrs	r2, r3
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	685a      	ldr	r2, [r3, #4]
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800226c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	6859      	ldr	r1, [r3, #4]
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	691b      	ldr	r3, [r3, #16]
 8002278:	021a      	lsls	r2, r3, #8
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	430a      	orrs	r2, r1
 8002280:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	685a      	ldr	r2, [r3, #4]
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002290:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	6859      	ldr	r1, [r3, #4]
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	689a      	ldr	r2, [r3, #8]
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	430a      	orrs	r2, r1
 80022a2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	689a      	ldr	r2, [r3, #8]
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80022b2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	6899      	ldr	r1, [r3, #8]
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	68da      	ldr	r2, [r3, #12]
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	430a      	orrs	r2, r1
 80022c4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022ca:	4a58      	ldr	r2, [pc, #352]	; (800242c <ADC_Init+0x1f4>)
 80022cc:	4293      	cmp	r3, r2
 80022ce:	d022      	beq.n	8002316 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	689a      	ldr	r2, [r3, #8]
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80022de:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	6899      	ldr	r1, [r3, #8]
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	430a      	orrs	r2, r1
 80022f0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	689a      	ldr	r2, [r3, #8]
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002300:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	6899      	ldr	r1, [r3, #8]
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	430a      	orrs	r2, r1
 8002312:	609a      	str	r2, [r3, #8]
 8002314:	e00f      	b.n	8002336 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	689a      	ldr	r2, [r3, #8]
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002324:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	689a      	ldr	r2, [r3, #8]
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002334:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	689a      	ldr	r2, [r3, #8]
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f022 0202 	bic.w	r2, r2, #2
 8002344:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	6899      	ldr	r1, [r3, #8]
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	7e1b      	ldrb	r3, [r3, #24]
 8002350:	005a      	lsls	r2, r3, #1
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	430a      	orrs	r2, r1
 8002358:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002360:	2b00      	cmp	r3, #0
 8002362:	d01b      	beq.n	800239c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	685a      	ldr	r2, [r3, #4]
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002372:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	685a      	ldr	r2, [r3, #4]
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002382:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	6859      	ldr	r1, [r3, #4]
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800238e:	3b01      	subs	r3, #1
 8002390:	035a      	lsls	r2, r3, #13
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	430a      	orrs	r2, r1
 8002398:	605a      	str	r2, [r3, #4]
 800239a:	e007      	b.n	80023ac <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	685a      	ldr	r2, [r3, #4]
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80023aa:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80023ba:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	69db      	ldr	r3, [r3, #28]
 80023c6:	3b01      	subs	r3, #1
 80023c8:	051a      	lsls	r2, r3, #20
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	430a      	orrs	r2, r1
 80023d0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	689a      	ldr	r2, [r3, #8]
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80023e0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	6899      	ldr	r1, [r3, #8]
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80023ee:	025a      	lsls	r2, r3, #9
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	430a      	orrs	r2, r1
 80023f6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	689a      	ldr	r2, [r3, #8]
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002406:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	6899      	ldr	r1, [r3, #8]
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	695b      	ldr	r3, [r3, #20]
 8002412:	029a      	lsls	r2, r3, #10
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	430a      	orrs	r2, r1
 800241a:	609a      	str	r2, [r3, #8]
}
 800241c:	bf00      	nop
 800241e:	3714      	adds	r7, #20
 8002420:	46bd      	mov	sp, r7
 8002422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002426:	4770      	bx	lr
 8002428:	40012300 	.word	0x40012300
 800242c:	0f000001 	.word	0x0f000001

08002430 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b084      	sub	sp, #16
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	2b00      	cmp	r3, #0
 800243c:	d101      	bne.n	8002442 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800243e:	2301      	movs	r3, #1
 8002440:	e0ed      	b.n	800261e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002448:	b2db      	uxtb	r3, r3
 800244a:	2b00      	cmp	r3, #0
 800244c:	d102      	bne.n	8002454 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800244e:	6878      	ldr	r0, [r7, #4]
 8002450:	f7ff fa0e 	bl	8001870 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	681a      	ldr	r2, [r3, #0]
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f022 0202 	bic.w	r2, r2, #2
 8002462:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002464:	f7ff fbe2 	bl	8001c2c <HAL_GetTick>
 8002468:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800246a:	e012      	b.n	8002492 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800246c:	f7ff fbde 	bl	8001c2c <HAL_GetTick>
 8002470:	4602      	mov	r2, r0
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	1ad3      	subs	r3, r2, r3
 8002476:	2b0a      	cmp	r3, #10
 8002478:	d90b      	bls.n	8002492 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800247e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	2205      	movs	r2, #5
 800248a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800248e:	2301      	movs	r3, #1
 8002490:	e0c5      	b.n	800261e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	685b      	ldr	r3, [r3, #4]
 8002498:	f003 0302 	and.w	r3, r3, #2
 800249c:	2b00      	cmp	r3, #0
 800249e:	d1e5      	bne.n	800246c <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	681a      	ldr	r2, [r3, #0]
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f042 0201 	orr.w	r2, r2, #1
 80024ae:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80024b0:	f7ff fbbc 	bl	8001c2c <HAL_GetTick>
 80024b4:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80024b6:	e012      	b.n	80024de <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80024b8:	f7ff fbb8 	bl	8001c2c <HAL_GetTick>
 80024bc:	4602      	mov	r2, r0
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	1ad3      	subs	r3, r2, r3
 80024c2:	2b0a      	cmp	r3, #10
 80024c4:	d90b      	bls.n	80024de <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024ca:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	2205      	movs	r2, #5
 80024d6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80024da:	2301      	movs	r3, #1
 80024dc:	e09f      	b.n	800261e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	685b      	ldr	r3, [r3, #4]
 80024e4:	f003 0301 	and.w	r3, r3, #1
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d0e5      	beq.n	80024b8 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	7e1b      	ldrb	r3, [r3, #24]
 80024f0:	2b01      	cmp	r3, #1
 80024f2:	d108      	bne.n	8002506 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	681a      	ldr	r2, [r3, #0]
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002502:	601a      	str	r2, [r3, #0]
 8002504:	e007      	b.n	8002516 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	681a      	ldr	r2, [r3, #0]
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002514:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	7e5b      	ldrb	r3, [r3, #25]
 800251a:	2b01      	cmp	r3, #1
 800251c:	d108      	bne.n	8002530 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	681a      	ldr	r2, [r3, #0]
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800252c:	601a      	str	r2, [r3, #0]
 800252e:	e007      	b.n	8002540 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	681a      	ldr	r2, [r3, #0]
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800253e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	7e9b      	ldrb	r3, [r3, #26]
 8002544:	2b01      	cmp	r3, #1
 8002546:	d108      	bne.n	800255a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	681a      	ldr	r2, [r3, #0]
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f042 0220 	orr.w	r2, r2, #32
 8002556:	601a      	str	r2, [r3, #0]
 8002558:	e007      	b.n	800256a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	681a      	ldr	r2, [r3, #0]
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f022 0220 	bic.w	r2, r2, #32
 8002568:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	7edb      	ldrb	r3, [r3, #27]
 800256e:	2b01      	cmp	r3, #1
 8002570:	d108      	bne.n	8002584 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	681a      	ldr	r2, [r3, #0]
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f022 0210 	bic.w	r2, r2, #16
 8002580:	601a      	str	r2, [r3, #0]
 8002582:	e007      	b.n	8002594 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	681a      	ldr	r2, [r3, #0]
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f042 0210 	orr.w	r2, r2, #16
 8002592:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	7f1b      	ldrb	r3, [r3, #28]
 8002598:	2b01      	cmp	r3, #1
 800259a:	d108      	bne.n	80025ae <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	681a      	ldr	r2, [r3, #0]
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f042 0208 	orr.w	r2, r2, #8
 80025aa:	601a      	str	r2, [r3, #0]
 80025ac:	e007      	b.n	80025be <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	681a      	ldr	r2, [r3, #0]
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f022 0208 	bic.w	r2, r2, #8
 80025bc:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	7f5b      	ldrb	r3, [r3, #29]
 80025c2:	2b01      	cmp	r3, #1
 80025c4:	d108      	bne.n	80025d8 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	681a      	ldr	r2, [r3, #0]
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f042 0204 	orr.w	r2, r2, #4
 80025d4:	601a      	str	r2, [r3, #0]
 80025d6:	e007      	b.n	80025e8 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	681a      	ldr	r2, [r3, #0]
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f022 0204 	bic.w	r2, r2, #4
 80025e6:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	689a      	ldr	r2, [r3, #8]
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	68db      	ldr	r3, [r3, #12]
 80025f0:	431a      	orrs	r2, r3
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	691b      	ldr	r3, [r3, #16]
 80025f6:	431a      	orrs	r2, r3
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	695b      	ldr	r3, [r3, #20]
 80025fc:	ea42 0103 	orr.w	r1, r2, r3
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	685b      	ldr	r3, [r3, #4]
 8002604:	1e5a      	subs	r2, r3, #1
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	430a      	orrs	r2, r1
 800260c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	2200      	movs	r2, #0
 8002612:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	2201      	movs	r2, #1
 8002618:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800261c:	2300      	movs	r3, #0
}
 800261e:	4618      	mov	r0, r3
 8002620:	3710      	adds	r7, #16
 8002622:	46bd      	mov	sp, r7
 8002624:	bd80      	pop	{r7, pc}

08002626 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8002626:	b580      	push	{r7, lr}
 8002628:	b084      	sub	sp, #16
 800262a:	af00      	add	r7, sp, #0
 800262c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002634:	b2db      	uxtb	r3, r3
 8002636:	2b01      	cmp	r3, #1
 8002638:	d12e      	bne.n	8002698 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	2202      	movs	r2, #2
 800263e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	681a      	ldr	r2, [r3, #0]
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f022 0201 	bic.w	r2, r2, #1
 8002650:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002652:	f7ff faeb 	bl	8001c2c <HAL_GetTick>
 8002656:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002658:	e012      	b.n	8002680 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800265a:	f7ff fae7 	bl	8001c2c <HAL_GetTick>
 800265e:	4602      	mov	r2, r0
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	1ad3      	subs	r3, r2, r3
 8002664:	2b0a      	cmp	r3, #10
 8002666:	d90b      	bls.n	8002680 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800266c:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	2205      	movs	r2, #5
 8002678:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800267c:	2301      	movs	r3, #1
 800267e:	e012      	b.n	80026a6 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	685b      	ldr	r3, [r3, #4]
 8002686:	f003 0301 	and.w	r3, r3, #1
 800268a:	2b00      	cmp	r3, #0
 800268c:	d1e5      	bne.n	800265a <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	2200      	movs	r2, #0
 8002692:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8002694:	2300      	movs	r3, #0
 8002696:	e006      	b.n	80026a6 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800269c:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80026a4:	2301      	movs	r3, #1
  }
}
 80026a6:	4618      	mov	r0, r3
 80026a8:	3710      	adds	r7, #16
 80026aa:	46bd      	mov	sp, r7
 80026ac:	bd80      	pop	{r7, pc}

080026ae <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 80026ae:	b480      	push	{r7}
 80026b0:	b089      	sub	sp, #36	; 0x24
 80026b2:	af00      	add	r7, sp, #0
 80026b4:	60f8      	str	r0, [r7, #12]
 80026b6:	60b9      	str	r1, [r7, #8]
 80026b8:	607a      	str	r2, [r7, #4]
 80026ba:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	f893 3020 	ldrb.w	r3, [r3, #32]
 80026c2:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	689b      	ldr	r3, [r3, #8]
 80026ca:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80026cc:	7ffb      	ldrb	r3, [r7, #31]
 80026ce:	2b01      	cmp	r3, #1
 80026d0:	d003      	beq.n	80026da <HAL_CAN_AddTxMessage+0x2c>
 80026d2:	7ffb      	ldrb	r3, [r7, #31]
 80026d4:	2b02      	cmp	r3, #2
 80026d6:	f040 80b8 	bne.w	800284a <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80026da:	69bb      	ldr	r3, [r7, #24]
 80026dc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d10a      	bne.n	80026fa <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80026e4:	69bb      	ldr	r3, [r7, #24]
 80026e6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d105      	bne.n	80026fa <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80026ee:	69bb      	ldr	r3, [r7, #24]
 80026f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	f000 80a0 	beq.w	800283a <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80026fa:	69bb      	ldr	r3, [r7, #24]
 80026fc:	0e1b      	lsrs	r3, r3, #24
 80026fe:	f003 0303 	and.w	r3, r3, #3
 8002702:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8002704:	697b      	ldr	r3, [r7, #20]
 8002706:	2b02      	cmp	r3, #2
 8002708:	d907      	bls.n	800271a <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800270e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002716:	2301      	movs	r3, #1
 8002718:	e09e      	b.n	8002858 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 800271a:	2201      	movs	r2, #1
 800271c:	697b      	ldr	r3, [r7, #20]
 800271e:	409a      	lsls	r2, r3
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8002724:	68bb      	ldr	r3, [r7, #8]
 8002726:	689b      	ldr	r3, [r3, #8]
 8002728:	2b00      	cmp	r3, #0
 800272a:	d10d      	bne.n	8002748 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800272c:	68bb      	ldr	r3, [r7, #8]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8002732:	68bb      	ldr	r3, [r7, #8]
 8002734:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002736:	68f9      	ldr	r1, [r7, #12]
 8002738:	6809      	ldr	r1, [r1, #0]
 800273a:	431a      	orrs	r2, r3
 800273c:	697b      	ldr	r3, [r7, #20]
 800273e:	3318      	adds	r3, #24
 8002740:	011b      	lsls	r3, r3, #4
 8002742:	440b      	add	r3, r1
 8002744:	601a      	str	r2, [r3, #0]
 8002746:	e00f      	b.n	8002768 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002748:	68bb      	ldr	r3, [r7, #8]
 800274a:	685b      	ldr	r3, [r3, #4]
 800274c:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 800274e:	68bb      	ldr	r3, [r7, #8]
 8002750:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002752:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8002754:	68bb      	ldr	r3, [r7, #8]
 8002756:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002758:	68f9      	ldr	r1, [r7, #12]
 800275a:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 800275c:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800275e:	697b      	ldr	r3, [r7, #20]
 8002760:	3318      	adds	r3, #24
 8002762:	011b      	lsls	r3, r3, #4
 8002764:	440b      	add	r3, r1
 8002766:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	6819      	ldr	r1, [r3, #0]
 800276c:	68bb      	ldr	r3, [r7, #8]
 800276e:	691a      	ldr	r2, [r3, #16]
 8002770:	697b      	ldr	r3, [r7, #20]
 8002772:	3318      	adds	r3, #24
 8002774:	011b      	lsls	r3, r3, #4
 8002776:	440b      	add	r3, r1
 8002778:	3304      	adds	r3, #4
 800277a:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 800277c:	68bb      	ldr	r3, [r7, #8]
 800277e:	7d1b      	ldrb	r3, [r3, #20]
 8002780:	2b01      	cmp	r3, #1
 8002782:	d111      	bne.n	80027a8 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	681a      	ldr	r2, [r3, #0]
 8002788:	697b      	ldr	r3, [r7, #20]
 800278a:	3318      	adds	r3, #24
 800278c:	011b      	lsls	r3, r3, #4
 800278e:	4413      	add	r3, r2
 8002790:	3304      	adds	r3, #4
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	68fa      	ldr	r2, [r7, #12]
 8002796:	6811      	ldr	r1, [r2, #0]
 8002798:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800279c:	697b      	ldr	r3, [r7, #20]
 800279e:	3318      	adds	r3, #24
 80027a0:	011b      	lsls	r3, r3, #4
 80027a2:	440b      	add	r3, r1
 80027a4:	3304      	adds	r3, #4
 80027a6:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	3307      	adds	r3, #7
 80027ac:	781b      	ldrb	r3, [r3, #0]
 80027ae:	061a      	lsls	r2, r3, #24
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	3306      	adds	r3, #6
 80027b4:	781b      	ldrb	r3, [r3, #0]
 80027b6:	041b      	lsls	r3, r3, #16
 80027b8:	431a      	orrs	r2, r3
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	3305      	adds	r3, #5
 80027be:	781b      	ldrb	r3, [r3, #0]
 80027c0:	021b      	lsls	r3, r3, #8
 80027c2:	4313      	orrs	r3, r2
 80027c4:	687a      	ldr	r2, [r7, #4]
 80027c6:	3204      	adds	r2, #4
 80027c8:	7812      	ldrb	r2, [r2, #0]
 80027ca:	4610      	mov	r0, r2
 80027cc:	68fa      	ldr	r2, [r7, #12]
 80027ce:	6811      	ldr	r1, [r2, #0]
 80027d0:	ea43 0200 	orr.w	r2, r3, r0
 80027d4:	697b      	ldr	r3, [r7, #20]
 80027d6:	011b      	lsls	r3, r3, #4
 80027d8:	440b      	add	r3, r1
 80027da:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80027de:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	3303      	adds	r3, #3
 80027e4:	781b      	ldrb	r3, [r3, #0]
 80027e6:	061a      	lsls	r2, r3, #24
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	3302      	adds	r3, #2
 80027ec:	781b      	ldrb	r3, [r3, #0]
 80027ee:	041b      	lsls	r3, r3, #16
 80027f0:	431a      	orrs	r2, r3
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	3301      	adds	r3, #1
 80027f6:	781b      	ldrb	r3, [r3, #0]
 80027f8:	021b      	lsls	r3, r3, #8
 80027fa:	4313      	orrs	r3, r2
 80027fc:	687a      	ldr	r2, [r7, #4]
 80027fe:	7812      	ldrb	r2, [r2, #0]
 8002800:	4610      	mov	r0, r2
 8002802:	68fa      	ldr	r2, [r7, #12]
 8002804:	6811      	ldr	r1, [r2, #0]
 8002806:	ea43 0200 	orr.w	r2, r3, r0
 800280a:	697b      	ldr	r3, [r7, #20]
 800280c:	011b      	lsls	r3, r3, #4
 800280e:	440b      	add	r3, r1
 8002810:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8002814:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	681a      	ldr	r2, [r3, #0]
 800281a:	697b      	ldr	r3, [r7, #20]
 800281c:	3318      	adds	r3, #24
 800281e:	011b      	lsls	r3, r3, #4
 8002820:	4413      	add	r3, r2
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	68fa      	ldr	r2, [r7, #12]
 8002826:	6811      	ldr	r1, [r2, #0]
 8002828:	f043 0201 	orr.w	r2, r3, #1
 800282c:	697b      	ldr	r3, [r7, #20]
 800282e:	3318      	adds	r3, #24
 8002830:	011b      	lsls	r3, r3, #4
 8002832:	440b      	add	r3, r1
 8002834:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8002836:	2300      	movs	r3, #0
 8002838:	e00e      	b.n	8002858 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800283e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8002846:	2301      	movs	r3, #1
 8002848:	e006      	b.n	8002858 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800284e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002856:	2301      	movs	r3, #1
  }
}
 8002858:	4618      	mov	r0, r3
 800285a:	3724      	adds	r7, #36	; 0x24
 800285c:	46bd      	mov	sp, r7
 800285e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002862:	4770      	bx	lr

08002864 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8002864:	b480      	push	{r7}
 8002866:	b085      	sub	sp, #20
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
 800286c:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002874:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8002876:	7bfb      	ldrb	r3, [r7, #15]
 8002878:	2b01      	cmp	r3, #1
 800287a:	d002      	beq.n	8002882 <HAL_CAN_ActivateNotification+0x1e>
 800287c:	7bfb      	ldrb	r3, [r7, #15]
 800287e:	2b02      	cmp	r3, #2
 8002880:	d109      	bne.n	8002896 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	6959      	ldr	r1, [r3, #20]
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	683a      	ldr	r2, [r7, #0]
 800288e:	430a      	orrs	r2, r1
 8002890:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8002892:	2300      	movs	r3, #0
 8002894:	e006      	b.n	80028a4 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800289a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80028a2:	2301      	movs	r3, #1
  }
}
 80028a4:	4618      	mov	r0, r3
 80028a6:	3714      	adds	r7, #20
 80028a8:	46bd      	mov	sp, r7
 80028aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ae:	4770      	bx	lr

080028b0 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b08a      	sub	sp, #40	; 0x28
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80028b8:	2300      	movs	r3, #0
 80028ba:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	695b      	ldr	r3, [r3, #20]
 80028c2:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	685b      	ldr	r3, [r3, #4]
 80028ca:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	689b      	ldr	r3, [r3, #8]
 80028d2:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	68db      	ldr	r3, [r3, #12]
 80028da:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	691b      	ldr	r3, [r3, #16]
 80028e2:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	699b      	ldr	r3, [r3, #24]
 80028ea:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80028ec:	6a3b      	ldr	r3, [r7, #32]
 80028ee:	f003 0301 	and.w	r3, r3, #1
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d07c      	beq.n	80029f0 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80028f6:	69bb      	ldr	r3, [r7, #24]
 80028f8:	f003 0301 	and.w	r3, r3, #1
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d023      	beq.n	8002948 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	2201      	movs	r2, #1
 8002906:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8002908:	69bb      	ldr	r3, [r7, #24]
 800290a:	f003 0302 	and.w	r3, r3, #2
 800290e:	2b00      	cmp	r3, #0
 8002910:	d003      	beq.n	800291a <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8002912:	6878      	ldr	r0, [r7, #4]
 8002914:	f000 f97d 	bl	8002c12 <HAL_CAN_TxMailbox0CompleteCallback>
 8002918:	e016      	b.n	8002948 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800291a:	69bb      	ldr	r3, [r7, #24]
 800291c:	f003 0304 	and.w	r3, r3, #4
 8002920:	2b00      	cmp	r3, #0
 8002922:	d004      	beq.n	800292e <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8002924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002926:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800292a:	627b      	str	r3, [r7, #36]	; 0x24
 800292c:	e00c      	b.n	8002948 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800292e:	69bb      	ldr	r3, [r7, #24]
 8002930:	f003 0308 	and.w	r3, r3, #8
 8002934:	2b00      	cmp	r3, #0
 8002936:	d004      	beq.n	8002942 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8002938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800293a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800293e:	627b      	str	r3, [r7, #36]	; 0x24
 8002940:	e002      	b.n	8002948 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8002942:	6878      	ldr	r0, [r7, #4]
 8002944:	f000 f983 	bl	8002c4e <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8002948:	69bb      	ldr	r3, [r7, #24]
 800294a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800294e:	2b00      	cmp	r3, #0
 8002950:	d024      	beq.n	800299c <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f44f 7280 	mov.w	r2, #256	; 0x100
 800295a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800295c:	69bb      	ldr	r3, [r7, #24]
 800295e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002962:	2b00      	cmp	r3, #0
 8002964:	d003      	beq.n	800296e <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8002966:	6878      	ldr	r0, [r7, #4]
 8002968:	f000 f95d 	bl	8002c26 <HAL_CAN_TxMailbox1CompleteCallback>
 800296c:	e016      	b.n	800299c <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800296e:	69bb      	ldr	r3, [r7, #24]
 8002970:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002974:	2b00      	cmp	r3, #0
 8002976:	d004      	beq.n	8002982 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800297a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800297e:	627b      	str	r3, [r7, #36]	; 0x24
 8002980:	e00c      	b.n	800299c <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002982:	69bb      	ldr	r3, [r7, #24]
 8002984:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002988:	2b00      	cmp	r3, #0
 800298a:	d004      	beq.n	8002996 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800298c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800298e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002992:	627b      	str	r3, [r7, #36]	; 0x24
 8002994:	e002      	b.n	800299c <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8002996:	6878      	ldr	r0, [r7, #4]
 8002998:	f000 f963 	bl	8002c62 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800299c:	69bb      	ldr	r3, [r7, #24]
 800299e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d024      	beq.n	80029f0 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80029ae:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80029b0:	69bb      	ldr	r3, [r7, #24]
 80029b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d003      	beq.n	80029c2 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80029ba:	6878      	ldr	r0, [r7, #4]
 80029bc:	f000 f93d 	bl	8002c3a <HAL_CAN_TxMailbox2CompleteCallback>
 80029c0:	e016      	b.n	80029f0 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80029c2:	69bb      	ldr	r3, [r7, #24]
 80029c4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d004      	beq.n	80029d6 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80029cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80029d2:	627b      	str	r3, [r7, #36]	; 0x24
 80029d4:	e00c      	b.n	80029f0 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80029d6:	69bb      	ldr	r3, [r7, #24]
 80029d8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d004      	beq.n	80029ea <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80029e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029e6:	627b      	str	r3, [r7, #36]	; 0x24
 80029e8:	e002      	b.n	80029f0 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80029ea:	6878      	ldr	r0, [r7, #4]
 80029ec:	f000 f943 	bl	8002c76 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80029f0:	6a3b      	ldr	r3, [r7, #32]
 80029f2:	f003 0308 	and.w	r3, r3, #8
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d00c      	beq.n	8002a14 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80029fa:	697b      	ldr	r3, [r7, #20]
 80029fc:	f003 0310 	and.w	r3, r3, #16
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d007      	beq.n	8002a14 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a06:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002a0a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	2210      	movs	r2, #16
 8002a12:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8002a14:	6a3b      	ldr	r3, [r7, #32]
 8002a16:	f003 0304 	and.w	r3, r3, #4
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d00b      	beq.n	8002a36 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8002a1e:	697b      	ldr	r3, [r7, #20]
 8002a20:	f003 0308 	and.w	r3, r3, #8
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d006      	beq.n	8002a36 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	2208      	movs	r2, #8
 8002a2e:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8002a30:	6878      	ldr	r0, [r7, #4]
 8002a32:	f000 f934 	bl	8002c9e <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8002a36:	6a3b      	ldr	r3, [r7, #32]
 8002a38:	f003 0302 	and.w	r3, r3, #2
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d009      	beq.n	8002a54 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	68db      	ldr	r3, [r3, #12]
 8002a46:	f003 0303 	and.w	r3, r3, #3
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d002      	beq.n	8002a54 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8002a4e:	6878      	ldr	r0, [r7, #4]
 8002a50:	f000 f91b 	bl	8002c8a <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002a54:	6a3b      	ldr	r3, [r7, #32]
 8002a56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d00c      	beq.n	8002a78 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8002a5e:	693b      	ldr	r3, [r7, #16]
 8002a60:	f003 0310 	and.w	r3, r3, #16
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d007      	beq.n	8002a78 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a6a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002a6e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	2210      	movs	r2, #16
 8002a76:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002a78:	6a3b      	ldr	r3, [r7, #32]
 8002a7a:	f003 0320 	and.w	r3, r3, #32
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d00b      	beq.n	8002a9a <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002a82:	693b      	ldr	r3, [r7, #16]
 8002a84:	f003 0308 	and.w	r3, r3, #8
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d006      	beq.n	8002a9a <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	2208      	movs	r2, #8
 8002a92:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002a94:	6878      	ldr	r0, [r7, #4]
 8002a96:	f000 f916 	bl	8002cc6 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8002a9a:	6a3b      	ldr	r3, [r7, #32]
 8002a9c:	f003 0310 	and.w	r3, r3, #16
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d009      	beq.n	8002ab8 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	691b      	ldr	r3, [r3, #16]
 8002aaa:	f003 0303 	and.w	r3, r3, #3
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d002      	beq.n	8002ab8 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002ab2:	6878      	ldr	r0, [r7, #4]
 8002ab4:	f000 f8fd 	bl	8002cb2 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002ab8:	6a3b      	ldr	r3, [r7, #32]
 8002aba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d00b      	beq.n	8002ada <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002ac2:	69fb      	ldr	r3, [r7, #28]
 8002ac4:	f003 0310 	and.w	r3, r3, #16
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d006      	beq.n	8002ada <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	2210      	movs	r2, #16
 8002ad2:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8002ad4:	6878      	ldr	r0, [r7, #4]
 8002ad6:	f000 f900 	bl	8002cda <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8002ada:	6a3b      	ldr	r3, [r7, #32]
 8002adc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d00b      	beq.n	8002afc <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002ae4:	69fb      	ldr	r3, [r7, #28]
 8002ae6:	f003 0308 	and.w	r3, r3, #8
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d006      	beq.n	8002afc <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	2208      	movs	r2, #8
 8002af4:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8002af6:	6878      	ldr	r0, [r7, #4]
 8002af8:	f000 f8f9 	bl	8002cee <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002afc:	6a3b      	ldr	r3, [r7, #32]
 8002afe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d075      	beq.n	8002bf2 <HAL_CAN_IRQHandler+0x342>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002b06:	69fb      	ldr	r3, [r7, #28]
 8002b08:	f003 0304 	and.w	r3, r3, #4
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d06c      	beq.n	8002bea <HAL_CAN_IRQHandler+0x33a>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002b10:	6a3b      	ldr	r3, [r7, #32]
 8002b12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d008      	beq.n	8002b2c <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d003      	beq.n	8002b2c <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8002b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b26:	f043 0301 	orr.w	r3, r3, #1
 8002b2a:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002b2c:	6a3b      	ldr	r3, [r7, #32]
 8002b2e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d008      	beq.n	8002b48 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d003      	beq.n	8002b48 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002b40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b42:	f043 0302 	orr.w	r3, r3, #2
 8002b46:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002b48:	6a3b      	ldr	r3, [r7, #32]
 8002b4a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d008      	beq.n	8002b64 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d003      	beq.n	8002b64 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8002b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b5e:	f043 0304 	orr.w	r3, r3, #4
 8002b62:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002b64:	6a3b      	ldr	r3, [r7, #32]
 8002b66:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d03d      	beq.n	8002bea <HAL_CAN_IRQHandler+0x33a>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d038      	beq.n	8002bea <HAL_CAN_IRQHandler+0x33a>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002b7e:	2b30      	cmp	r3, #48	; 0x30
 8002b80:	d017      	beq.n	8002bb2 <HAL_CAN_IRQHandler+0x302>
 8002b82:	2b30      	cmp	r3, #48	; 0x30
 8002b84:	d804      	bhi.n	8002b90 <HAL_CAN_IRQHandler+0x2e0>
 8002b86:	2b10      	cmp	r3, #16
 8002b88:	d009      	beq.n	8002b9e <HAL_CAN_IRQHandler+0x2ee>
 8002b8a:	2b20      	cmp	r3, #32
 8002b8c:	d00c      	beq.n	8002ba8 <HAL_CAN_IRQHandler+0x2f8>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8002b8e:	e024      	b.n	8002bda <HAL_CAN_IRQHandler+0x32a>
        switch (esrflags & CAN_ESR_LEC)
 8002b90:	2b50      	cmp	r3, #80	; 0x50
 8002b92:	d018      	beq.n	8002bc6 <HAL_CAN_IRQHandler+0x316>
 8002b94:	2b60      	cmp	r3, #96	; 0x60
 8002b96:	d01b      	beq.n	8002bd0 <HAL_CAN_IRQHandler+0x320>
 8002b98:	2b40      	cmp	r3, #64	; 0x40
 8002b9a:	d00f      	beq.n	8002bbc <HAL_CAN_IRQHandler+0x30c>
            break;
 8002b9c:	e01d      	b.n	8002bda <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_STF;
 8002b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ba0:	f043 0308 	orr.w	r3, r3, #8
 8002ba4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002ba6:	e018      	b.n	8002bda <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002baa:	f043 0310 	orr.w	r3, r3, #16
 8002bae:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002bb0:	e013      	b.n	8002bda <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_ACK;
 8002bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bb4:	f043 0320 	orr.w	r3, r3, #32
 8002bb8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002bba:	e00e      	b.n	8002bda <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BR;
 8002bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bbe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002bc2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002bc4:	e009      	b.n	8002bda <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BD;
 8002bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bc8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002bcc:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002bce:	e004      	b.n	8002bda <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_CRC;
 8002bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bd2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002bd6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002bd8:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	699a      	ldr	r2, [r3, #24]
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002be8:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	2204      	movs	r2, #4
 8002bf0:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d008      	beq.n	8002c0a <HAL_CAN_IRQHandler+0x35a>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002bfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bfe:	431a      	orrs	r2, r3
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8002c04:	6878      	ldr	r0, [r7, #4]
 8002c06:	f000 f87c 	bl	8002d02 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002c0a:	bf00      	nop
 8002c0c:	3728      	adds	r7, #40	; 0x28
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	bd80      	pop	{r7, pc}

08002c12 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002c12:	b480      	push	{r7}
 8002c14:	b083      	sub	sp, #12
 8002c16:	af00      	add	r7, sp, #0
 8002c18:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8002c1a:	bf00      	nop
 8002c1c:	370c      	adds	r7, #12
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c24:	4770      	bx	lr

08002c26 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002c26:	b480      	push	{r7}
 8002c28:	b083      	sub	sp, #12
 8002c2a:	af00      	add	r7, sp, #0
 8002c2c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8002c2e:	bf00      	nop
 8002c30:	370c      	adds	r7, #12
 8002c32:	46bd      	mov	sp, r7
 8002c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c38:	4770      	bx	lr

08002c3a <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002c3a:	b480      	push	{r7}
 8002c3c:	b083      	sub	sp, #12
 8002c3e:	af00      	add	r7, sp, #0
 8002c40:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8002c42:	bf00      	nop
 8002c44:	370c      	adds	r7, #12
 8002c46:	46bd      	mov	sp, r7
 8002c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4c:	4770      	bx	lr

08002c4e <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002c4e:	b480      	push	{r7}
 8002c50:	b083      	sub	sp, #12
 8002c52:	af00      	add	r7, sp, #0
 8002c54:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8002c56:	bf00      	nop
 8002c58:	370c      	adds	r7, #12
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c60:	4770      	bx	lr

08002c62 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002c62:	b480      	push	{r7}
 8002c64:	b083      	sub	sp, #12
 8002c66:	af00      	add	r7, sp, #0
 8002c68:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8002c6a:	bf00      	nop
 8002c6c:	370c      	adds	r7, #12
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c74:	4770      	bx	lr

08002c76 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002c76:	b480      	push	{r7}
 8002c78:	b083      	sub	sp, #12
 8002c7a:	af00      	add	r7, sp, #0
 8002c7c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8002c7e:	bf00      	nop
 8002c80:	370c      	adds	r7, #12
 8002c82:	46bd      	mov	sp, r7
 8002c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c88:	4770      	bx	lr

08002c8a <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002c8a:	b480      	push	{r7}
 8002c8c:	b083      	sub	sp, #12
 8002c8e:	af00      	add	r7, sp, #0
 8002c90:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8002c92:	bf00      	nop
 8002c94:	370c      	adds	r7, #12
 8002c96:	46bd      	mov	sp, r7
 8002c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9c:	4770      	bx	lr

08002c9e <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002c9e:	b480      	push	{r7}
 8002ca0:	b083      	sub	sp, #12
 8002ca2:	af00      	add	r7, sp, #0
 8002ca4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002ca6:	bf00      	nop
 8002ca8:	370c      	adds	r7, #12
 8002caa:	46bd      	mov	sp, r7
 8002cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb0:	4770      	bx	lr

08002cb2 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002cb2:	b480      	push	{r7}
 8002cb4:	b083      	sub	sp, #12
 8002cb6:	af00      	add	r7, sp, #0
 8002cb8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8002cba:	bf00      	nop
 8002cbc:	370c      	adds	r7, #12
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc4:	4770      	bx	lr

08002cc6 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002cc6:	b480      	push	{r7}
 8002cc8:	b083      	sub	sp, #12
 8002cca:	af00      	add	r7, sp, #0
 8002ccc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002cce:	bf00      	nop
 8002cd0:	370c      	adds	r7, #12
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd8:	4770      	bx	lr

08002cda <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002cda:	b480      	push	{r7}
 8002cdc:	b083      	sub	sp, #12
 8002cde:	af00      	add	r7, sp, #0
 8002ce0:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8002ce2:	bf00      	nop
 8002ce4:	370c      	adds	r7, #12
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cec:	4770      	bx	lr

08002cee <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002cee:	b480      	push	{r7}
 8002cf0:	b083      	sub	sp, #12
 8002cf2:	af00      	add	r7, sp, #0
 8002cf4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8002cf6:	bf00      	nop
 8002cf8:	370c      	adds	r7, #12
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d00:	4770      	bx	lr

08002d02 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8002d02:	b480      	push	{r7}
 8002d04:	b083      	sub	sp, #12
 8002d06:	af00      	add	r7, sp, #0
 8002d08:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8002d0a:	bf00      	nop
 8002d0c:	370c      	adds	r7, #12
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d14:	4770      	bx	lr
	...

08002d18 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d18:	b480      	push	{r7}
 8002d1a:	b085      	sub	sp, #20
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	f003 0307 	and.w	r3, r3, #7
 8002d26:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002d28:	4b0c      	ldr	r3, [pc, #48]	; (8002d5c <__NVIC_SetPriorityGrouping+0x44>)
 8002d2a:	68db      	ldr	r3, [r3, #12]
 8002d2c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002d2e:	68ba      	ldr	r2, [r7, #8]
 8002d30:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002d34:	4013      	ands	r3, r2
 8002d36:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002d3c:	68bb      	ldr	r3, [r7, #8]
 8002d3e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002d40:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002d44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d48:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002d4a:	4a04      	ldr	r2, [pc, #16]	; (8002d5c <__NVIC_SetPriorityGrouping+0x44>)
 8002d4c:	68bb      	ldr	r3, [r7, #8]
 8002d4e:	60d3      	str	r3, [r2, #12]
}
 8002d50:	bf00      	nop
 8002d52:	3714      	adds	r7, #20
 8002d54:	46bd      	mov	sp, r7
 8002d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5a:	4770      	bx	lr
 8002d5c:	e000ed00 	.word	0xe000ed00

08002d60 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002d60:	b480      	push	{r7}
 8002d62:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002d64:	4b04      	ldr	r3, [pc, #16]	; (8002d78 <__NVIC_GetPriorityGrouping+0x18>)
 8002d66:	68db      	ldr	r3, [r3, #12]
 8002d68:	0a1b      	lsrs	r3, r3, #8
 8002d6a:	f003 0307 	and.w	r3, r3, #7
}
 8002d6e:	4618      	mov	r0, r3
 8002d70:	46bd      	mov	sp, r7
 8002d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d76:	4770      	bx	lr
 8002d78:	e000ed00 	.word	0xe000ed00

08002d7c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d7c:	b480      	push	{r7}
 8002d7e:	b083      	sub	sp, #12
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	4603      	mov	r3, r0
 8002d84:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	db0b      	blt.n	8002da6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d8e:	79fb      	ldrb	r3, [r7, #7]
 8002d90:	f003 021f 	and.w	r2, r3, #31
 8002d94:	4907      	ldr	r1, [pc, #28]	; (8002db4 <__NVIC_EnableIRQ+0x38>)
 8002d96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d9a:	095b      	lsrs	r3, r3, #5
 8002d9c:	2001      	movs	r0, #1
 8002d9e:	fa00 f202 	lsl.w	r2, r0, r2
 8002da2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002da6:	bf00      	nop
 8002da8:	370c      	adds	r7, #12
 8002daa:	46bd      	mov	sp, r7
 8002dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db0:	4770      	bx	lr
 8002db2:	bf00      	nop
 8002db4:	e000e100 	.word	0xe000e100

08002db8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002db8:	b480      	push	{r7}
 8002dba:	b083      	sub	sp, #12
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	4603      	mov	r3, r0
 8002dc0:	6039      	str	r1, [r7, #0]
 8002dc2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002dc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	db0a      	blt.n	8002de2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	b2da      	uxtb	r2, r3
 8002dd0:	490c      	ldr	r1, [pc, #48]	; (8002e04 <__NVIC_SetPriority+0x4c>)
 8002dd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dd6:	0112      	lsls	r2, r2, #4
 8002dd8:	b2d2      	uxtb	r2, r2
 8002dda:	440b      	add	r3, r1
 8002ddc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002de0:	e00a      	b.n	8002df8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	b2da      	uxtb	r2, r3
 8002de6:	4908      	ldr	r1, [pc, #32]	; (8002e08 <__NVIC_SetPriority+0x50>)
 8002de8:	79fb      	ldrb	r3, [r7, #7]
 8002dea:	f003 030f 	and.w	r3, r3, #15
 8002dee:	3b04      	subs	r3, #4
 8002df0:	0112      	lsls	r2, r2, #4
 8002df2:	b2d2      	uxtb	r2, r2
 8002df4:	440b      	add	r3, r1
 8002df6:	761a      	strb	r2, [r3, #24]
}
 8002df8:	bf00      	nop
 8002dfa:	370c      	adds	r7, #12
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e02:	4770      	bx	lr
 8002e04:	e000e100 	.word	0xe000e100
 8002e08:	e000ed00 	.word	0xe000ed00

08002e0c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e0c:	b480      	push	{r7}
 8002e0e:	b089      	sub	sp, #36	; 0x24
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	60f8      	str	r0, [r7, #12]
 8002e14:	60b9      	str	r1, [r7, #8]
 8002e16:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	f003 0307 	and.w	r3, r3, #7
 8002e1e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002e20:	69fb      	ldr	r3, [r7, #28]
 8002e22:	f1c3 0307 	rsb	r3, r3, #7
 8002e26:	2b04      	cmp	r3, #4
 8002e28:	bf28      	it	cs
 8002e2a:	2304      	movcs	r3, #4
 8002e2c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002e2e:	69fb      	ldr	r3, [r7, #28]
 8002e30:	3304      	adds	r3, #4
 8002e32:	2b06      	cmp	r3, #6
 8002e34:	d902      	bls.n	8002e3c <NVIC_EncodePriority+0x30>
 8002e36:	69fb      	ldr	r3, [r7, #28]
 8002e38:	3b03      	subs	r3, #3
 8002e3a:	e000      	b.n	8002e3e <NVIC_EncodePriority+0x32>
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e40:	f04f 32ff 	mov.w	r2, #4294967295
 8002e44:	69bb      	ldr	r3, [r7, #24]
 8002e46:	fa02 f303 	lsl.w	r3, r2, r3
 8002e4a:	43da      	mvns	r2, r3
 8002e4c:	68bb      	ldr	r3, [r7, #8]
 8002e4e:	401a      	ands	r2, r3
 8002e50:	697b      	ldr	r3, [r7, #20]
 8002e52:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002e54:	f04f 31ff 	mov.w	r1, #4294967295
 8002e58:	697b      	ldr	r3, [r7, #20]
 8002e5a:	fa01 f303 	lsl.w	r3, r1, r3
 8002e5e:	43d9      	mvns	r1, r3
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e64:	4313      	orrs	r3, r2
         );
}
 8002e66:	4618      	mov	r0, r3
 8002e68:	3724      	adds	r7, #36	; 0x24
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e70:	4770      	bx	lr
	...

08002e74 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	b082      	sub	sp, #8
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	3b01      	subs	r3, #1
 8002e80:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002e84:	d301      	bcc.n	8002e8a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002e86:	2301      	movs	r3, #1
 8002e88:	e00f      	b.n	8002eaa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002e8a:	4a0a      	ldr	r2, [pc, #40]	; (8002eb4 <SysTick_Config+0x40>)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	3b01      	subs	r3, #1
 8002e90:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002e92:	210f      	movs	r1, #15
 8002e94:	f04f 30ff 	mov.w	r0, #4294967295
 8002e98:	f7ff ff8e 	bl	8002db8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002e9c:	4b05      	ldr	r3, [pc, #20]	; (8002eb4 <SysTick_Config+0x40>)
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002ea2:	4b04      	ldr	r3, [pc, #16]	; (8002eb4 <SysTick_Config+0x40>)
 8002ea4:	2207      	movs	r2, #7
 8002ea6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002ea8:	2300      	movs	r3, #0
}
 8002eaa:	4618      	mov	r0, r3
 8002eac:	3708      	adds	r7, #8
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	bd80      	pop	{r7, pc}
 8002eb2:	bf00      	nop
 8002eb4:	e000e010 	.word	0xe000e010

08002eb8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b082      	sub	sp, #8
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002ec0:	6878      	ldr	r0, [r7, #4]
 8002ec2:	f7ff ff29 	bl	8002d18 <__NVIC_SetPriorityGrouping>
}
 8002ec6:	bf00      	nop
 8002ec8:	3708      	adds	r7, #8
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	bd80      	pop	{r7, pc}

08002ece <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002ece:	b580      	push	{r7, lr}
 8002ed0:	b086      	sub	sp, #24
 8002ed2:	af00      	add	r7, sp, #0
 8002ed4:	4603      	mov	r3, r0
 8002ed6:	60b9      	str	r1, [r7, #8]
 8002ed8:	607a      	str	r2, [r7, #4]
 8002eda:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002edc:	2300      	movs	r3, #0
 8002ede:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002ee0:	f7ff ff3e 	bl	8002d60 <__NVIC_GetPriorityGrouping>
 8002ee4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002ee6:	687a      	ldr	r2, [r7, #4]
 8002ee8:	68b9      	ldr	r1, [r7, #8]
 8002eea:	6978      	ldr	r0, [r7, #20]
 8002eec:	f7ff ff8e 	bl	8002e0c <NVIC_EncodePriority>
 8002ef0:	4602      	mov	r2, r0
 8002ef2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ef6:	4611      	mov	r1, r2
 8002ef8:	4618      	mov	r0, r3
 8002efa:	f7ff ff5d 	bl	8002db8 <__NVIC_SetPriority>
}
 8002efe:	bf00      	nop
 8002f00:	3718      	adds	r7, #24
 8002f02:	46bd      	mov	sp, r7
 8002f04:	bd80      	pop	{r7, pc}

08002f06 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f06:	b580      	push	{r7, lr}
 8002f08:	b082      	sub	sp, #8
 8002f0a:	af00      	add	r7, sp, #0
 8002f0c:	4603      	mov	r3, r0
 8002f0e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002f10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f14:	4618      	mov	r0, r3
 8002f16:	f7ff ff31 	bl	8002d7c <__NVIC_EnableIRQ>
}
 8002f1a:	bf00      	nop
 8002f1c:	3708      	adds	r7, #8
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	bd80      	pop	{r7, pc}

08002f22 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002f22:	b580      	push	{r7, lr}
 8002f24:	b082      	sub	sp, #8
 8002f26:	af00      	add	r7, sp, #0
 8002f28:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002f2a:	6878      	ldr	r0, [r7, #4]
 8002f2c:	f7ff ffa2 	bl	8002e74 <SysTick_Config>
 8002f30:	4603      	mov	r3, r0
}
 8002f32:	4618      	mov	r0, r3
 8002f34:	3708      	adds	r7, #8
 8002f36:	46bd      	mov	sp, r7
 8002f38:	bd80      	pop	{r7, pc}
	...

08002f3c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f3c:	b480      	push	{r7}
 8002f3e:	b089      	sub	sp, #36	; 0x24
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
 8002f44:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002f46:	2300      	movs	r3, #0
 8002f48:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002f4e:	2300      	movs	r3, #0
 8002f50:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002f52:	2300      	movs	r3, #0
 8002f54:	61fb      	str	r3, [r7, #28]
 8002f56:	e165      	b.n	8003224 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002f58:	2201      	movs	r2, #1
 8002f5a:	69fb      	ldr	r3, [r7, #28]
 8002f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f60:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002f62:	683b      	ldr	r3, [r7, #0]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	697a      	ldr	r2, [r7, #20]
 8002f68:	4013      	ands	r3, r2
 8002f6a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002f6c:	693a      	ldr	r2, [r7, #16]
 8002f6e:	697b      	ldr	r3, [r7, #20]
 8002f70:	429a      	cmp	r2, r3
 8002f72:	f040 8154 	bne.w	800321e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002f76:	683b      	ldr	r3, [r7, #0]
 8002f78:	685b      	ldr	r3, [r3, #4]
 8002f7a:	2b01      	cmp	r3, #1
 8002f7c:	d00b      	beq.n	8002f96 <HAL_GPIO_Init+0x5a>
 8002f7e:	683b      	ldr	r3, [r7, #0]
 8002f80:	685b      	ldr	r3, [r3, #4]
 8002f82:	2b02      	cmp	r3, #2
 8002f84:	d007      	beq.n	8002f96 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002f8a:	2b11      	cmp	r3, #17
 8002f8c:	d003      	beq.n	8002f96 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002f8e:	683b      	ldr	r3, [r7, #0]
 8002f90:	685b      	ldr	r3, [r3, #4]
 8002f92:	2b12      	cmp	r3, #18
 8002f94:	d130      	bne.n	8002ff8 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	689b      	ldr	r3, [r3, #8]
 8002f9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002f9c:	69fb      	ldr	r3, [r7, #28]
 8002f9e:	005b      	lsls	r3, r3, #1
 8002fa0:	2203      	movs	r2, #3
 8002fa2:	fa02 f303 	lsl.w	r3, r2, r3
 8002fa6:	43db      	mvns	r3, r3
 8002fa8:	69ba      	ldr	r2, [r7, #24]
 8002faa:	4013      	ands	r3, r2
 8002fac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002fae:	683b      	ldr	r3, [r7, #0]
 8002fb0:	68da      	ldr	r2, [r3, #12]
 8002fb2:	69fb      	ldr	r3, [r7, #28]
 8002fb4:	005b      	lsls	r3, r3, #1
 8002fb6:	fa02 f303 	lsl.w	r3, r2, r3
 8002fba:	69ba      	ldr	r2, [r7, #24]
 8002fbc:	4313      	orrs	r3, r2
 8002fbe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	69ba      	ldr	r2, [r7, #24]
 8002fc4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	685b      	ldr	r3, [r3, #4]
 8002fca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002fcc:	2201      	movs	r2, #1
 8002fce:	69fb      	ldr	r3, [r7, #28]
 8002fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8002fd4:	43db      	mvns	r3, r3
 8002fd6:	69ba      	ldr	r2, [r7, #24]
 8002fd8:	4013      	ands	r3, r2
 8002fda:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	685b      	ldr	r3, [r3, #4]
 8002fe0:	091b      	lsrs	r3, r3, #4
 8002fe2:	f003 0201 	and.w	r2, r3, #1
 8002fe6:	69fb      	ldr	r3, [r7, #28]
 8002fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8002fec:	69ba      	ldr	r2, [r7, #24]
 8002fee:	4313      	orrs	r3, r2
 8002ff0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	69ba      	ldr	r2, [r7, #24]
 8002ff6:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	68db      	ldr	r3, [r3, #12]
 8002ffc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002ffe:	69fb      	ldr	r3, [r7, #28]
 8003000:	005b      	lsls	r3, r3, #1
 8003002:	2203      	movs	r2, #3
 8003004:	fa02 f303 	lsl.w	r3, r2, r3
 8003008:	43db      	mvns	r3, r3
 800300a:	69ba      	ldr	r2, [r7, #24]
 800300c:	4013      	ands	r3, r2
 800300e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003010:	683b      	ldr	r3, [r7, #0]
 8003012:	689a      	ldr	r2, [r3, #8]
 8003014:	69fb      	ldr	r3, [r7, #28]
 8003016:	005b      	lsls	r3, r3, #1
 8003018:	fa02 f303 	lsl.w	r3, r2, r3
 800301c:	69ba      	ldr	r2, [r7, #24]
 800301e:	4313      	orrs	r3, r2
 8003020:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	69ba      	ldr	r2, [r7, #24]
 8003026:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	685b      	ldr	r3, [r3, #4]
 800302c:	2b02      	cmp	r3, #2
 800302e:	d003      	beq.n	8003038 <HAL_GPIO_Init+0xfc>
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	685b      	ldr	r3, [r3, #4]
 8003034:	2b12      	cmp	r3, #18
 8003036:	d123      	bne.n	8003080 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003038:	69fb      	ldr	r3, [r7, #28]
 800303a:	08da      	lsrs	r2, r3, #3
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	3208      	adds	r2, #8
 8003040:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003044:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003046:	69fb      	ldr	r3, [r7, #28]
 8003048:	f003 0307 	and.w	r3, r3, #7
 800304c:	009b      	lsls	r3, r3, #2
 800304e:	220f      	movs	r2, #15
 8003050:	fa02 f303 	lsl.w	r3, r2, r3
 8003054:	43db      	mvns	r3, r3
 8003056:	69ba      	ldr	r2, [r7, #24]
 8003058:	4013      	ands	r3, r2
 800305a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	691a      	ldr	r2, [r3, #16]
 8003060:	69fb      	ldr	r3, [r7, #28]
 8003062:	f003 0307 	and.w	r3, r3, #7
 8003066:	009b      	lsls	r3, r3, #2
 8003068:	fa02 f303 	lsl.w	r3, r2, r3
 800306c:	69ba      	ldr	r2, [r7, #24]
 800306e:	4313      	orrs	r3, r2
 8003070:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003072:	69fb      	ldr	r3, [r7, #28]
 8003074:	08da      	lsrs	r2, r3, #3
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	3208      	adds	r2, #8
 800307a:	69b9      	ldr	r1, [r7, #24]
 800307c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003086:	69fb      	ldr	r3, [r7, #28]
 8003088:	005b      	lsls	r3, r3, #1
 800308a:	2203      	movs	r2, #3
 800308c:	fa02 f303 	lsl.w	r3, r2, r3
 8003090:	43db      	mvns	r3, r3
 8003092:	69ba      	ldr	r2, [r7, #24]
 8003094:	4013      	ands	r3, r2
 8003096:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003098:	683b      	ldr	r3, [r7, #0]
 800309a:	685b      	ldr	r3, [r3, #4]
 800309c:	f003 0203 	and.w	r2, r3, #3
 80030a0:	69fb      	ldr	r3, [r7, #28]
 80030a2:	005b      	lsls	r3, r3, #1
 80030a4:	fa02 f303 	lsl.w	r3, r2, r3
 80030a8:	69ba      	ldr	r2, [r7, #24]
 80030aa:	4313      	orrs	r3, r2
 80030ac:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	69ba      	ldr	r2, [r7, #24]
 80030b2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	685b      	ldr	r3, [r3, #4]
 80030b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030bc:	2b00      	cmp	r3, #0
 80030be:	f000 80ae 	beq.w	800321e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80030c2:	2300      	movs	r3, #0
 80030c4:	60fb      	str	r3, [r7, #12]
 80030c6:	4b5c      	ldr	r3, [pc, #368]	; (8003238 <HAL_GPIO_Init+0x2fc>)
 80030c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030ca:	4a5b      	ldr	r2, [pc, #364]	; (8003238 <HAL_GPIO_Init+0x2fc>)
 80030cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80030d0:	6453      	str	r3, [r2, #68]	; 0x44
 80030d2:	4b59      	ldr	r3, [pc, #356]	; (8003238 <HAL_GPIO_Init+0x2fc>)
 80030d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80030da:	60fb      	str	r3, [r7, #12]
 80030dc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80030de:	4a57      	ldr	r2, [pc, #348]	; (800323c <HAL_GPIO_Init+0x300>)
 80030e0:	69fb      	ldr	r3, [r7, #28]
 80030e2:	089b      	lsrs	r3, r3, #2
 80030e4:	3302      	adds	r3, #2
 80030e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80030ec:	69fb      	ldr	r3, [r7, #28]
 80030ee:	f003 0303 	and.w	r3, r3, #3
 80030f2:	009b      	lsls	r3, r3, #2
 80030f4:	220f      	movs	r2, #15
 80030f6:	fa02 f303 	lsl.w	r3, r2, r3
 80030fa:	43db      	mvns	r3, r3
 80030fc:	69ba      	ldr	r2, [r7, #24]
 80030fe:	4013      	ands	r3, r2
 8003100:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	4a4e      	ldr	r2, [pc, #312]	; (8003240 <HAL_GPIO_Init+0x304>)
 8003106:	4293      	cmp	r3, r2
 8003108:	d025      	beq.n	8003156 <HAL_GPIO_Init+0x21a>
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	4a4d      	ldr	r2, [pc, #308]	; (8003244 <HAL_GPIO_Init+0x308>)
 800310e:	4293      	cmp	r3, r2
 8003110:	d01f      	beq.n	8003152 <HAL_GPIO_Init+0x216>
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	4a4c      	ldr	r2, [pc, #304]	; (8003248 <HAL_GPIO_Init+0x30c>)
 8003116:	4293      	cmp	r3, r2
 8003118:	d019      	beq.n	800314e <HAL_GPIO_Init+0x212>
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	4a4b      	ldr	r2, [pc, #300]	; (800324c <HAL_GPIO_Init+0x310>)
 800311e:	4293      	cmp	r3, r2
 8003120:	d013      	beq.n	800314a <HAL_GPIO_Init+0x20e>
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	4a4a      	ldr	r2, [pc, #296]	; (8003250 <HAL_GPIO_Init+0x314>)
 8003126:	4293      	cmp	r3, r2
 8003128:	d00d      	beq.n	8003146 <HAL_GPIO_Init+0x20a>
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	4a49      	ldr	r2, [pc, #292]	; (8003254 <HAL_GPIO_Init+0x318>)
 800312e:	4293      	cmp	r3, r2
 8003130:	d007      	beq.n	8003142 <HAL_GPIO_Init+0x206>
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	4a48      	ldr	r2, [pc, #288]	; (8003258 <HAL_GPIO_Init+0x31c>)
 8003136:	4293      	cmp	r3, r2
 8003138:	d101      	bne.n	800313e <HAL_GPIO_Init+0x202>
 800313a:	2306      	movs	r3, #6
 800313c:	e00c      	b.n	8003158 <HAL_GPIO_Init+0x21c>
 800313e:	2307      	movs	r3, #7
 8003140:	e00a      	b.n	8003158 <HAL_GPIO_Init+0x21c>
 8003142:	2305      	movs	r3, #5
 8003144:	e008      	b.n	8003158 <HAL_GPIO_Init+0x21c>
 8003146:	2304      	movs	r3, #4
 8003148:	e006      	b.n	8003158 <HAL_GPIO_Init+0x21c>
 800314a:	2303      	movs	r3, #3
 800314c:	e004      	b.n	8003158 <HAL_GPIO_Init+0x21c>
 800314e:	2302      	movs	r3, #2
 8003150:	e002      	b.n	8003158 <HAL_GPIO_Init+0x21c>
 8003152:	2301      	movs	r3, #1
 8003154:	e000      	b.n	8003158 <HAL_GPIO_Init+0x21c>
 8003156:	2300      	movs	r3, #0
 8003158:	69fa      	ldr	r2, [r7, #28]
 800315a:	f002 0203 	and.w	r2, r2, #3
 800315e:	0092      	lsls	r2, r2, #2
 8003160:	4093      	lsls	r3, r2
 8003162:	69ba      	ldr	r2, [r7, #24]
 8003164:	4313      	orrs	r3, r2
 8003166:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003168:	4934      	ldr	r1, [pc, #208]	; (800323c <HAL_GPIO_Init+0x300>)
 800316a:	69fb      	ldr	r3, [r7, #28]
 800316c:	089b      	lsrs	r3, r3, #2
 800316e:	3302      	adds	r3, #2
 8003170:	69ba      	ldr	r2, [r7, #24]
 8003172:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003176:	4b39      	ldr	r3, [pc, #228]	; (800325c <HAL_GPIO_Init+0x320>)
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800317c:	693b      	ldr	r3, [r7, #16]
 800317e:	43db      	mvns	r3, r3
 8003180:	69ba      	ldr	r2, [r7, #24]
 8003182:	4013      	ands	r3, r2
 8003184:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003186:	683b      	ldr	r3, [r7, #0]
 8003188:	685b      	ldr	r3, [r3, #4]
 800318a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800318e:	2b00      	cmp	r3, #0
 8003190:	d003      	beq.n	800319a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8003192:	69ba      	ldr	r2, [r7, #24]
 8003194:	693b      	ldr	r3, [r7, #16]
 8003196:	4313      	orrs	r3, r2
 8003198:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800319a:	4a30      	ldr	r2, [pc, #192]	; (800325c <HAL_GPIO_Init+0x320>)
 800319c:	69bb      	ldr	r3, [r7, #24]
 800319e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80031a0:	4b2e      	ldr	r3, [pc, #184]	; (800325c <HAL_GPIO_Init+0x320>)
 80031a2:	685b      	ldr	r3, [r3, #4]
 80031a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031a6:	693b      	ldr	r3, [r7, #16]
 80031a8:	43db      	mvns	r3, r3
 80031aa:	69ba      	ldr	r2, [r7, #24]
 80031ac:	4013      	ands	r3, r2
 80031ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80031b0:	683b      	ldr	r3, [r7, #0]
 80031b2:	685b      	ldr	r3, [r3, #4]
 80031b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d003      	beq.n	80031c4 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80031bc:	69ba      	ldr	r2, [r7, #24]
 80031be:	693b      	ldr	r3, [r7, #16]
 80031c0:	4313      	orrs	r3, r2
 80031c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80031c4:	4a25      	ldr	r2, [pc, #148]	; (800325c <HAL_GPIO_Init+0x320>)
 80031c6:	69bb      	ldr	r3, [r7, #24]
 80031c8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80031ca:	4b24      	ldr	r3, [pc, #144]	; (800325c <HAL_GPIO_Init+0x320>)
 80031cc:	689b      	ldr	r3, [r3, #8]
 80031ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031d0:	693b      	ldr	r3, [r7, #16]
 80031d2:	43db      	mvns	r3, r3
 80031d4:	69ba      	ldr	r2, [r7, #24]
 80031d6:	4013      	ands	r3, r2
 80031d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80031da:	683b      	ldr	r3, [r7, #0]
 80031dc:	685b      	ldr	r3, [r3, #4]
 80031de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d003      	beq.n	80031ee <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80031e6:	69ba      	ldr	r2, [r7, #24]
 80031e8:	693b      	ldr	r3, [r7, #16]
 80031ea:	4313      	orrs	r3, r2
 80031ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80031ee:	4a1b      	ldr	r2, [pc, #108]	; (800325c <HAL_GPIO_Init+0x320>)
 80031f0:	69bb      	ldr	r3, [r7, #24]
 80031f2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80031f4:	4b19      	ldr	r3, [pc, #100]	; (800325c <HAL_GPIO_Init+0x320>)
 80031f6:	68db      	ldr	r3, [r3, #12]
 80031f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031fa:	693b      	ldr	r3, [r7, #16]
 80031fc:	43db      	mvns	r3, r3
 80031fe:	69ba      	ldr	r2, [r7, #24]
 8003200:	4013      	ands	r3, r2
 8003202:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	685b      	ldr	r3, [r3, #4]
 8003208:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800320c:	2b00      	cmp	r3, #0
 800320e:	d003      	beq.n	8003218 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003210:	69ba      	ldr	r2, [r7, #24]
 8003212:	693b      	ldr	r3, [r7, #16]
 8003214:	4313      	orrs	r3, r2
 8003216:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003218:	4a10      	ldr	r2, [pc, #64]	; (800325c <HAL_GPIO_Init+0x320>)
 800321a:	69bb      	ldr	r3, [r7, #24]
 800321c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800321e:	69fb      	ldr	r3, [r7, #28]
 8003220:	3301      	adds	r3, #1
 8003222:	61fb      	str	r3, [r7, #28]
 8003224:	69fb      	ldr	r3, [r7, #28]
 8003226:	2b0f      	cmp	r3, #15
 8003228:	f67f ae96 	bls.w	8002f58 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800322c:	bf00      	nop
 800322e:	3724      	adds	r7, #36	; 0x24
 8003230:	46bd      	mov	sp, r7
 8003232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003236:	4770      	bx	lr
 8003238:	40023800 	.word	0x40023800
 800323c:	40013800 	.word	0x40013800
 8003240:	40020000 	.word	0x40020000
 8003244:	40020400 	.word	0x40020400
 8003248:	40020800 	.word	0x40020800
 800324c:	40020c00 	.word	0x40020c00
 8003250:	40021000 	.word	0x40021000
 8003254:	40021400 	.word	0x40021400
 8003258:	40021800 	.word	0x40021800
 800325c:	40013c00 	.word	0x40013c00

08003260 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003260:	b480      	push	{r7}
 8003262:	b085      	sub	sp, #20
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
 8003268:	460b      	mov	r3, r1
 800326a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	691a      	ldr	r2, [r3, #16]
 8003270:	887b      	ldrh	r3, [r7, #2]
 8003272:	4013      	ands	r3, r2
 8003274:	2b00      	cmp	r3, #0
 8003276:	d002      	beq.n	800327e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003278:	2301      	movs	r3, #1
 800327a:	73fb      	strb	r3, [r7, #15]
 800327c:	e001      	b.n	8003282 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800327e:	2300      	movs	r3, #0
 8003280:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003282:	7bfb      	ldrb	r3, [r7, #15]
}
 8003284:	4618      	mov	r0, r3
 8003286:	3714      	adds	r7, #20
 8003288:	46bd      	mov	sp, r7
 800328a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328e:	4770      	bx	lr

08003290 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003290:	b480      	push	{r7}
 8003292:	b083      	sub	sp, #12
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
 8003298:	460b      	mov	r3, r1
 800329a:	807b      	strh	r3, [r7, #2]
 800329c:	4613      	mov	r3, r2
 800329e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80032a0:	787b      	ldrb	r3, [r7, #1]
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d003      	beq.n	80032ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80032a6:	887a      	ldrh	r2, [r7, #2]
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80032ac:	e003      	b.n	80032b6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80032ae:	887b      	ldrh	r3, [r7, #2]
 80032b0:	041a      	lsls	r2, r3, #16
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	619a      	str	r2, [r3, #24]
}
 80032b6:	bf00      	nop
 80032b8:	370c      	adds	r7, #12
 80032ba:	46bd      	mov	sp, r7
 80032bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c0:	4770      	bx	lr

080032c2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80032c2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80032c4:	b08f      	sub	sp, #60	; 0x3c
 80032c6:	af0a      	add	r7, sp, #40	; 0x28
 80032c8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d101      	bne.n	80032d4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80032d0:	2301      	movs	r3, #1
 80032d2:	e116      	b.n	8003502 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80032e0:	b2db      	uxtb	r3, r3
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d106      	bne.n	80032f4 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	2200      	movs	r2, #0
 80032ea:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80032ee:	6878      	ldr	r0, [r7, #4]
 80032f0:	f006 fb2c 	bl	800994c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2203      	movs	r2, #3
 80032f8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80032fc:	68bb      	ldr	r3, [r7, #8]
 80032fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003300:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003304:	2b00      	cmp	r3, #0
 8003306:	d102      	bne.n	800330e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2200      	movs	r2, #0
 800330c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	4618      	mov	r0, r3
 8003314:	f003 fac3 	bl	800689e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	603b      	str	r3, [r7, #0]
 800331e:	687e      	ldr	r6, [r7, #4]
 8003320:	466d      	mov	r5, sp
 8003322:	f106 0410 	add.w	r4, r6, #16
 8003326:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003328:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800332a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800332c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800332e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003332:	e885 0003 	stmia.w	r5, {r0, r1}
 8003336:	1d33      	adds	r3, r6, #4
 8003338:	cb0e      	ldmia	r3, {r1, r2, r3}
 800333a:	6838      	ldr	r0, [r7, #0]
 800333c:	f003 f99a 	bl	8006674 <USB_CoreInit>
 8003340:	4603      	mov	r3, r0
 8003342:	2b00      	cmp	r3, #0
 8003344:	d005      	beq.n	8003352 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	2202      	movs	r2, #2
 800334a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800334e:	2301      	movs	r3, #1
 8003350:	e0d7      	b.n	8003502 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	2100      	movs	r1, #0
 8003358:	4618      	mov	r0, r3
 800335a:	f003 fab1 	bl	80068c0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800335e:	2300      	movs	r3, #0
 8003360:	73fb      	strb	r3, [r7, #15]
 8003362:	e04a      	b.n	80033fa <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003364:	7bfa      	ldrb	r2, [r7, #15]
 8003366:	6879      	ldr	r1, [r7, #4]
 8003368:	4613      	mov	r3, r2
 800336a:	00db      	lsls	r3, r3, #3
 800336c:	1a9b      	subs	r3, r3, r2
 800336e:	009b      	lsls	r3, r3, #2
 8003370:	440b      	add	r3, r1
 8003372:	333d      	adds	r3, #61	; 0x3d
 8003374:	2201      	movs	r2, #1
 8003376:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003378:	7bfa      	ldrb	r2, [r7, #15]
 800337a:	6879      	ldr	r1, [r7, #4]
 800337c:	4613      	mov	r3, r2
 800337e:	00db      	lsls	r3, r3, #3
 8003380:	1a9b      	subs	r3, r3, r2
 8003382:	009b      	lsls	r3, r3, #2
 8003384:	440b      	add	r3, r1
 8003386:	333c      	adds	r3, #60	; 0x3c
 8003388:	7bfa      	ldrb	r2, [r7, #15]
 800338a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800338c:	7bfa      	ldrb	r2, [r7, #15]
 800338e:	7bfb      	ldrb	r3, [r7, #15]
 8003390:	b298      	uxth	r0, r3
 8003392:	6879      	ldr	r1, [r7, #4]
 8003394:	4613      	mov	r3, r2
 8003396:	00db      	lsls	r3, r3, #3
 8003398:	1a9b      	subs	r3, r3, r2
 800339a:	009b      	lsls	r3, r3, #2
 800339c:	440b      	add	r3, r1
 800339e:	3342      	adds	r3, #66	; 0x42
 80033a0:	4602      	mov	r2, r0
 80033a2:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80033a4:	7bfa      	ldrb	r2, [r7, #15]
 80033a6:	6879      	ldr	r1, [r7, #4]
 80033a8:	4613      	mov	r3, r2
 80033aa:	00db      	lsls	r3, r3, #3
 80033ac:	1a9b      	subs	r3, r3, r2
 80033ae:	009b      	lsls	r3, r3, #2
 80033b0:	440b      	add	r3, r1
 80033b2:	333f      	adds	r3, #63	; 0x3f
 80033b4:	2200      	movs	r2, #0
 80033b6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80033b8:	7bfa      	ldrb	r2, [r7, #15]
 80033ba:	6879      	ldr	r1, [r7, #4]
 80033bc:	4613      	mov	r3, r2
 80033be:	00db      	lsls	r3, r3, #3
 80033c0:	1a9b      	subs	r3, r3, r2
 80033c2:	009b      	lsls	r3, r3, #2
 80033c4:	440b      	add	r3, r1
 80033c6:	3344      	adds	r3, #68	; 0x44
 80033c8:	2200      	movs	r2, #0
 80033ca:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80033cc:	7bfa      	ldrb	r2, [r7, #15]
 80033ce:	6879      	ldr	r1, [r7, #4]
 80033d0:	4613      	mov	r3, r2
 80033d2:	00db      	lsls	r3, r3, #3
 80033d4:	1a9b      	subs	r3, r3, r2
 80033d6:	009b      	lsls	r3, r3, #2
 80033d8:	440b      	add	r3, r1
 80033da:	3348      	adds	r3, #72	; 0x48
 80033dc:	2200      	movs	r2, #0
 80033de:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80033e0:	7bfa      	ldrb	r2, [r7, #15]
 80033e2:	6879      	ldr	r1, [r7, #4]
 80033e4:	4613      	mov	r3, r2
 80033e6:	00db      	lsls	r3, r3, #3
 80033e8:	1a9b      	subs	r3, r3, r2
 80033ea:	009b      	lsls	r3, r3, #2
 80033ec:	440b      	add	r3, r1
 80033ee:	3350      	adds	r3, #80	; 0x50
 80033f0:	2200      	movs	r2, #0
 80033f2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80033f4:	7bfb      	ldrb	r3, [r7, #15]
 80033f6:	3301      	adds	r3, #1
 80033f8:	73fb      	strb	r3, [r7, #15]
 80033fa:	7bfa      	ldrb	r2, [r7, #15]
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	685b      	ldr	r3, [r3, #4]
 8003400:	429a      	cmp	r2, r3
 8003402:	d3af      	bcc.n	8003364 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003404:	2300      	movs	r3, #0
 8003406:	73fb      	strb	r3, [r7, #15]
 8003408:	e044      	b.n	8003494 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800340a:	7bfa      	ldrb	r2, [r7, #15]
 800340c:	6879      	ldr	r1, [r7, #4]
 800340e:	4613      	mov	r3, r2
 8003410:	00db      	lsls	r3, r3, #3
 8003412:	1a9b      	subs	r3, r3, r2
 8003414:	009b      	lsls	r3, r3, #2
 8003416:	440b      	add	r3, r1
 8003418:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 800341c:	2200      	movs	r2, #0
 800341e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003420:	7bfa      	ldrb	r2, [r7, #15]
 8003422:	6879      	ldr	r1, [r7, #4]
 8003424:	4613      	mov	r3, r2
 8003426:	00db      	lsls	r3, r3, #3
 8003428:	1a9b      	subs	r3, r3, r2
 800342a:	009b      	lsls	r3, r3, #2
 800342c:	440b      	add	r3, r1
 800342e:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8003432:	7bfa      	ldrb	r2, [r7, #15]
 8003434:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003436:	7bfa      	ldrb	r2, [r7, #15]
 8003438:	6879      	ldr	r1, [r7, #4]
 800343a:	4613      	mov	r3, r2
 800343c:	00db      	lsls	r3, r3, #3
 800343e:	1a9b      	subs	r3, r3, r2
 8003440:	009b      	lsls	r3, r3, #2
 8003442:	440b      	add	r3, r1
 8003444:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8003448:	2200      	movs	r2, #0
 800344a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800344c:	7bfa      	ldrb	r2, [r7, #15]
 800344e:	6879      	ldr	r1, [r7, #4]
 8003450:	4613      	mov	r3, r2
 8003452:	00db      	lsls	r3, r3, #3
 8003454:	1a9b      	subs	r3, r3, r2
 8003456:	009b      	lsls	r3, r3, #2
 8003458:	440b      	add	r3, r1
 800345a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800345e:	2200      	movs	r2, #0
 8003460:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003462:	7bfa      	ldrb	r2, [r7, #15]
 8003464:	6879      	ldr	r1, [r7, #4]
 8003466:	4613      	mov	r3, r2
 8003468:	00db      	lsls	r3, r3, #3
 800346a:	1a9b      	subs	r3, r3, r2
 800346c:	009b      	lsls	r3, r3, #2
 800346e:	440b      	add	r3, r1
 8003470:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003474:	2200      	movs	r2, #0
 8003476:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003478:	7bfa      	ldrb	r2, [r7, #15]
 800347a:	6879      	ldr	r1, [r7, #4]
 800347c:	4613      	mov	r3, r2
 800347e:	00db      	lsls	r3, r3, #3
 8003480:	1a9b      	subs	r3, r3, r2
 8003482:	009b      	lsls	r3, r3, #2
 8003484:	440b      	add	r3, r1
 8003486:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800348a:	2200      	movs	r2, #0
 800348c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800348e:	7bfb      	ldrb	r3, [r7, #15]
 8003490:	3301      	adds	r3, #1
 8003492:	73fb      	strb	r3, [r7, #15]
 8003494:	7bfa      	ldrb	r2, [r7, #15]
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	685b      	ldr	r3, [r3, #4]
 800349a:	429a      	cmp	r2, r3
 800349c:	d3b5      	bcc.n	800340a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	603b      	str	r3, [r7, #0]
 80034a4:	687e      	ldr	r6, [r7, #4]
 80034a6:	466d      	mov	r5, sp
 80034a8:	f106 0410 	add.w	r4, r6, #16
 80034ac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80034ae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80034b0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80034b2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80034b4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80034b8:	e885 0003 	stmia.w	r5, {r0, r1}
 80034bc:	1d33      	adds	r3, r6, #4
 80034be:	cb0e      	ldmia	r3, {r1, r2, r3}
 80034c0:	6838      	ldr	r0, [r7, #0]
 80034c2:	f003 fa27 	bl	8006914 <USB_DevInit>
 80034c6:	4603      	mov	r3, r0
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d005      	beq.n	80034d8 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2202      	movs	r2, #2
 80034d0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80034d4:	2301      	movs	r3, #1
 80034d6:	e014      	b.n	8003502 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2200      	movs	r2, #0
 80034dc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2201      	movs	r2, #1
 80034e4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  #if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034ec:	2b01      	cmp	r3, #1
 80034ee:	d102      	bne.n	80034f6 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80034f0:	6878      	ldr	r0, [r7, #4]
 80034f2:	f001 f891 	bl	8004618 <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	4618      	mov	r0, r3
 80034fc:	f004 fa62 	bl	80079c4 <USB_DevDisconnect>

  return HAL_OK;
 8003500:	2300      	movs	r3, #0
}
 8003502:	4618      	mov	r0, r3
 8003504:	3714      	adds	r7, #20
 8003506:	46bd      	mov	sp, r7
 8003508:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800350a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800350a:	b580      	push	{r7, lr}
 800350c:	b084      	sub	sp, #16
 800350e:	af00      	add	r7, sp, #0
 8003510:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800351e:	2b01      	cmp	r3, #1
 8003520:	d101      	bne.n	8003526 <HAL_PCD_Start+0x1c>
 8003522:	2302      	movs	r3, #2
 8003524:	e020      	b.n	8003568 <HAL_PCD_Start+0x5e>
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	2201      	movs	r2, #1
 800352a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003532:	2b01      	cmp	r3, #1
 8003534:	d109      	bne.n	800354a <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800353a:	2b01      	cmp	r3, #1
 800353c:	d005      	beq.n	800354a <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003542:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	4618      	mov	r0, r3
 8003550:	f003 f994 	bl	800687c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	4618      	mov	r0, r3
 800355a:	f004 fa12 	bl	8007982 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	2200      	movs	r2, #0
 8003562:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003566:	2300      	movs	r3, #0
}
 8003568:	4618      	mov	r0, r3
 800356a:	3710      	adds	r7, #16
 800356c:	46bd      	mov	sp, r7
 800356e:	bd80      	pop	{r7, pc}

08003570 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003570:	b590      	push	{r4, r7, lr}
 8003572:	b08d      	sub	sp, #52	; 0x34
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800357e:	6a3b      	ldr	r3, [r7, #32]
 8003580:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	4618      	mov	r0, r3
 8003588:	f004 fad0 	bl	8007b2c <USB_GetMode>
 800358c:	4603      	mov	r3, r0
 800358e:	2b00      	cmp	r3, #0
 8003590:	f040 83ca 	bne.w	8003d28 <HAL_PCD_IRQHandler+0x7b8>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	4618      	mov	r0, r3
 800359a:	f004 fa34 	bl	8007a06 <USB_ReadInterrupts>
 800359e:	4603      	mov	r3, r0
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	f000 83c0 	beq.w	8003d26 <HAL_PCD_IRQHandler+0x7b6>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	4618      	mov	r0, r3
 80035ac:	f004 fa2b 	bl	8007a06 <USB_ReadInterrupts>
 80035b0:	4603      	mov	r3, r0
 80035b2:	f003 0302 	and.w	r3, r3, #2
 80035b6:	2b02      	cmp	r3, #2
 80035b8:	d107      	bne.n	80035ca <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	695a      	ldr	r2, [r3, #20]
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f002 0202 	and.w	r2, r2, #2
 80035c8:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	4618      	mov	r0, r3
 80035d0:	f004 fa19 	bl	8007a06 <USB_ReadInterrupts>
 80035d4:	4603      	mov	r3, r0
 80035d6:	f003 0310 	and.w	r3, r3, #16
 80035da:	2b10      	cmp	r3, #16
 80035dc:	d161      	bne.n	80036a2 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	699a      	ldr	r2, [r3, #24]
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f022 0210 	bic.w	r2, r2, #16
 80035ec:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 80035ee:	6a3b      	ldr	r3, [r7, #32]
 80035f0:	6a1b      	ldr	r3, [r3, #32]
 80035f2:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 80035f4:	69bb      	ldr	r3, [r7, #24]
 80035f6:	f003 020f 	and.w	r2, r3, #15
 80035fa:	4613      	mov	r3, r2
 80035fc:	00db      	lsls	r3, r3, #3
 80035fe:	1a9b      	subs	r3, r3, r2
 8003600:	009b      	lsls	r3, r3, #2
 8003602:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003606:	687a      	ldr	r2, [r7, #4]
 8003608:	4413      	add	r3, r2
 800360a:	3304      	adds	r3, #4
 800360c:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800360e:	69bb      	ldr	r3, [r7, #24]
 8003610:	0c5b      	lsrs	r3, r3, #17
 8003612:	f003 030f 	and.w	r3, r3, #15
 8003616:	2b02      	cmp	r3, #2
 8003618:	d124      	bne.n	8003664 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 800361a:	69ba      	ldr	r2, [r7, #24]
 800361c:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8003620:	4013      	ands	r3, r2
 8003622:	2b00      	cmp	r3, #0
 8003624:	d035      	beq.n	8003692 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003626:	697b      	ldr	r3, [r7, #20]
 8003628:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 800362a:	69bb      	ldr	r3, [r7, #24]
 800362c:	091b      	lsrs	r3, r3, #4
 800362e:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003630:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003634:	b29b      	uxth	r3, r3
 8003636:	461a      	mov	r2, r3
 8003638:	6a38      	ldr	r0, [r7, #32]
 800363a:	f004 f87f 	bl	800773c <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800363e:	697b      	ldr	r3, [r7, #20]
 8003640:	68da      	ldr	r2, [r3, #12]
 8003642:	69bb      	ldr	r3, [r7, #24]
 8003644:	091b      	lsrs	r3, r3, #4
 8003646:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800364a:	441a      	add	r2, r3
 800364c:	697b      	ldr	r3, [r7, #20]
 800364e:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003650:	697b      	ldr	r3, [r7, #20]
 8003652:	699a      	ldr	r2, [r3, #24]
 8003654:	69bb      	ldr	r3, [r7, #24]
 8003656:	091b      	lsrs	r3, r3, #4
 8003658:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800365c:	441a      	add	r2, r3
 800365e:	697b      	ldr	r3, [r7, #20]
 8003660:	619a      	str	r2, [r3, #24]
 8003662:	e016      	b.n	8003692 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8003664:	69bb      	ldr	r3, [r7, #24]
 8003666:	0c5b      	lsrs	r3, r3, #17
 8003668:	f003 030f 	and.w	r3, r3, #15
 800366c:	2b06      	cmp	r3, #6
 800366e:	d110      	bne.n	8003692 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003676:	2208      	movs	r2, #8
 8003678:	4619      	mov	r1, r3
 800367a:	6a38      	ldr	r0, [r7, #32]
 800367c:	f004 f85e 	bl	800773c <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003680:	697b      	ldr	r3, [r7, #20]
 8003682:	699a      	ldr	r2, [r3, #24]
 8003684:	69bb      	ldr	r3, [r7, #24]
 8003686:	091b      	lsrs	r3, r3, #4
 8003688:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800368c:	441a      	add	r2, r3
 800368e:	697b      	ldr	r3, [r7, #20]
 8003690:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	699a      	ldr	r2, [r3, #24]
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f042 0210 	orr.w	r2, r2, #16
 80036a0:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	4618      	mov	r0, r3
 80036a8:	f004 f9ad 	bl	8007a06 <USB_ReadInterrupts>
 80036ac:	4603      	mov	r3, r0
 80036ae:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80036b2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80036b6:	d16e      	bne.n	8003796 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 80036b8:	2300      	movs	r3, #0
 80036ba:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	4618      	mov	r0, r3
 80036c2:	f004 f9b3 	bl	8007a2c <USB_ReadDevAllOutEpInterrupt>
 80036c6:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80036c8:	e062      	b.n	8003790 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 80036ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036cc:	f003 0301 	and.w	r3, r3, #1
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d057      	beq.n	8003784 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036da:	b2d2      	uxtb	r2, r2
 80036dc:	4611      	mov	r1, r2
 80036de:	4618      	mov	r0, r3
 80036e0:	f004 f9d8 	bl	8007a94 <USB_ReadDevOutEPInterrupt>
 80036e4:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80036e6:	693b      	ldr	r3, [r7, #16]
 80036e8:	f003 0301 	and.w	r3, r3, #1
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d00c      	beq.n	800370a <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80036f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036f2:	015a      	lsls	r2, r3, #5
 80036f4:	69fb      	ldr	r3, [r7, #28]
 80036f6:	4413      	add	r3, r2
 80036f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80036fc:	461a      	mov	r2, r3
 80036fe:	2301      	movs	r3, #1
 8003700:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003702:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003704:	6878      	ldr	r0, [r7, #4]
 8003706:	f000 fddd 	bl	80042c4 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800370a:	693b      	ldr	r3, [r7, #16]
 800370c:	f003 0308 	and.w	r3, r3, #8
 8003710:	2b00      	cmp	r3, #0
 8003712:	d00c      	beq.n	800372e <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003716:	015a      	lsls	r2, r3, #5
 8003718:	69fb      	ldr	r3, [r7, #28]
 800371a:	4413      	add	r3, r2
 800371c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003720:	461a      	mov	r2, r3
 8003722:	2308      	movs	r3, #8
 8003724:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003726:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003728:	6878      	ldr	r0, [r7, #4]
 800372a:	f000 fed7 	bl	80044dc <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800372e:	693b      	ldr	r3, [r7, #16]
 8003730:	f003 0310 	and.w	r3, r3, #16
 8003734:	2b00      	cmp	r3, #0
 8003736:	d008      	beq.n	800374a <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800373a:	015a      	lsls	r2, r3, #5
 800373c:	69fb      	ldr	r3, [r7, #28]
 800373e:	4413      	add	r3, r2
 8003740:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003744:	461a      	mov	r2, r3
 8003746:	2310      	movs	r3, #16
 8003748:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800374a:	693b      	ldr	r3, [r7, #16]
 800374c:	f003 0320 	and.w	r3, r3, #32
 8003750:	2b00      	cmp	r3, #0
 8003752:	d008      	beq.n	8003766 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003756:	015a      	lsls	r2, r3, #5
 8003758:	69fb      	ldr	r3, [r7, #28]
 800375a:	4413      	add	r3, r2
 800375c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003760:	461a      	mov	r2, r3
 8003762:	2320      	movs	r3, #32
 8003764:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003766:	693b      	ldr	r3, [r7, #16]
 8003768:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800376c:	2b00      	cmp	r3, #0
 800376e:	d009      	beq.n	8003784 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003772:	015a      	lsls	r2, r3, #5
 8003774:	69fb      	ldr	r3, [r7, #28]
 8003776:	4413      	add	r3, r2
 8003778:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800377c:	461a      	mov	r2, r3
 800377e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003782:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003786:	3301      	adds	r3, #1
 8003788:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800378a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800378c:	085b      	lsrs	r3, r3, #1
 800378e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003790:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003792:	2b00      	cmp	r3, #0
 8003794:	d199      	bne.n	80036ca <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	4618      	mov	r0, r3
 800379c:	f004 f933 	bl	8007a06 <USB_ReadInterrupts>
 80037a0:	4603      	mov	r3, r0
 80037a2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80037a6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80037aa:	f040 80c0 	bne.w	800392e <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	4618      	mov	r0, r3
 80037b4:	f004 f954 	bl	8007a60 <USB_ReadDevAllInEpInterrupt>
 80037b8:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80037ba:	2300      	movs	r3, #0
 80037bc:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80037be:	e0b2      	b.n	8003926 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80037c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037c2:	f003 0301 	and.w	r3, r3, #1
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	f000 80a7 	beq.w	800391a <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037d2:	b2d2      	uxtb	r2, r2
 80037d4:	4611      	mov	r1, r2
 80037d6:	4618      	mov	r0, r3
 80037d8:	f004 f97a 	bl	8007ad0 <USB_ReadDevInEPInterrupt>
 80037dc:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80037de:	693b      	ldr	r3, [r7, #16]
 80037e0:	f003 0301 	and.w	r3, r3, #1
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d057      	beq.n	8003898 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80037e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037ea:	f003 030f 	and.w	r3, r3, #15
 80037ee:	2201      	movs	r2, #1
 80037f0:	fa02 f303 	lsl.w	r3, r2, r3
 80037f4:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80037f6:	69fb      	ldr	r3, [r7, #28]
 80037f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80037fc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	43db      	mvns	r3, r3
 8003802:	69f9      	ldr	r1, [r7, #28]
 8003804:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003808:	4013      	ands	r3, r2
 800380a:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800380c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800380e:	015a      	lsls	r2, r3, #5
 8003810:	69fb      	ldr	r3, [r7, #28]
 8003812:	4413      	add	r3, r2
 8003814:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003818:	461a      	mov	r2, r3
 800381a:	2301      	movs	r3, #1
 800381c:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	691b      	ldr	r3, [r3, #16]
 8003822:	2b01      	cmp	r3, #1
 8003824:	d132      	bne.n	800388c <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003826:	6879      	ldr	r1, [r7, #4]
 8003828:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800382a:	4613      	mov	r3, r2
 800382c:	00db      	lsls	r3, r3, #3
 800382e:	1a9b      	subs	r3, r3, r2
 8003830:	009b      	lsls	r3, r3, #2
 8003832:	440b      	add	r3, r1
 8003834:	3348      	adds	r3, #72	; 0x48
 8003836:	6819      	ldr	r1, [r3, #0]
 8003838:	6878      	ldr	r0, [r7, #4]
 800383a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800383c:	4613      	mov	r3, r2
 800383e:	00db      	lsls	r3, r3, #3
 8003840:	1a9b      	subs	r3, r3, r2
 8003842:	009b      	lsls	r3, r3, #2
 8003844:	4403      	add	r3, r0
 8003846:	3344      	adds	r3, #68	; 0x44
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	4419      	add	r1, r3
 800384c:	6878      	ldr	r0, [r7, #4]
 800384e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003850:	4613      	mov	r3, r2
 8003852:	00db      	lsls	r3, r3, #3
 8003854:	1a9b      	subs	r3, r3, r2
 8003856:	009b      	lsls	r3, r3, #2
 8003858:	4403      	add	r3, r0
 800385a:	3348      	adds	r3, #72	; 0x48
 800385c:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800385e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003860:	2b00      	cmp	r3, #0
 8003862:	d113      	bne.n	800388c <HAL_PCD_IRQHandler+0x31c>
 8003864:	6879      	ldr	r1, [r7, #4]
 8003866:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003868:	4613      	mov	r3, r2
 800386a:	00db      	lsls	r3, r3, #3
 800386c:	1a9b      	subs	r3, r3, r2
 800386e:	009b      	lsls	r3, r3, #2
 8003870:	440b      	add	r3, r1
 8003872:	3350      	adds	r3, #80	; 0x50
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	2b00      	cmp	r3, #0
 8003878:	d108      	bne.n	800388c <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	6818      	ldr	r0, [r3, #0]
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003884:	461a      	mov	r2, r3
 8003886:	2101      	movs	r1, #1
 8003888:	f004 f982 	bl	8007b90 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800388c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800388e:	b2db      	uxtb	r3, r3
 8003890:	4619      	mov	r1, r3
 8003892:	6878      	ldr	r0, [r7, #4]
 8003894:	f006 f8e9 	bl	8009a6a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003898:	693b      	ldr	r3, [r7, #16]
 800389a:	f003 0308 	and.w	r3, r3, #8
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d008      	beq.n	80038b4 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80038a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038a4:	015a      	lsls	r2, r3, #5
 80038a6:	69fb      	ldr	r3, [r7, #28]
 80038a8:	4413      	add	r3, r2
 80038aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80038ae:	461a      	mov	r2, r3
 80038b0:	2308      	movs	r3, #8
 80038b2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80038b4:	693b      	ldr	r3, [r7, #16]
 80038b6:	f003 0310 	and.w	r3, r3, #16
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d008      	beq.n	80038d0 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80038be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038c0:	015a      	lsls	r2, r3, #5
 80038c2:	69fb      	ldr	r3, [r7, #28]
 80038c4:	4413      	add	r3, r2
 80038c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80038ca:	461a      	mov	r2, r3
 80038cc:	2310      	movs	r3, #16
 80038ce:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80038d0:	693b      	ldr	r3, [r7, #16]
 80038d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d008      	beq.n	80038ec <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80038da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038dc:	015a      	lsls	r2, r3, #5
 80038de:	69fb      	ldr	r3, [r7, #28]
 80038e0:	4413      	add	r3, r2
 80038e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80038e6:	461a      	mov	r2, r3
 80038e8:	2340      	movs	r3, #64	; 0x40
 80038ea:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80038ec:	693b      	ldr	r3, [r7, #16]
 80038ee:	f003 0302 	and.w	r3, r3, #2
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d008      	beq.n	8003908 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80038f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038f8:	015a      	lsls	r2, r3, #5
 80038fa:	69fb      	ldr	r3, [r7, #28]
 80038fc:	4413      	add	r3, r2
 80038fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003902:	461a      	mov	r2, r3
 8003904:	2302      	movs	r3, #2
 8003906:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003908:	693b      	ldr	r3, [r7, #16]
 800390a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800390e:	2b00      	cmp	r3, #0
 8003910:	d003      	beq.n	800391a <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003912:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003914:	6878      	ldr	r0, [r7, #4]
 8003916:	f000 fc48 	bl	80041aa <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800391a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800391c:	3301      	adds	r3, #1
 800391e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003920:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003922:	085b      	lsrs	r3, r3, #1
 8003924:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003926:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003928:	2b00      	cmp	r3, #0
 800392a:	f47f af49 	bne.w	80037c0 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	4618      	mov	r0, r3
 8003934:	f004 f867 	bl	8007a06 <USB_ReadInterrupts>
 8003938:	4603      	mov	r3, r0
 800393a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800393e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003942:	d122      	bne.n	800398a <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003944:	69fb      	ldr	r3, [r7, #28]
 8003946:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800394a:	685b      	ldr	r3, [r3, #4]
 800394c:	69fa      	ldr	r2, [r7, #28]
 800394e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003952:	f023 0301 	bic.w	r3, r3, #1
 8003956:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 800395e:	2b01      	cmp	r3, #1
 8003960:	d108      	bne.n	8003974 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	2200      	movs	r2, #0
 8003966:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800396a:	2100      	movs	r1, #0
 800396c:	6878      	ldr	r0, [r7, #4]
 800396e:	f006 facb 	bl	8009f08 <HAL_PCDEx_LPM_Callback>
 8003972:	e002      	b.n	800397a <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003974:	6878      	ldr	r0, [r7, #4]
 8003976:	f006 f8ef 	bl	8009b58 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	695a      	ldr	r2, [r3, #20]
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8003988:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	4618      	mov	r0, r3
 8003990:	f004 f839 	bl	8007a06 <USB_ReadInterrupts>
 8003994:	4603      	mov	r3, r0
 8003996:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800399a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800399e:	d112      	bne.n	80039c6 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80039a0:	69fb      	ldr	r3, [r7, #28]
 80039a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80039a6:	689b      	ldr	r3, [r3, #8]
 80039a8:	f003 0301 	and.w	r3, r3, #1
 80039ac:	2b01      	cmp	r3, #1
 80039ae:	d102      	bne.n	80039b6 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80039b0:	6878      	ldr	r0, [r7, #4]
 80039b2:	f006 f8ab 	bl	8009b0c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	695a      	ldr	r2, [r3, #20]
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80039c4:	615a      	str	r2, [r3, #20]
    }
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	4618      	mov	r0, r3
 80039cc:	f004 f81b 	bl	8007a06 <USB_ReadInterrupts>
 80039d0:	4603      	mov	r3, r0
 80039d2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80039d6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80039da:	d121      	bne.n	8003a20 <HAL_PCD_IRQHandler+0x4b0>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	695a      	ldr	r2, [r3, #20]
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 80039ea:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d111      	bne.n	8003a1a <HAL_PCD_IRQHandler+0x4aa>
      {
        hpcd->LPM_State = LPM_L1;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	2201      	movs	r2, #1
 80039fa:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a04:	089b      	lsrs	r3, r3, #2
 8003a06:	f003 020f 	and.w	r2, r3, #15
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8003a10:	2101      	movs	r1, #1
 8003a12:	6878      	ldr	r0, [r7, #4]
 8003a14:	f006 fa78 	bl	8009f08 <HAL_PCDEx_LPM_Callback>
 8003a18:	e002      	b.n	8003a20 <HAL_PCD_IRQHandler+0x4b0>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003a1a:	6878      	ldr	r0, [r7, #4]
 8003a1c:	f006 f876 	bl	8009b0c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	4618      	mov	r0, r3
 8003a26:	f003 ffee 	bl	8007a06 <USB_ReadInterrupts>
 8003a2a:	4603      	mov	r3, r0
 8003a2c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003a30:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a34:	f040 80c7 	bne.w	8003bc6 <HAL_PCD_IRQHandler+0x656>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003a38:	69fb      	ldr	r3, [r7, #28]
 8003a3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a3e:	685b      	ldr	r3, [r3, #4]
 8003a40:	69fa      	ldr	r2, [r7, #28]
 8003a42:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003a46:	f023 0301 	bic.w	r3, r3, #1
 8003a4a:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	2110      	movs	r1, #16
 8003a52:	4618      	mov	r0, r3
 8003a54:	f003 f8bc 	bl	8006bd0 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003a58:	2300      	movs	r3, #0
 8003a5a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003a5c:	e056      	b.n	8003b0c <HAL_PCD_IRQHandler+0x59c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003a5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a60:	015a      	lsls	r2, r3, #5
 8003a62:	69fb      	ldr	r3, [r7, #28]
 8003a64:	4413      	add	r3, r2
 8003a66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a6a:	461a      	mov	r2, r3
 8003a6c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003a70:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003a72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a74:	015a      	lsls	r2, r3, #5
 8003a76:	69fb      	ldr	r3, [r7, #28]
 8003a78:	4413      	add	r3, r2
 8003a7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003a82:	0151      	lsls	r1, r2, #5
 8003a84:	69fa      	ldr	r2, [r7, #28]
 8003a86:	440a      	add	r2, r1
 8003a88:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003a8c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003a90:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003a92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a94:	015a      	lsls	r2, r3, #5
 8003a96:	69fb      	ldr	r3, [r7, #28]
 8003a98:	4413      	add	r3, r2
 8003a9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003aa2:	0151      	lsls	r1, r2, #5
 8003aa4:	69fa      	ldr	r2, [r7, #28]
 8003aa6:	440a      	add	r2, r1
 8003aa8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003aac:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003ab0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003ab2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ab4:	015a      	lsls	r2, r3, #5
 8003ab6:	69fb      	ldr	r3, [r7, #28]
 8003ab8:	4413      	add	r3, r2
 8003aba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003abe:	461a      	mov	r2, r3
 8003ac0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003ac4:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003ac6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ac8:	015a      	lsls	r2, r3, #5
 8003aca:	69fb      	ldr	r3, [r7, #28]
 8003acc:	4413      	add	r3, r2
 8003ace:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003ad6:	0151      	lsls	r1, r2, #5
 8003ad8:	69fa      	ldr	r2, [r7, #28]
 8003ada:	440a      	add	r2, r1
 8003adc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003ae0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003ae4:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003ae6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ae8:	015a      	lsls	r2, r3, #5
 8003aea:	69fb      	ldr	r3, [r7, #28]
 8003aec:	4413      	add	r3, r2
 8003aee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003af6:	0151      	lsls	r1, r2, #5
 8003af8:	69fa      	ldr	r2, [r7, #28]
 8003afa:	440a      	add	r2, r1
 8003afc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003b00:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003b04:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003b06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b08:	3301      	adds	r3, #1
 8003b0a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	685b      	ldr	r3, [r3, #4]
 8003b10:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003b12:	429a      	cmp	r2, r3
 8003b14:	d3a3      	bcc.n	8003a5e <HAL_PCD_IRQHandler+0x4ee>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003b16:	69fb      	ldr	r3, [r7, #28]
 8003b18:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b1c:	69db      	ldr	r3, [r3, #28]
 8003b1e:	69fa      	ldr	r2, [r7, #28]
 8003b20:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003b24:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8003b28:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d016      	beq.n	8003b60 <HAL_PCD_IRQHandler+0x5f0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003b32:	69fb      	ldr	r3, [r7, #28]
 8003b34:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b38:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b3c:	69fa      	ldr	r2, [r7, #28]
 8003b3e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003b42:	f043 030b 	orr.w	r3, r3, #11
 8003b46:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003b4a:	69fb      	ldr	r3, [r7, #28]
 8003b4c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b52:	69fa      	ldr	r2, [r7, #28]
 8003b54:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003b58:	f043 030b 	orr.w	r3, r3, #11
 8003b5c:	6453      	str	r3, [r2, #68]	; 0x44
 8003b5e:	e015      	b.n	8003b8c <HAL_PCD_IRQHandler+0x61c>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003b60:	69fb      	ldr	r3, [r7, #28]
 8003b62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b66:	695b      	ldr	r3, [r3, #20]
 8003b68:	69fa      	ldr	r2, [r7, #28]
 8003b6a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003b6e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003b72:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8003b76:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003b78:	69fb      	ldr	r3, [r7, #28]
 8003b7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b7e:	691b      	ldr	r3, [r3, #16]
 8003b80:	69fa      	ldr	r2, [r7, #28]
 8003b82:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003b86:	f043 030b 	orr.w	r3, r3, #11
 8003b8a:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003b8c:	69fb      	ldr	r3, [r7, #28]
 8003b8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	69fa      	ldr	r2, [r7, #28]
 8003b96:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003b9a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003b9e:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6818      	ldr	r0, [r3, #0]
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	691b      	ldr	r3, [r3, #16]
 8003ba8:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003bb0:	461a      	mov	r2, r3
 8003bb2:	f003 ffed 	bl	8007b90 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	695a      	ldr	r2, [r3, #20]
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8003bc4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	4618      	mov	r0, r3
 8003bcc:	f003 ff1b 	bl	8007a06 <USB_ReadInterrupts>
 8003bd0:	4603      	mov	r3, r0
 8003bd2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003bd6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003bda:	d124      	bne.n	8003c26 <HAL_PCD_IRQHandler+0x6b6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	4618      	mov	r0, r3
 8003be2:	f003 ffb1 	bl	8007b48 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	4618      	mov	r0, r3
 8003bec:	f003 f851 	bl	8006c92 <USB_GetDevSpeed>
 8003bf0:	4603      	mov	r3, r0
 8003bf2:	461a      	mov	r2, r3
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681c      	ldr	r4, [r3, #0]
 8003bfc:	f000 fe66 	bl	80048cc <HAL_RCC_GetHCLKFreq>
 8003c00:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003c06:	b2db      	uxtb	r3, r3
 8003c08:	461a      	mov	r2, r3
 8003c0a:	4620      	mov	r0, r4
 8003c0c:	f002 fd94 	bl	8006738 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003c10:	6878      	ldr	r0, [r7, #4]
 8003c12:	f005 ff52 	bl	8009aba <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	695a      	ldr	r2, [r3, #20]
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8003c24:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	f003 feeb 	bl	8007a06 <USB_ReadInterrupts>
 8003c30:	4603      	mov	r3, r0
 8003c32:	f003 0308 	and.w	r3, r3, #8
 8003c36:	2b08      	cmp	r3, #8
 8003c38:	d10a      	bne.n	8003c50 <HAL_PCD_IRQHandler+0x6e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003c3a:	6878      	ldr	r0, [r7, #4]
 8003c3c:	f005 ff2f 	bl	8009a9e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	695a      	ldr	r2, [r3, #20]
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f002 0208 	and.w	r2, r2, #8
 8003c4e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	4618      	mov	r0, r3
 8003c56:	f003 fed6 	bl	8007a06 <USB_ReadInterrupts>
 8003c5a:	4603      	mov	r3, r0
 8003c5c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003c60:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003c64:	d10f      	bne.n	8003c86 <HAL_PCD_IRQHandler+0x716>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8003c66:	2300      	movs	r3, #0
 8003c68:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c6c:	b2db      	uxtb	r3, r3
 8003c6e:	4619      	mov	r1, r3
 8003c70:	6878      	ldr	r0, [r7, #4]
 8003c72:	f005 ff91 	bl	8009b98 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	695a      	ldr	r2, [r3, #20]
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8003c84:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	f003 febb 	bl	8007a06 <USB_ReadInterrupts>
 8003c90:	4603      	mov	r3, r0
 8003c92:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003c96:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003c9a:	d10f      	bne.n	8003cbc <HAL_PCD_IRQHandler+0x74c>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8003c9c:	2300      	movs	r3, #0
 8003c9e:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ca2:	b2db      	uxtb	r3, r3
 8003ca4:	4619      	mov	r1, r3
 8003ca6:	6878      	ldr	r0, [r7, #4]
 8003ca8:	f005 ff64 	bl	8009b74 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	695a      	ldr	r2, [r3, #20]
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8003cba:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	f003 fea0 	bl	8007a06 <USB_ReadInterrupts>
 8003cc6:	4603      	mov	r3, r0
 8003cc8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003ccc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003cd0:	d10a      	bne.n	8003ce8 <HAL_PCD_IRQHandler+0x778>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003cd2:	6878      	ldr	r0, [r7, #4]
 8003cd4:	f005 ff72 	bl	8009bbc <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	695a      	ldr	r2, [r3, #20]
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003ce6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	4618      	mov	r0, r3
 8003cee:	f003 fe8a 	bl	8007a06 <USB_ReadInterrupts>
 8003cf2:	4603      	mov	r3, r0
 8003cf4:	f003 0304 	and.w	r3, r3, #4
 8003cf8:	2b04      	cmp	r3, #4
 8003cfa:	d115      	bne.n	8003d28 <HAL_PCD_IRQHandler+0x7b8>
    {
      temp = hpcd->Instance->GOTGINT;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	685b      	ldr	r3, [r3, #4]
 8003d02:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003d04:	69bb      	ldr	r3, [r7, #24]
 8003d06:	f003 0304 	and.w	r3, r3, #4
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d002      	beq.n	8003d14 <HAL_PCD_IRQHandler+0x7a4>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003d0e:	6878      	ldr	r0, [r7, #4]
 8003d10:	f005 ff62 	bl	8009bd8 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	6859      	ldr	r1, [r3, #4]
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	69ba      	ldr	r2, [r7, #24]
 8003d20:	430a      	orrs	r2, r1
 8003d22:	605a      	str	r2, [r3, #4]
 8003d24:	e000      	b.n	8003d28 <HAL_PCD_IRQHandler+0x7b8>
      return;
 8003d26:	bf00      	nop
    }
  }
}
 8003d28:	3734      	adds	r7, #52	; 0x34
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	bd90      	pop	{r4, r7, pc}

08003d2e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003d2e:	b580      	push	{r7, lr}
 8003d30:	b082      	sub	sp, #8
 8003d32:	af00      	add	r7, sp, #0
 8003d34:	6078      	str	r0, [r7, #4]
 8003d36:	460b      	mov	r3, r1
 8003d38:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003d40:	2b01      	cmp	r3, #1
 8003d42:	d101      	bne.n	8003d48 <HAL_PCD_SetAddress+0x1a>
 8003d44:	2302      	movs	r3, #2
 8003d46:	e013      	b.n	8003d70 <HAL_PCD_SetAddress+0x42>
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2201      	movs	r2, #1
 8003d4c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	78fa      	ldrb	r2, [r7, #3]
 8003d54:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	78fa      	ldrb	r2, [r7, #3]
 8003d5e:	4611      	mov	r1, r2
 8003d60:	4618      	mov	r0, r3
 8003d62:	f003 fde8 	bl	8007936 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	2200      	movs	r2, #0
 8003d6a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003d6e:	2300      	movs	r3, #0
}
 8003d70:	4618      	mov	r0, r3
 8003d72:	3708      	adds	r7, #8
 8003d74:	46bd      	mov	sp, r7
 8003d76:	bd80      	pop	{r7, pc}

08003d78 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	b084      	sub	sp, #16
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]
 8003d80:	4608      	mov	r0, r1
 8003d82:	4611      	mov	r1, r2
 8003d84:	461a      	mov	r2, r3
 8003d86:	4603      	mov	r3, r0
 8003d88:	70fb      	strb	r3, [r7, #3]
 8003d8a:	460b      	mov	r3, r1
 8003d8c:	803b      	strh	r3, [r7, #0]
 8003d8e:	4613      	mov	r3, r2
 8003d90:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003d92:	2300      	movs	r3, #0
 8003d94:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003d96:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	da0f      	bge.n	8003dbe <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003d9e:	78fb      	ldrb	r3, [r7, #3]
 8003da0:	f003 020f 	and.w	r2, r3, #15
 8003da4:	4613      	mov	r3, r2
 8003da6:	00db      	lsls	r3, r3, #3
 8003da8:	1a9b      	subs	r3, r3, r2
 8003daa:	009b      	lsls	r3, r3, #2
 8003dac:	3338      	adds	r3, #56	; 0x38
 8003dae:	687a      	ldr	r2, [r7, #4]
 8003db0:	4413      	add	r3, r2
 8003db2:	3304      	adds	r3, #4
 8003db4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	2201      	movs	r2, #1
 8003dba:	705a      	strb	r2, [r3, #1]
 8003dbc:	e00f      	b.n	8003dde <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003dbe:	78fb      	ldrb	r3, [r7, #3]
 8003dc0:	f003 020f 	and.w	r2, r3, #15
 8003dc4:	4613      	mov	r3, r2
 8003dc6:	00db      	lsls	r3, r3, #3
 8003dc8:	1a9b      	subs	r3, r3, r2
 8003dca:	009b      	lsls	r3, r3, #2
 8003dcc:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003dd0:	687a      	ldr	r2, [r7, #4]
 8003dd2:	4413      	add	r3, r2
 8003dd4:	3304      	adds	r3, #4
 8003dd6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	2200      	movs	r2, #0
 8003ddc:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003dde:	78fb      	ldrb	r3, [r7, #3]
 8003de0:	f003 030f 	and.w	r3, r3, #15
 8003de4:	b2da      	uxtb	r2, r3
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003dea:	883a      	ldrh	r2, [r7, #0]
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	78ba      	ldrb	r2, [r7, #2]
 8003df4:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	785b      	ldrb	r3, [r3, #1]
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d004      	beq.n	8003e08 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	781b      	ldrb	r3, [r3, #0]
 8003e02:	b29a      	uxth	r2, r3
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003e08:	78bb      	ldrb	r3, [r7, #2]
 8003e0a:	2b02      	cmp	r3, #2
 8003e0c:	d102      	bne.n	8003e14 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	2200      	movs	r2, #0
 8003e12:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003e1a:	2b01      	cmp	r3, #1
 8003e1c:	d101      	bne.n	8003e22 <HAL_PCD_EP_Open+0xaa>
 8003e1e:	2302      	movs	r3, #2
 8003e20:	e00e      	b.n	8003e40 <HAL_PCD_EP_Open+0xc8>
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	2201      	movs	r2, #1
 8003e26:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	68f9      	ldr	r1, [r7, #12]
 8003e30:	4618      	mov	r0, r3
 8003e32:	f002 ff53 	bl	8006cdc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	2200      	movs	r2, #0
 8003e3a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8003e3e:	7afb      	ldrb	r3, [r7, #11]
}
 8003e40:	4618      	mov	r0, r3
 8003e42:	3710      	adds	r7, #16
 8003e44:	46bd      	mov	sp, r7
 8003e46:	bd80      	pop	{r7, pc}

08003e48 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003e48:	b580      	push	{r7, lr}
 8003e4a:	b084      	sub	sp, #16
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	6078      	str	r0, [r7, #4]
 8003e50:	460b      	mov	r3, r1
 8003e52:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003e54:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	da0f      	bge.n	8003e7c <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003e5c:	78fb      	ldrb	r3, [r7, #3]
 8003e5e:	f003 020f 	and.w	r2, r3, #15
 8003e62:	4613      	mov	r3, r2
 8003e64:	00db      	lsls	r3, r3, #3
 8003e66:	1a9b      	subs	r3, r3, r2
 8003e68:	009b      	lsls	r3, r3, #2
 8003e6a:	3338      	adds	r3, #56	; 0x38
 8003e6c:	687a      	ldr	r2, [r7, #4]
 8003e6e:	4413      	add	r3, r2
 8003e70:	3304      	adds	r3, #4
 8003e72:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	2201      	movs	r2, #1
 8003e78:	705a      	strb	r2, [r3, #1]
 8003e7a:	e00f      	b.n	8003e9c <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003e7c:	78fb      	ldrb	r3, [r7, #3]
 8003e7e:	f003 020f 	and.w	r2, r3, #15
 8003e82:	4613      	mov	r3, r2
 8003e84:	00db      	lsls	r3, r3, #3
 8003e86:	1a9b      	subs	r3, r3, r2
 8003e88:	009b      	lsls	r3, r3, #2
 8003e8a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003e8e:	687a      	ldr	r2, [r7, #4]
 8003e90:	4413      	add	r3, r2
 8003e92:	3304      	adds	r3, #4
 8003e94:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	2200      	movs	r2, #0
 8003e9a:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003e9c:	78fb      	ldrb	r3, [r7, #3]
 8003e9e:	f003 030f 	and.w	r3, r3, #15
 8003ea2:	b2da      	uxtb	r2, r3
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003eae:	2b01      	cmp	r3, #1
 8003eb0:	d101      	bne.n	8003eb6 <HAL_PCD_EP_Close+0x6e>
 8003eb2:	2302      	movs	r3, #2
 8003eb4:	e00e      	b.n	8003ed4 <HAL_PCD_EP_Close+0x8c>
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	2201      	movs	r2, #1
 8003eba:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	68f9      	ldr	r1, [r7, #12]
 8003ec4:	4618      	mov	r0, r3
 8003ec6:	f002 ff91 	bl	8006dec <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	2200      	movs	r2, #0
 8003ece:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8003ed2:	2300      	movs	r3, #0
}
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	3710      	adds	r7, #16
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	bd80      	pop	{r7, pc}

08003edc <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003edc:	b580      	push	{r7, lr}
 8003ede:	b086      	sub	sp, #24
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	60f8      	str	r0, [r7, #12]
 8003ee4:	607a      	str	r2, [r7, #4]
 8003ee6:	603b      	str	r3, [r7, #0]
 8003ee8:	460b      	mov	r3, r1
 8003eea:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003eec:	7afb      	ldrb	r3, [r7, #11]
 8003eee:	f003 020f 	and.w	r2, r3, #15
 8003ef2:	4613      	mov	r3, r2
 8003ef4:	00db      	lsls	r3, r3, #3
 8003ef6:	1a9b      	subs	r3, r3, r2
 8003ef8:	009b      	lsls	r3, r3, #2
 8003efa:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003efe:	68fa      	ldr	r2, [r7, #12]
 8003f00:	4413      	add	r3, r2
 8003f02:	3304      	adds	r3, #4
 8003f04:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003f06:	697b      	ldr	r3, [r7, #20]
 8003f08:	687a      	ldr	r2, [r7, #4]
 8003f0a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003f0c:	697b      	ldr	r3, [r7, #20]
 8003f0e:	683a      	ldr	r2, [r7, #0]
 8003f10:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8003f12:	697b      	ldr	r3, [r7, #20]
 8003f14:	2200      	movs	r2, #0
 8003f16:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8003f18:	697b      	ldr	r3, [r7, #20]
 8003f1a:	2200      	movs	r2, #0
 8003f1c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003f1e:	7afb      	ldrb	r3, [r7, #11]
 8003f20:	f003 030f 	and.w	r3, r3, #15
 8003f24:	b2da      	uxtb	r2, r3
 8003f26:	697b      	ldr	r3, [r7, #20]
 8003f28:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	691b      	ldr	r3, [r3, #16]
 8003f2e:	2b01      	cmp	r3, #1
 8003f30:	d102      	bne.n	8003f38 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003f32:	687a      	ldr	r2, [r7, #4]
 8003f34:	697b      	ldr	r3, [r7, #20]
 8003f36:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003f38:	7afb      	ldrb	r3, [r7, #11]
 8003f3a:	f003 030f 	and.w	r3, r3, #15
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d109      	bne.n	8003f56 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	6818      	ldr	r0, [r3, #0]
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	691b      	ldr	r3, [r3, #16]
 8003f4a:	b2db      	uxtb	r3, r3
 8003f4c:	461a      	mov	r2, r3
 8003f4e:	6979      	ldr	r1, [r7, #20]
 8003f50:	f003 fa6c 	bl	800742c <USB_EP0StartXfer>
 8003f54:	e008      	b.n	8003f68 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	6818      	ldr	r0, [r3, #0]
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	691b      	ldr	r3, [r3, #16]
 8003f5e:	b2db      	uxtb	r3, r3
 8003f60:	461a      	mov	r2, r3
 8003f62:	6979      	ldr	r1, [r7, #20]
 8003f64:	f003 f81e 	bl	8006fa4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003f68:	2300      	movs	r3, #0
}
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	3718      	adds	r7, #24
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	bd80      	pop	{r7, pc}

08003f72 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003f72:	b480      	push	{r7}
 8003f74:	b083      	sub	sp, #12
 8003f76:	af00      	add	r7, sp, #0
 8003f78:	6078      	str	r0, [r7, #4]
 8003f7a:	460b      	mov	r3, r1
 8003f7c:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003f7e:	78fb      	ldrb	r3, [r7, #3]
 8003f80:	f003 020f 	and.w	r2, r3, #15
 8003f84:	6879      	ldr	r1, [r7, #4]
 8003f86:	4613      	mov	r3, r2
 8003f88:	00db      	lsls	r3, r3, #3
 8003f8a:	1a9b      	subs	r3, r3, r2
 8003f8c:	009b      	lsls	r3, r3, #2
 8003f8e:	440b      	add	r3, r1
 8003f90:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8003f94:	681b      	ldr	r3, [r3, #0]
}
 8003f96:	4618      	mov	r0, r3
 8003f98:	370c      	adds	r7, #12
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa0:	4770      	bx	lr

08003fa2 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003fa2:	b580      	push	{r7, lr}
 8003fa4:	b086      	sub	sp, #24
 8003fa6:	af00      	add	r7, sp, #0
 8003fa8:	60f8      	str	r0, [r7, #12]
 8003faa:	607a      	str	r2, [r7, #4]
 8003fac:	603b      	str	r3, [r7, #0]
 8003fae:	460b      	mov	r3, r1
 8003fb0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003fb2:	7afb      	ldrb	r3, [r7, #11]
 8003fb4:	f003 020f 	and.w	r2, r3, #15
 8003fb8:	4613      	mov	r3, r2
 8003fba:	00db      	lsls	r3, r3, #3
 8003fbc:	1a9b      	subs	r3, r3, r2
 8003fbe:	009b      	lsls	r3, r3, #2
 8003fc0:	3338      	adds	r3, #56	; 0x38
 8003fc2:	68fa      	ldr	r2, [r7, #12]
 8003fc4:	4413      	add	r3, r2
 8003fc6:	3304      	adds	r3, #4
 8003fc8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003fca:	697b      	ldr	r3, [r7, #20]
 8003fcc:	687a      	ldr	r2, [r7, #4]
 8003fce:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003fd0:	697b      	ldr	r3, [r7, #20]
 8003fd2:	683a      	ldr	r2, [r7, #0]
 8003fd4:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8003fd6:	697b      	ldr	r3, [r7, #20]
 8003fd8:	2200      	movs	r2, #0
 8003fda:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8003fdc:	697b      	ldr	r3, [r7, #20]
 8003fde:	2201      	movs	r2, #1
 8003fe0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003fe2:	7afb      	ldrb	r3, [r7, #11]
 8003fe4:	f003 030f 	and.w	r3, r3, #15
 8003fe8:	b2da      	uxtb	r2, r3
 8003fea:	697b      	ldr	r3, [r7, #20]
 8003fec:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	691b      	ldr	r3, [r3, #16]
 8003ff2:	2b01      	cmp	r3, #1
 8003ff4:	d102      	bne.n	8003ffc <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003ff6:	687a      	ldr	r2, [r7, #4]
 8003ff8:	697b      	ldr	r3, [r7, #20]
 8003ffa:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003ffc:	7afb      	ldrb	r3, [r7, #11]
 8003ffe:	f003 030f 	and.w	r3, r3, #15
 8004002:	2b00      	cmp	r3, #0
 8004004:	d109      	bne.n	800401a <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	6818      	ldr	r0, [r3, #0]
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	691b      	ldr	r3, [r3, #16]
 800400e:	b2db      	uxtb	r3, r3
 8004010:	461a      	mov	r2, r3
 8004012:	6979      	ldr	r1, [r7, #20]
 8004014:	f003 fa0a 	bl	800742c <USB_EP0StartXfer>
 8004018:	e008      	b.n	800402c <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	6818      	ldr	r0, [r3, #0]
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	691b      	ldr	r3, [r3, #16]
 8004022:	b2db      	uxtb	r3, r3
 8004024:	461a      	mov	r2, r3
 8004026:	6979      	ldr	r1, [r7, #20]
 8004028:	f002 ffbc 	bl	8006fa4 <USB_EPStartXfer>
  }

  return HAL_OK;
 800402c:	2300      	movs	r3, #0
}
 800402e:	4618      	mov	r0, r3
 8004030:	3718      	adds	r7, #24
 8004032:	46bd      	mov	sp, r7
 8004034:	bd80      	pop	{r7, pc}

08004036 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004036:	b580      	push	{r7, lr}
 8004038:	b084      	sub	sp, #16
 800403a:	af00      	add	r7, sp, #0
 800403c:	6078      	str	r0, [r7, #4]
 800403e:	460b      	mov	r3, r1
 8004040:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004042:	78fb      	ldrb	r3, [r7, #3]
 8004044:	f003 020f 	and.w	r2, r3, #15
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	685b      	ldr	r3, [r3, #4]
 800404c:	429a      	cmp	r2, r3
 800404e:	d901      	bls.n	8004054 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004050:	2301      	movs	r3, #1
 8004052:	e050      	b.n	80040f6 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004054:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004058:	2b00      	cmp	r3, #0
 800405a:	da0f      	bge.n	800407c <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800405c:	78fb      	ldrb	r3, [r7, #3]
 800405e:	f003 020f 	and.w	r2, r3, #15
 8004062:	4613      	mov	r3, r2
 8004064:	00db      	lsls	r3, r3, #3
 8004066:	1a9b      	subs	r3, r3, r2
 8004068:	009b      	lsls	r3, r3, #2
 800406a:	3338      	adds	r3, #56	; 0x38
 800406c:	687a      	ldr	r2, [r7, #4]
 800406e:	4413      	add	r3, r2
 8004070:	3304      	adds	r3, #4
 8004072:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	2201      	movs	r2, #1
 8004078:	705a      	strb	r2, [r3, #1]
 800407a:	e00d      	b.n	8004098 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800407c:	78fa      	ldrb	r2, [r7, #3]
 800407e:	4613      	mov	r3, r2
 8004080:	00db      	lsls	r3, r3, #3
 8004082:	1a9b      	subs	r3, r3, r2
 8004084:	009b      	lsls	r3, r3, #2
 8004086:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800408a:	687a      	ldr	r2, [r7, #4]
 800408c:	4413      	add	r3, r2
 800408e:	3304      	adds	r3, #4
 8004090:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	2200      	movs	r2, #0
 8004096:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	2201      	movs	r2, #1
 800409c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800409e:	78fb      	ldrb	r3, [r7, #3]
 80040a0:	f003 030f 	and.w	r3, r3, #15
 80040a4:	b2da      	uxtb	r2, r3
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80040b0:	2b01      	cmp	r3, #1
 80040b2:	d101      	bne.n	80040b8 <HAL_PCD_EP_SetStall+0x82>
 80040b4:	2302      	movs	r3, #2
 80040b6:	e01e      	b.n	80040f6 <HAL_PCD_EP_SetStall+0xc0>
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	2201      	movs	r2, #1
 80040bc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	68f9      	ldr	r1, [r7, #12]
 80040c6:	4618      	mov	r0, r3
 80040c8:	f003 fb61 	bl	800778e <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80040cc:	78fb      	ldrb	r3, [r7, #3]
 80040ce:	f003 030f 	and.w	r3, r3, #15
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d10a      	bne.n	80040ec <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6818      	ldr	r0, [r3, #0]
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	691b      	ldr	r3, [r3, #16]
 80040de:	b2d9      	uxtb	r1, r3
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80040e6:	461a      	mov	r2, r3
 80040e8:	f003 fd52 	bl	8007b90 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2200      	movs	r2, #0
 80040f0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80040f4:	2300      	movs	r3, #0
}
 80040f6:	4618      	mov	r0, r3
 80040f8:	3710      	adds	r7, #16
 80040fa:	46bd      	mov	sp, r7
 80040fc:	bd80      	pop	{r7, pc}

080040fe <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80040fe:	b580      	push	{r7, lr}
 8004100:	b084      	sub	sp, #16
 8004102:	af00      	add	r7, sp, #0
 8004104:	6078      	str	r0, [r7, #4]
 8004106:	460b      	mov	r3, r1
 8004108:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800410a:	78fb      	ldrb	r3, [r7, #3]
 800410c:	f003 020f 	and.w	r2, r3, #15
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	685b      	ldr	r3, [r3, #4]
 8004114:	429a      	cmp	r2, r3
 8004116:	d901      	bls.n	800411c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004118:	2301      	movs	r3, #1
 800411a:	e042      	b.n	80041a2 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800411c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004120:	2b00      	cmp	r3, #0
 8004122:	da0f      	bge.n	8004144 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004124:	78fb      	ldrb	r3, [r7, #3]
 8004126:	f003 020f 	and.w	r2, r3, #15
 800412a:	4613      	mov	r3, r2
 800412c:	00db      	lsls	r3, r3, #3
 800412e:	1a9b      	subs	r3, r3, r2
 8004130:	009b      	lsls	r3, r3, #2
 8004132:	3338      	adds	r3, #56	; 0x38
 8004134:	687a      	ldr	r2, [r7, #4]
 8004136:	4413      	add	r3, r2
 8004138:	3304      	adds	r3, #4
 800413a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	2201      	movs	r2, #1
 8004140:	705a      	strb	r2, [r3, #1]
 8004142:	e00f      	b.n	8004164 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004144:	78fb      	ldrb	r3, [r7, #3]
 8004146:	f003 020f 	and.w	r2, r3, #15
 800414a:	4613      	mov	r3, r2
 800414c:	00db      	lsls	r3, r3, #3
 800414e:	1a9b      	subs	r3, r3, r2
 8004150:	009b      	lsls	r3, r3, #2
 8004152:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004156:	687a      	ldr	r2, [r7, #4]
 8004158:	4413      	add	r3, r2
 800415a:	3304      	adds	r3, #4
 800415c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	2200      	movs	r2, #0
 8004162:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	2200      	movs	r2, #0
 8004168:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800416a:	78fb      	ldrb	r3, [r7, #3]
 800416c:	f003 030f 	and.w	r3, r3, #15
 8004170:	b2da      	uxtb	r2, r3
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800417c:	2b01      	cmp	r3, #1
 800417e:	d101      	bne.n	8004184 <HAL_PCD_EP_ClrStall+0x86>
 8004180:	2302      	movs	r3, #2
 8004182:	e00e      	b.n	80041a2 <HAL_PCD_EP_ClrStall+0xa4>
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2201      	movs	r2, #1
 8004188:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	68f9      	ldr	r1, [r7, #12]
 8004192:	4618      	mov	r0, r3
 8004194:	f003 fb69 	bl	800786a <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2200      	movs	r2, #0
 800419c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80041a0:	2300      	movs	r3, #0
}
 80041a2:	4618      	mov	r0, r3
 80041a4:	3710      	adds	r7, #16
 80041a6:	46bd      	mov	sp, r7
 80041a8:	bd80      	pop	{r7, pc}

080041aa <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80041aa:	b580      	push	{r7, lr}
 80041ac:	b08a      	sub	sp, #40	; 0x28
 80041ae:	af02      	add	r7, sp, #8
 80041b0:	6078      	str	r0, [r7, #4]
 80041b2:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80041ba:	697b      	ldr	r3, [r7, #20]
 80041bc:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80041be:	683a      	ldr	r2, [r7, #0]
 80041c0:	4613      	mov	r3, r2
 80041c2:	00db      	lsls	r3, r3, #3
 80041c4:	1a9b      	subs	r3, r3, r2
 80041c6:	009b      	lsls	r3, r3, #2
 80041c8:	3338      	adds	r3, #56	; 0x38
 80041ca:	687a      	ldr	r2, [r7, #4]
 80041cc:	4413      	add	r3, r2
 80041ce:	3304      	adds	r3, #4
 80041d0:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	699a      	ldr	r2, [r3, #24]
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	695b      	ldr	r3, [r3, #20]
 80041da:	429a      	cmp	r2, r3
 80041dc:	d901      	bls.n	80041e2 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80041de:	2301      	movs	r3, #1
 80041e0:	e06c      	b.n	80042bc <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	695a      	ldr	r2, [r3, #20]
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	699b      	ldr	r3, [r3, #24]
 80041ea:	1ad3      	subs	r3, r2, r3
 80041ec:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	689b      	ldr	r3, [r3, #8]
 80041f2:	69fa      	ldr	r2, [r7, #28]
 80041f4:	429a      	cmp	r2, r3
 80041f6:	d902      	bls.n	80041fe <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	689b      	ldr	r3, [r3, #8]
 80041fc:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80041fe:	69fb      	ldr	r3, [r7, #28]
 8004200:	3303      	adds	r3, #3
 8004202:	089b      	lsrs	r3, r3, #2
 8004204:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004206:	e02b      	b.n	8004260 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	695a      	ldr	r2, [r3, #20]
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	699b      	ldr	r3, [r3, #24]
 8004210:	1ad3      	subs	r3, r2, r3
 8004212:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	689b      	ldr	r3, [r3, #8]
 8004218:	69fa      	ldr	r2, [r7, #28]
 800421a:	429a      	cmp	r2, r3
 800421c:	d902      	bls.n	8004224 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	689b      	ldr	r3, [r3, #8]
 8004222:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8004224:	69fb      	ldr	r3, [r7, #28]
 8004226:	3303      	adds	r3, #3
 8004228:	089b      	lsrs	r3, r3, #2
 800422a:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	68d9      	ldr	r1, [r3, #12]
 8004230:	683b      	ldr	r3, [r7, #0]
 8004232:	b2da      	uxtb	r2, r3
 8004234:	69fb      	ldr	r3, [r7, #28]
 8004236:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800423c:	b2db      	uxtb	r3, r3
 800423e:	9300      	str	r3, [sp, #0]
 8004240:	4603      	mov	r3, r0
 8004242:	6978      	ldr	r0, [r7, #20]
 8004244:	f003 fa45 	bl	80076d2 <USB_WritePacket>

    ep->xfer_buff  += len;
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	68da      	ldr	r2, [r3, #12]
 800424c:	69fb      	ldr	r3, [r7, #28]
 800424e:	441a      	add	r2, r3
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	699a      	ldr	r2, [r3, #24]
 8004258:	69fb      	ldr	r3, [r7, #28]
 800425a:	441a      	add	r2, r3
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	015a      	lsls	r2, r3, #5
 8004264:	693b      	ldr	r3, [r7, #16]
 8004266:	4413      	add	r3, r2
 8004268:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800426c:	699b      	ldr	r3, [r3, #24]
 800426e:	b29b      	uxth	r3, r3
 8004270:	69ba      	ldr	r2, [r7, #24]
 8004272:	429a      	cmp	r2, r3
 8004274:	d809      	bhi.n	800428a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	699a      	ldr	r2, [r3, #24]
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800427e:	429a      	cmp	r2, r3
 8004280:	d203      	bcs.n	800428a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	695b      	ldr	r3, [r3, #20]
 8004286:	2b00      	cmp	r3, #0
 8004288:	d1be      	bne.n	8004208 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	695a      	ldr	r2, [r3, #20]
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	699b      	ldr	r3, [r3, #24]
 8004292:	429a      	cmp	r2, r3
 8004294:	d811      	bhi.n	80042ba <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004296:	683b      	ldr	r3, [r7, #0]
 8004298:	f003 030f 	and.w	r3, r3, #15
 800429c:	2201      	movs	r2, #1
 800429e:	fa02 f303 	lsl.w	r3, r2, r3
 80042a2:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80042a4:	693b      	ldr	r3, [r7, #16]
 80042a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042aa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80042ac:	68bb      	ldr	r3, [r7, #8]
 80042ae:	43db      	mvns	r3, r3
 80042b0:	6939      	ldr	r1, [r7, #16]
 80042b2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80042b6:	4013      	ands	r3, r2
 80042b8:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80042ba:	2300      	movs	r3, #0
}
 80042bc:	4618      	mov	r0, r3
 80042be:	3720      	adds	r7, #32
 80042c0:	46bd      	mov	sp, r7
 80042c2:	bd80      	pop	{r7, pc}

080042c4 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80042c4:	b580      	push	{r7, lr}
 80042c6:	b086      	sub	sp, #24
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	6078      	str	r0, [r7, #4]
 80042cc:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80042d4:	697b      	ldr	r3, [r7, #20]
 80042d6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80042d8:	697b      	ldr	r3, [r7, #20]
 80042da:	333c      	adds	r3, #60	; 0x3c
 80042dc:	3304      	adds	r3, #4
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80042e2:	683b      	ldr	r3, [r7, #0]
 80042e4:	015a      	lsls	r2, r3, #5
 80042e6:	693b      	ldr	r3, [r7, #16]
 80042e8:	4413      	add	r3, r2
 80042ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042ee:	689b      	ldr	r3, [r3, #8]
 80042f0:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	691b      	ldr	r3, [r3, #16]
 80042f6:	2b01      	cmp	r3, #1
 80042f8:	f040 80a0 	bne.w	800443c <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80042fc:	68bb      	ldr	r3, [r7, #8]
 80042fe:	f003 0308 	and.w	r3, r3, #8
 8004302:	2b00      	cmp	r3, #0
 8004304:	d015      	beq.n	8004332 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	4a72      	ldr	r2, [pc, #456]	; (80044d4 <PCD_EP_OutXfrComplete_int+0x210>)
 800430a:	4293      	cmp	r3, r2
 800430c:	f240 80dd 	bls.w	80044ca <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004310:	68bb      	ldr	r3, [r7, #8]
 8004312:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004316:	2b00      	cmp	r3, #0
 8004318:	f000 80d7 	beq.w	80044ca <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800431c:	683b      	ldr	r3, [r7, #0]
 800431e:	015a      	lsls	r2, r3, #5
 8004320:	693b      	ldr	r3, [r7, #16]
 8004322:	4413      	add	r3, r2
 8004324:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004328:	461a      	mov	r2, r3
 800432a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800432e:	6093      	str	r3, [r2, #8]
 8004330:	e0cb      	b.n	80044ca <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8004332:	68bb      	ldr	r3, [r7, #8]
 8004334:	f003 0320 	and.w	r3, r3, #32
 8004338:	2b00      	cmp	r3, #0
 800433a:	d009      	beq.n	8004350 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800433c:	683b      	ldr	r3, [r7, #0]
 800433e:	015a      	lsls	r2, r3, #5
 8004340:	693b      	ldr	r3, [r7, #16]
 8004342:	4413      	add	r3, r2
 8004344:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004348:	461a      	mov	r2, r3
 800434a:	2320      	movs	r3, #32
 800434c:	6093      	str	r3, [r2, #8]
 800434e:	e0bc      	b.n	80044ca <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8004350:	68bb      	ldr	r3, [r7, #8]
 8004352:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004356:	2b00      	cmp	r3, #0
 8004358:	f040 80b7 	bne.w	80044ca <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	4a5d      	ldr	r2, [pc, #372]	; (80044d4 <PCD_EP_OutXfrComplete_int+0x210>)
 8004360:	4293      	cmp	r3, r2
 8004362:	d90f      	bls.n	8004384 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004364:	68bb      	ldr	r3, [r7, #8]
 8004366:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800436a:	2b00      	cmp	r3, #0
 800436c:	d00a      	beq.n	8004384 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800436e:	683b      	ldr	r3, [r7, #0]
 8004370:	015a      	lsls	r2, r3, #5
 8004372:	693b      	ldr	r3, [r7, #16]
 8004374:	4413      	add	r3, r2
 8004376:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800437a:	461a      	mov	r2, r3
 800437c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004380:	6093      	str	r3, [r2, #8]
 8004382:	e0a2      	b.n	80044ca <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8004384:	6879      	ldr	r1, [r7, #4]
 8004386:	683a      	ldr	r2, [r7, #0]
 8004388:	4613      	mov	r3, r2
 800438a:	00db      	lsls	r3, r3, #3
 800438c:	1a9b      	subs	r3, r3, r2
 800438e:	009b      	lsls	r3, r3, #2
 8004390:	440b      	add	r3, r1
 8004392:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8004396:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8004398:	683b      	ldr	r3, [r7, #0]
 800439a:	0159      	lsls	r1, r3, #5
 800439c:	693b      	ldr	r3, [r7, #16]
 800439e:	440b      	add	r3, r1
 80043a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043a4:	691b      	ldr	r3, [r3, #16]
 80043a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 80043aa:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 80043ac:	6878      	ldr	r0, [r7, #4]
 80043ae:	683a      	ldr	r2, [r7, #0]
 80043b0:	4613      	mov	r3, r2
 80043b2:	00db      	lsls	r3, r3, #3
 80043b4:	1a9b      	subs	r3, r3, r2
 80043b6:	009b      	lsls	r3, r3, #2
 80043b8:	4403      	add	r3, r0
 80043ba:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80043be:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 80043c0:	6879      	ldr	r1, [r7, #4]
 80043c2:	683a      	ldr	r2, [r7, #0]
 80043c4:	4613      	mov	r3, r2
 80043c6:	00db      	lsls	r3, r3, #3
 80043c8:	1a9b      	subs	r3, r3, r2
 80043ca:	009b      	lsls	r3, r3, #2
 80043cc:	440b      	add	r3, r1
 80043ce:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80043d2:	6819      	ldr	r1, [r3, #0]
 80043d4:	6878      	ldr	r0, [r7, #4]
 80043d6:	683a      	ldr	r2, [r7, #0]
 80043d8:	4613      	mov	r3, r2
 80043da:	00db      	lsls	r3, r3, #3
 80043dc:	1a9b      	subs	r3, r3, r2
 80043de:	009b      	lsls	r3, r3, #2
 80043e0:	4403      	add	r3, r0
 80043e2:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	4419      	add	r1, r3
 80043ea:	6878      	ldr	r0, [r7, #4]
 80043ec:	683a      	ldr	r2, [r7, #0]
 80043ee:	4613      	mov	r3, r2
 80043f0:	00db      	lsls	r3, r3, #3
 80043f2:	1a9b      	subs	r3, r3, r2
 80043f4:	009b      	lsls	r3, r3, #2
 80043f6:	4403      	add	r3, r0
 80043f8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80043fc:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80043fe:	683b      	ldr	r3, [r7, #0]
 8004400:	2b00      	cmp	r3, #0
 8004402:	d114      	bne.n	800442e <PCD_EP_OutXfrComplete_int+0x16a>
 8004404:	6879      	ldr	r1, [r7, #4]
 8004406:	683a      	ldr	r2, [r7, #0]
 8004408:	4613      	mov	r3, r2
 800440a:	00db      	lsls	r3, r3, #3
 800440c:	1a9b      	subs	r3, r3, r2
 800440e:	009b      	lsls	r3, r3, #2
 8004410:	440b      	add	r3, r1
 8004412:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	2b00      	cmp	r3, #0
 800441a:	d108      	bne.n	800442e <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	6818      	ldr	r0, [r3, #0]
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004426:	461a      	mov	r2, r3
 8004428:	2101      	movs	r1, #1
 800442a:	f003 fbb1 	bl	8007b90 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800442e:	683b      	ldr	r3, [r7, #0]
 8004430:	b2db      	uxtb	r3, r3
 8004432:	4619      	mov	r1, r3
 8004434:	6878      	ldr	r0, [r7, #4]
 8004436:	f005 fafd 	bl	8009a34 <HAL_PCD_DataOutStageCallback>
 800443a:	e046      	b.n	80044ca <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	4a26      	ldr	r2, [pc, #152]	; (80044d8 <PCD_EP_OutXfrComplete_int+0x214>)
 8004440:	4293      	cmp	r3, r2
 8004442:	d124      	bne.n	800448e <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8004444:	68bb      	ldr	r3, [r7, #8]
 8004446:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800444a:	2b00      	cmp	r3, #0
 800444c:	d00a      	beq.n	8004464 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800444e:	683b      	ldr	r3, [r7, #0]
 8004450:	015a      	lsls	r2, r3, #5
 8004452:	693b      	ldr	r3, [r7, #16]
 8004454:	4413      	add	r3, r2
 8004456:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800445a:	461a      	mov	r2, r3
 800445c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004460:	6093      	str	r3, [r2, #8]
 8004462:	e032      	b.n	80044ca <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004464:	68bb      	ldr	r3, [r7, #8]
 8004466:	f003 0320 	and.w	r3, r3, #32
 800446a:	2b00      	cmp	r3, #0
 800446c:	d008      	beq.n	8004480 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800446e:	683b      	ldr	r3, [r7, #0]
 8004470:	015a      	lsls	r2, r3, #5
 8004472:	693b      	ldr	r3, [r7, #16]
 8004474:	4413      	add	r3, r2
 8004476:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800447a:	461a      	mov	r2, r3
 800447c:	2320      	movs	r3, #32
 800447e:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004480:	683b      	ldr	r3, [r7, #0]
 8004482:	b2db      	uxtb	r3, r3
 8004484:	4619      	mov	r1, r3
 8004486:	6878      	ldr	r0, [r7, #4]
 8004488:	f005 fad4 	bl	8009a34 <HAL_PCD_DataOutStageCallback>
 800448c:	e01d      	b.n	80044ca <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800448e:	683b      	ldr	r3, [r7, #0]
 8004490:	2b00      	cmp	r3, #0
 8004492:	d114      	bne.n	80044be <PCD_EP_OutXfrComplete_int+0x1fa>
 8004494:	6879      	ldr	r1, [r7, #4]
 8004496:	683a      	ldr	r2, [r7, #0]
 8004498:	4613      	mov	r3, r2
 800449a:	00db      	lsls	r3, r3, #3
 800449c:	1a9b      	subs	r3, r3, r2
 800449e:	009b      	lsls	r3, r3, #2
 80044a0:	440b      	add	r3, r1
 80044a2:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d108      	bne.n	80044be <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	6818      	ldr	r0, [r3, #0]
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80044b6:	461a      	mov	r2, r3
 80044b8:	2100      	movs	r1, #0
 80044ba:	f003 fb69 	bl	8007b90 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80044be:	683b      	ldr	r3, [r7, #0]
 80044c0:	b2db      	uxtb	r3, r3
 80044c2:	4619      	mov	r1, r3
 80044c4:	6878      	ldr	r0, [r7, #4]
 80044c6:	f005 fab5 	bl	8009a34 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80044ca:	2300      	movs	r3, #0
}
 80044cc:	4618      	mov	r0, r3
 80044ce:	3718      	adds	r7, #24
 80044d0:	46bd      	mov	sp, r7
 80044d2:	bd80      	pop	{r7, pc}
 80044d4:	4f54300a 	.word	0x4f54300a
 80044d8:	4f54310a 	.word	0x4f54310a

080044dc <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80044dc:	b580      	push	{r7, lr}
 80044de:	b086      	sub	sp, #24
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	6078      	str	r0, [r7, #4]
 80044e4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80044ec:	697b      	ldr	r3, [r7, #20]
 80044ee:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80044f0:	697b      	ldr	r3, [r7, #20]
 80044f2:	333c      	adds	r3, #60	; 0x3c
 80044f4:	3304      	adds	r3, #4
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80044fa:	683b      	ldr	r3, [r7, #0]
 80044fc:	015a      	lsls	r2, r3, #5
 80044fe:	693b      	ldr	r3, [r7, #16]
 8004500:	4413      	add	r3, r2
 8004502:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004506:	689b      	ldr	r3, [r3, #8]
 8004508:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	4a15      	ldr	r2, [pc, #84]	; (8004564 <PCD_EP_OutSetupPacket_int+0x88>)
 800450e:	4293      	cmp	r3, r2
 8004510:	d90e      	bls.n	8004530 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004512:	68bb      	ldr	r3, [r7, #8]
 8004514:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004518:	2b00      	cmp	r3, #0
 800451a:	d009      	beq.n	8004530 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800451c:	683b      	ldr	r3, [r7, #0]
 800451e:	015a      	lsls	r2, r3, #5
 8004520:	693b      	ldr	r3, [r7, #16]
 8004522:	4413      	add	r3, r2
 8004524:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004528:	461a      	mov	r2, r3
 800452a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800452e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004530:	6878      	ldr	r0, [r7, #4]
 8004532:	f005 fa6d 	bl	8009a10 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	4a0a      	ldr	r2, [pc, #40]	; (8004564 <PCD_EP_OutSetupPacket_int+0x88>)
 800453a:	4293      	cmp	r3, r2
 800453c:	d90c      	bls.n	8004558 <PCD_EP_OutSetupPacket_int+0x7c>
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	691b      	ldr	r3, [r3, #16]
 8004542:	2b01      	cmp	r3, #1
 8004544:	d108      	bne.n	8004558 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	6818      	ldr	r0, [r3, #0]
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004550:	461a      	mov	r2, r3
 8004552:	2101      	movs	r1, #1
 8004554:	f003 fb1c 	bl	8007b90 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8004558:	2300      	movs	r3, #0
}
 800455a:	4618      	mov	r0, r3
 800455c:	3718      	adds	r7, #24
 800455e:	46bd      	mov	sp, r7
 8004560:	bd80      	pop	{r7, pc}
 8004562:	bf00      	nop
 8004564:	4f54300a 	.word	0x4f54300a

08004568 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004568:	b480      	push	{r7}
 800456a:	b085      	sub	sp, #20
 800456c:	af00      	add	r7, sp, #0
 800456e:	6078      	str	r0, [r7, #4]
 8004570:	460b      	mov	r3, r1
 8004572:	70fb      	strb	r3, [r7, #3]
 8004574:	4613      	mov	r3, r2
 8004576:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800457e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004580:	78fb      	ldrb	r3, [r7, #3]
 8004582:	2b00      	cmp	r3, #0
 8004584:	d107      	bne.n	8004596 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8004586:	883b      	ldrh	r3, [r7, #0]
 8004588:	0419      	lsls	r1, r3, #16
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	68ba      	ldr	r2, [r7, #8]
 8004590:	430a      	orrs	r2, r1
 8004592:	629a      	str	r2, [r3, #40]	; 0x28
 8004594:	e028      	b.n	80045e8 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800459c:	0c1b      	lsrs	r3, r3, #16
 800459e:	68ba      	ldr	r2, [r7, #8]
 80045a0:	4413      	add	r3, r2
 80045a2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80045a4:	2300      	movs	r3, #0
 80045a6:	73fb      	strb	r3, [r7, #15]
 80045a8:	e00d      	b.n	80045c6 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681a      	ldr	r2, [r3, #0]
 80045ae:	7bfb      	ldrb	r3, [r7, #15]
 80045b0:	3340      	adds	r3, #64	; 0x40
 80045b2:	009b      	lsls	r3, r3, #2
 80045b4:	4413      	add	r3, r2
 80045b6:	685b      	ldr	r3, [r3, #4]
 80045b8:	0c1b      	lsrs	r3, r3, #16
 80045ba:	68ba      	ldr	r2, [r7, #8]
 80045bc:	4413      	add	r3, r2
 80045be:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80045c0:	7bfb      	ldrb	r3, [r7, #15]
 80045c2:	3301      	adds	r3, #1
 80045c4:	73fb      	strb	r3, [r7, #15]
 80045c6:	7bfa      	ldrb	r2, [r7, #15]
 80045c8:	78fb      	ldrb	r3, [r7, #3]
 80045ca:	3b01      	subs	r3, #1
 80045cc:	429a      	cmp	r2, r3
 80045ce:	d3ec      	bcc.n	80045aa <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80045d0:	883b      	ldrh	r3, [r7, #0]
 80045d2:	0418      	lsls	r0, r3, #16
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	6819      	ldr	r1, [r3, #0]
 80045d8:	78fb      	ldrb	r3, [r7, #3]
 80045da:	3b01      	subs	r3, #1
 80045dc:	68ba      	ldr	r2, [r7, #8]
 80045de:	4302      	orrs	r2, r0
 80045e0:	3340      	adds	r3, #64	; 0x40
 80045e2:	009b      	lsls	r3, r3, #2
 80045e4:	440b      	add	r3, r1
 80045e6:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80045e8:	2300      	movs	r3, #0
}
 80045ea:	4618      	mov	r0, r3
 80045ec:	3714      	adds	r7, #20
 80045ee:	46bd      	mov	sp, r7
 80045f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f4:	4770      	bx	lr

080045f6 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80045f6:	b480      	push	{r7}
 80045f8:	b083      	sub	sp, #12
 80045fa:	af00      	add	r7, sp, #0
 80045fc:	6078      	str	r0, [r7, #4]
 80045fe:	460b      	mov	r3, r1
 8004600:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	887a      	ldrh	r2, [r7, #2]
 8004608:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800460a:	2300      	movs	r3, #0
}
 800460c:	4618      	mov	r0, r3
 800460e:	370c      	adds	r7, #12
 8004610:	46bd      	mov	sp, r7
 8004612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004616:	4770      	bx	lr

08004618 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004618:	b480      	push	{r7}
 800461a:	b085      	sub	sp, #20
 800461c:	af00      	add	r7, sp, #0
 800461e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	2201      	movs	r2, #1
 800462a:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	2200      	movs	r2, #0
 8004632:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	699b      	ldr	r3, [r3, #24]
 800463a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004646:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800464a:	f043 0303 	orr.w	r3, r3, #3
 800464e:	68fa      	ldr	r2, [r7, #12]
 8004650:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8004652:	2300      	movs	r3, #0
}
 8004654:	4618      	mov	r0, r3
 8004656:	3714      	adds	r7, #20
 8004658:	46bd      	mov	sp, r7
 800465a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465e:	4770      	bx	lr

08004660 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8004660:	b580      	push	{r7, lr}
 8004662:	b082      	sub	sp, #8
 8004664:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8004666:	2300      	movs	r3, #0
 8004668:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800466a:	2300      	movs	r3, #0
 800466c:	603b      	str	r3, [r7, #0]
 800466e:	4b20      	ldr	r3, [pc, #128]	; (80046f0 <HAL_PWREx_EnableOverDrive+0x90>)
 8004670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004672:	4a1f      	ldr	r2, [pc, #124]	; (80046f0 <HAL_PWREx_EnableOverDrive+0x90>)
 8004674:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004678:	6413      	str	r3, [r2, #64]	; 0x40
 800467a:	4b1d      	ldr	r3, [pc, #116]	; (80046f0 <HAL_PWREx_EnableOverDrive+0x90>)
 800467c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800467e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004682:	603b      	str	r3, [r7, #0]
 8004684:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8004686:	4b1b      	ldr	r3, [pc, #108]	; (80046f4 <HAL_PWREx_EnableOverDrive+0x94>)
 8004688:	2201      	movs	r2, #1
 800468a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800468c:	f7fd face 	bl	8001c2c <HAL_GetTick>
 8004690:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004692:	e009      	b.n	80046a8 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004694:	f7fd faca 	bl	8001c2c <HAL_GetTick>
 8004698:	4602      	mov	r2, r0
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	1ad3      	subs	r3, r2, r3
 800469e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80046a2:	d901      	bls.n	80046a8 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80046a4:	2303      	movs	r3, #3
 80046a6:	e01f      	b.n	80046e8 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80046a8:	4b13      	ldr	r3, [pc, #76]	; (80046f8 <HAL_PWREx_EnableOverDrive+0x98>)
 80046aa:	685b      	ldr	r3, [r3, #4]
 80046ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80046b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80046b4:	d1ee      	bne.n	8004694 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80046b6:	4b11      	ldr	r3, [pc, #68]	; (80046fc <HAL_PWREx_EnableOverDrive+0x9c>)
 80046b8:	2201      	movs	r2, #1
 80046ba:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80046bc:	f7fd fab6 	bl	8001c2c <HAL_GetTick>
 80046c0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80046c2:	e009      	b.n	80046d8 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80046c4:	f7fd fab2 	bl	8001c2c <HAL_GetTick>
 80046c8:	4602      	mov	r2, r0
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	1ad3      	subs	r3, r2, r3
 80046ce:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80046d2:	d901      	bls.n	80046d8 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80046d4:	2303      	movs	r3, #3
 80046d6:	e007      	b.n	80046e8 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80046d8:	4b07      	ldr	r3, [pc, #28]	; (80046f8 <HAL_PWREx_EnableOverDrive+0x98>)
 80046da:	685b      	ldr	r3, [r3, #4]
 80046dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046e0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80046e4:	d1ee      	bne.n	80046c4 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80046e6:	2300      	movs	r3, #0
}
 80046e8:	4618      	mov	r0, r3
 80046ea:	3708      	adds	r7, #8
 80046ec:	46bd      	mov	sp, r7
 80046ee:	bd80      	pop	{r7, pc}
 80046f0:	40023800 	.word	0x40023800
 80046f4:	420e0040 	.word	0x420e0040
 80046f8:	40007000 	.word	0x40007000
 80046fc:	420e0044 	.word	0x420e0044

08004700 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004700:	b580      	push	{r7, lr}
 8004702:	b084      	sub	sp, #16
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]
 8004708:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	2b00      	cmp	r3, #0
 800470e:	d101      	bne.n	8004714 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004710:	2301      	movs	r3, #1
 8004712:	e0cc      	b.n	80048ae <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004714:	4b68      	ldr	r3, [pc, #416]	; (80048b8 <HAL_RCC_ClockConfig+0x1b8>)
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f003 030f 	and.w	r3, r3, #15
 800471c:	683a      	ldr	r2, [r7, #0]
 800471e:	429a      	cmp	r2, r3
 8004720:	d90c      	bls.n	800473c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004722:	4b65      	ldr	r3, [pc, #404]	; (80048b8 <HAL_RCC_ClockConfig+0x1b8>)
 8004724:	683a      	ldr	r2, [r7, #0]
 8004726:	b2d2      	uxtb	r2, r2
 8004728:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800472a:	4b63      	ldr	r3, [pc, #396]	; (80048b8 <HAL_RCC_ClockConfig+0x1b8>)
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f003 030f 	and.w	r3, r3, #15
 8004732:	683a      	ldr	r2, [r7, #0]
 8004734:	429a      	cmp	r2, r3
 8004736:	d001      	beq.n	800473c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004738:	2301      	movs	r3, #1
 800473a:	e0b8      	b.n	80048ae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f003 0302 	and.w	r3, r3, #2
 8004744:	2b00      	cmp	r3, #0
 8004746:	d020      	beq.n	800478a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f003 0304 	and.w	r3, r3, #4
 8004750:	2b00      	cmp	r3, #0
 8004752:	d005      	beq.n	8004760 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004754:	4b59      	ldr	r3, [pc, #356]	; (80048bc <HAL_RCC_ClockConfig+0x1bc>)
 8004756:	689b      	ldr	r3, [r3, #8]
 8004758:	4a58      	ldr	r2, [pc, #352]	; (80048bc <HAL_RCC_ClockConfig+0x1bc>)
 800475a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800475e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f003 0308 	and.w	r3, r3, #8
 8004768:	2b00      	cmp	r3, #0
 800476a:	d005      	beq.n	8004778 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800476c:	4b53      	ldr	r3, [pc, #332]	; (80048bc <HAL_RCC_ClockConfig+0x1bc>)
 800476e:	689b      	ldr	r3, [r3, #8]
 8004770:	4a52      	ldr	r2, [pc, #328]	; (80048bc <HAL_RCC_ClockConfig+0x1bc>)
 8004772:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004776:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004778:	4b50      	ldr	r3, [pc, #320]	; (80048bc <HAL_RCC_ClockConfig+0x1bc>)
 800477a:	689b      	ldr	r3, [r3, #8]
 800477c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	689b      	ldr	r3, [r3, #8]
 8004784:	494d      	ldr	r1, [pc, #308]	; (80048bc <HAL_RCC_ClockConfig+0x1bc>)
 8004786:	4313      	orrs	r3, r2
 8004788:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f003 0301 	and.w	r3, r3, #1
 8004792:	2b00      	cmp	r3, #0
 8004794:	d044      	beq.n	8004820 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	685b      	ldr	r3, [r3, #4]
 800479a:	2b01      	cmp	r3, #1
 800479c:	d107      	bne.n	80047ae <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800479e:	4b47      	ldr	r3, [pc, #284]	; (80048bc <HAL_RCC_ClockConfig+0x1bc>)
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d119      	bne.n	80047de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80047aa:	2301      	movs	r3, #1
 80047ac:	e07f      	b.n	80048ae <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	685b      	ldr	r3, [r3, #4]
 80047b2:	2b02      	cmp	r3, #2
 80047b4:	d003      	beq.n	80047be <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80047ba:	2b03      	cmp	r3, #3
 80047bc:	d107      	bne.n	80047ce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80047be:	4b3f      	ldr	r3, [pc, #252]	; (80048bc <HAL_RCC_ClockConfig+0x1bc>)
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d109      	bne.n	80047de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80047ca:	2301      	movs	r3, #1
 80047cc:	e06f      	b.n	80048ae <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047ce:	4b3b      	ldr	r3, [pc, #236]	; (80048bc <HAL_RCC_ClockConfig+0x1bc>)
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f003 0302 	and.w	r3, r3, #2
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d101      	bne.n	80047de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80047da:	2301      	movs	r3, #1
 80047dc:	e067      	b.n	80048ae <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80047de:	4b37      	ldr	r3, [pc, #220]	; (80048bc <HAL_RCC_ClockConfig+0x1bc>)
 80047e0:	689b      	ldr	r3, [r3, #8]
 80047e2:	f023 0203 	bic.w	r2, r3, #3
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	685b      	ldr	r3, [r3, #4]
 80047ea:	4934      	ldr	r1, [pc, #208]	; (80048bc <HAL_RCC_ClockConfig+0x1bc>)
 80047ec:	4313      	orrs	r3, r2
 80047ee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80047f0:	f7fd fa1c 	bl	8001c2c <HAL_GetTick>
 80047f4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047f6:	e00a      	b.n	800480e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80047f8:	f7fd fa18 	bl	8001c2c <HAL_GetTick>
 80047fc:	4602      	mov	r2, r0
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	1ad3      	subs	r3, r2, r3
 8004802:	f241 3288 	movw	r2, #5000	; 0x1388
 8004806:	4293      	cmp	r3, r2
 8004808:	d901      	bls.n	800480e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800480a:	2303      	movs	r3, #3
 800480c:	e04f      	b.n	80048ae <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800480e:	4b2b      	ldr	r3, [pc, #172]	; (80048bc <HAL_RCC_ClockConfig+0x1bc>)
 8004810:	689b      	ldr	r3, [r3, #8]
 8004812:	f003 020c 	and.w	r2, r3, #12
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	685b      	ldr	r3, [r3, #4]
 800481a:	009b      	lsls	r3, r3, #2
 800481c:	429a      	cmp	r2, r3
 800481e:	d1eb      	bne.n	80047f8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004820:	4b25      	ldr	r3, [pc, #148]	; (80048b8 <HAL_RCC_ClockConfig+0x1b8>)
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f003 030f 	and.w	r3, r3, #15
 8004828:	683a      	ldr	r2, [r7, #0]
 800482a:	429a      	cmp	r2, r3
 800482c:	d20c      	bcs.n	8004848 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800482e:	4b22      	ldr	r3, [pc, #136]	; (80048b8 <HAL_RCC_ClockConfig+0x1b8>)
 8004830:	683a      	ldr	r2, [r7, #0]
 8004832:	b2d2      	uxtb	r2, r2
 8004834:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004836:	4b20      	ldr	r3, [pc, #128]	; (80048b8 <HAL_RCC_ClockConfig+0x1b8>)
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f003 030f 	and.w	r3, r3, #15
 800483e:	683a      	ldr	r2, [r7, #0]
 8004840:	429a      	cmp	r2, r3
 8004842:	d001      	beq.n	8004848 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004844:	2301      	movs	r3, #1
 8004846:	e032      	b.n	80048ae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f003 0304 	and.w	r3, r3, #4
 8004850:	2b00      	cmp	r3, #0
 8004852:	d008      	beq.n	8004866 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004854:	4b19      	ldr	r3, [pc, #100]	; (80048bc <HAL_RCC_ClockConfig+0x1bc>)
 8004856:	689b      	ldr	r3, [r3, #8]
 8004858:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	68db      	ldr	r3, [r3, #12]
 8004860:	4916      	ldr	r1, [pc, #88]	; (80048bc <HAL_RCC_ClockConfig+0x1bc>)
 8004862:	4313      	orrs	r3, r2
 8004864:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f003 0308 	and.w	r3, r3, #8
 800486e:	2b00      	cmp	r3, #0
 8004870:	d009      	beq.n	8004886 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004872:	4b12      	ldr	r3, [pc, #72]	; (80048bc <HAL_RCC_ClockConfig+0x1bc>)
 8004874:	689b      	ldr	r3, [r3, #8]
 8004876:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	691b      	ldr	r3, [r3, #16]
 800487e:	00db      	lsls	r3, r3, #3
 8004880:	490e      	ldr	r1, [pc, #56]	; (80048bc <HAL_RCC_ClockConfig+0x1bc>)
 8004882:	4313      	orrs	r3, r2
 8004884:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004886:	f000 fb7f 	bl	8004f88 <HAL_RCC_GetSysClockFreq>
 800488a:	4601      	mov	r1, r0
 800488c:	4b0b      	ldr	r3, [pc, #44]	; (80048bc <HAL_RCC_ClockConfig+0x1bc>)
 800488e:	689b      	ldr	r3, [r3, #8]
 8004890:	091b      	lsrs	r3, r3, #4
 8004892:	f003 030f 	and.w	r3, r3, #15
 8004896:	4a0a      	ldr	r2, [pc, #40]	; (80048c0 <HAL_RCC_ClockConfig+0x1c0>)
 8004898:	5cd3      	ldrb	r3, [r2, r3]
 800489a:	fa21 f303 	lsr.w	r3, r1, r3
 800489e:	4a09      	ldr	r2, [pc, #36]	; (80048c4 <HAL_RCC_ClockConfig+0x1c4>)
 80048a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80048a2:	4b09      	ldr	r3, [pc, #36]	; (80048c8 <HAL_RCC_ClockConfig+0x1c8>)
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	4618      	mov	r0, r3
 80048a8:	f7fd f97c 	bl	8001ba4 <HAL_InitTick>

  return HAL_OK;
 80048ac:	2300      	movs	r3, #0
}
 80048ae:	4618      	mov	r0, r3
 80048b0:	3710      	adds	r7, #16
 80048b2:	46bd      	mov	sp, r7
 80048b4:	bd80      	pop	{r7, pc}
 80048b6:	bf00      	nop
 80048b8:	40023c00 	.word	0x40023c00
 80048bc:	40023800 	.word	0x40023800
 80048c0:	0800db98 	.word	0x0800db98
 80048c4:	20000010 	.word	0x20000010
 80048c8:	20000014 	.word	0x20000014

080048cc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80048cc:	b480      	push	{r7}
 80048ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80048d0:	4b03      	ldr	r3, [pc, #12]	; (80048e0 <HAL_RCC_GetHCLKFreq+0x14>)
 80048d2:	681b      	ldr	r3, [r3, #0]
}
 80048d4:	4618      	mov	r0, r3
 80048d6:	46bd      	mov	sp, r7
 80048d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048dc:	4770      	bx	lr
 80048de:	bf00      	nop
 80048e0:	20000010 	.word	0x20000010

080048e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80048e4:	b580      	push	{r7, lr}
 80048e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80048e8:	f7ff fff0 	bl	80048cc <HAL_RCC_GetHCLKFreq>
 80048ec:	4601      	mov	r1, r0
 80048ee:	4b05      	ldr	r3, [pc, #20]	; (8004904 <HAL_RCC_GetPCLK1Freq+0x20>)
 80048f0:	689b      	ldr	r3, [r3, #8]
 80048f2:	0a9b      	lsrs	r3, r3, #10
 80048f4:	f003 0307 	and.w	r3, r3, #7
 80048f8:	4a03      	ldr	r2, [pc, #12]	; (8004908 <HAL_RCC_GetPCLK1Freq+0x24>)
 80048fa:	5cd3      	ldrb	r3, [r2, r3]
 80048fc:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004900:	4618      	mov	r0, r3
 8004902:	bd80      	pop	{r7, pc}
 8004904:	40023800 	.word	0x40023800
 8004908:	0800dba8 	.word	0x0800dba8

0800490c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800490c:	b580      	push	{r7, lr}
 800490e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004910:	f7ff ffdc 	bl	80048cc <HAL_RCC_GetHCLKFreq>
 8004914:	4601      	mov	r1, r0
 8004916:	4b05      	ldr	r3, [pc, #20]	; (800492c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004918:	689b      	ldr	r3, [r3, #8]
 800491a:	0b5b      	lsrs	r3, r3, #13
 800491c:	f003 0307 	and.w	r3, r3, #7
 8004920:	4a03      	ldr	r2, [pc, #12]	; (8004930 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004922:	5cd3      	ldrb	r3, [r2, r3]
 8004924:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004928:	4618      	mov	r0, r3
 800492a:	bd80      	pop	{r7, pc}
 800492c:	40023800 	.word	0x40023800
 8004930:	0800dba8 	.word	0x0800dba8

08004934 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004934:	b580      	push	{r7, lr}
 8004936:	b08c      	sub	sp, #48	; 0x30
 8004938:	af00      	add	r7, sp, #0
 800493a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800493c:	2300      	movs	r3, #0
 800493e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 8004940:	2300      	movs	r3, #0
 8004942:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8004944:	2300      	movs	r3, #0
 8004946:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8004948:	2300      	movs	r3, #0
 800494a:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 800494c:	2300      	movs	r3, #0
 800494e:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8004950:	2300      	movs	r3, #0
 8004952:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8004954:	2300      	movs	r3, #0
 8004956:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8004958:	2300      	movs	r3, #0
 800495a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 800495c:	2300      	movs	r3, #0
 800495e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f003 0301 	and.w	r3, r3, #1
 8004968:	2b00      	cmp	r3, #0
 800496a:	d010      	beq.n	800498e <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 800496c:	4b6f      	ldr	r3, [pc, #444]	; (8004b2c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800496e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004972:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800497a:	496c      	ldr	r1, [pc, #432]	; (8004b2c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800497c:	4313      	orrs	r3, r2
 800497e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004986:	2b00      	cmp	r3, #0
 8004988:	d101      	bne.n	800498e <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 800498a:	2301      	movs	r3, #1
 800498c:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f003 0302 	and.w	r3, r3, #2
 8004996:	2b00      	cmp	r3, #0
 8004998:	d010      	beq.n	80049bc <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 800499a:	4b64      	ldr	r3, [pc, #400]	; (8004b2c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800499c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80049a0:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049a8:	4960      	ldr	r1, [pc, #384]	; (8004b2c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80049aa:	4313      	orrs	r3, r2
 80049ac:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d101      	bne.n	80049bc <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 80049b8:	2301      	movs	r3, #1
 80049ba:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f003 0304 	and.w	r3, r3, #4
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d017      	beq.n	80049f8 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80049c8:	4b58      	ldr	r3, [pc, #352]	; (8004b2c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80049ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80049ce:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049d6:	4955      	ldr	r1, [pc, #340]	; (8004b2c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80049d8:	4313      	orrs	r3, r2
 80049da:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049e2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80049e6:	d101      	bne.n	80049ec <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 80049e8:	2301      	movs	r3, #1
 80049ea:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d101      	bne.n	80049f8 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 80049f4:	2301      	movs	r3, #1
 80049f6:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f003 0308 	and.w	r3, r3, #8
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d017      	beq.n	8004a34 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004a04:	4b49      	ldr	r3, [pc, #292]	; (8004b2c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004a06:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004a0a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a12:	4946      	ldr	r1, [pc, #280]	; (8004b2c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004a14:	4313      	orrs	r3, r2
 8004a16:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a1e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004a22:	d101      	bne.n	8004a28 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8004a24:	2301      	movs	r3, #1
 8004a26:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d101      	bne.n	8004a34 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8004a30:	2301      	movs	r3, #1
 8004a32:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f003 0320 	and.w	r3, r3, #32
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	f000 808a 	beq.w	8004b56 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004a42:	2300      	movs	r3, #0
 8004a44:	60bb      	str	r3, [r7, #8]
 8004a46:	4b39      	ldr	r3, [pc, #228]	; (8004b2c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a4a:	4a38      	ldr	r2, [pc, #224]	; (8004b2c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004a4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a50:	6413      	str	r3, [r2, #64]	; 0x40
 8004a52:	4b36      	ldr	r3, [pc, #216]	; (8004b2c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004a54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a5a:	60bb      	str	r3, [r7, #8]
 8004a5c:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004a5e:	4b34      	ldr	r3, [pc, #208]	; (8004b30 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	4a33      	ldr	r2, [pc, #204]	; (8004b30 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8004a64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a68:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004a6a:	f7fd f8df 	bl	8001c2c <HAL_GetTick>
 8004a6e:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004a70:	e008      	b.n	8004a84 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004a72:	f7fd f8db 	bl	8001c2c <HAL_GetTick>
 8004a76:	4602      	mov	r2, r0
 8004a78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a7a:	1ad3      	subs	r3, r2, r3
 8004a7c:	2b02      	cmp	r3, #2
 8004a7e:	d901      	bls.n	8004a84 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8004a80:	2303      	movs	r3, #3
 8004a82:	e278      	b.n	8004f76 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004a84:	4b2a      	ldr	r3, [pc, #168]	; (8004b30 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d0f0      	beq.n	8004a72 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004a90:	4b26      	ldr	r3, [pc, #152]	; (8004b2c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004a92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a94:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a98:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004a9a:	6a3b      	ldr	r3, [r7, #32]
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d02f      	beq.n	8004b00 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aa4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004aa8:	6a3a      	ldr	r2, [r7, #32]
 8004aaa:	429a      	cmp	r2, r3
 8004aac:	d028      	beq.n	8004b00 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004aae:	4b1f      	ldr	r3, [pc, #124]	; (8004b2c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004ab0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ab2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ab6:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004ab8:	4b1e      	ldr	r3, [pc, #120]	; (8004b34 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8004aba:	2201      	movs	r2, #1
 8004abc:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004abe:	4b1d      	ldr	r3, [pc, #116]	; (8004b34 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8004ac0:	2200      	movs	r2, #0
 8004ac2:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004ac4:	4a19      	ldr	r2, [pc, #100]	; (8004b2c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004ac6:	6a3b      	ldr	r3, [r7, #32]
 8004ac8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004aca:	4b18      	ldr	r3, [pc, #96]	; (8004b2c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004acc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ace:	f003 0301 	and.w	r3, r3, #1
 8004ad2:	2b01      	cmp	r3, #1
 8004ad4:	d114      	bne.n	8004b00 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004ad6:	f7fd f8a9 	bl	8001c2c <HAL_GetTick>
 8004ada:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004adc:	e00a      	b.n	8004af4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004ade:	f7fd f8a5 	bl	8001c2c <HAL_GetTick>
 8004ae2:	4602      	mov	r2, r0
 8004ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ae6:	1ad3      	subs	r3, r2, r3
 8004ae8:	f241 3288 	movw	r2, #5000	; 0x1388
 8004aec:	4293      	cmp	r3, r2
 8004aee:	d901      	bls.n	8004af4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8004af0:	2303      	movs	r3, #3
 8004af2:	e240      	b.n	8004f76 <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004af4:	4b0d      	ldr	r3, [pc, #52]	; (8004b2c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004af6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004af8:	f003 0302 	and.w	r3, r3, #2
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d0ee      	beq.n	8004ade <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b04:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b08:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004b0c:	d114      	bne.n	8004b38 <HAL_RCCEx_PeriphCLKConfig+0x204>
 8004b0e:	4b07      	ldr	r3, [pc, #28]	; (8004b2c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004b10:	689b      	ldr	r3, [r3, #8]
 8004b12:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b1a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004b1e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b22:	4902      	ldr	r1, [pc, #8]	; (8004b2c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004b24:	4313      	orrs	r3, r2
 8004b26:	608b      	str	r3, [r1, #8]
 8004b28:	e00c      	b.n	8004b44 <HAL_RCCEx_PeriphCLKConfig+0x210>
 8004b2a:	bf00      	nop
 8004b2c:	40023800 	.word	0x40023800
 8004b30:	40007000 	.word	0x40007000
 8004b34:	42470e40 	.word	0x42470e40
 8004b38:	4b4a      	ldr	r3, [pc, #296]	; (8004c64 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004b3a:	689b      	ldr	r3, [r3, #8]
 8004b3c:	4a49      	ldr	r2, [pc, #292]	; (8004c64 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004b3e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004b42:	6093      	str	r3, [r2, #8]
 8004b44:	4b47      	ldr	r3, [pc, #284]	; (8004c64 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004b46:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b4c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b50:	4944      	ldr	r1, [pc, #272]	; (8004c64 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004b52:	4313      	orrs	r3, r2
 8004b54:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f003 0310 	and.w	r3, r3, #16
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d004      	beq.n	8004b6c <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8004b68:	4b3f      	ldr	r3, [pc, #252]	; (8004c68 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8004b6a:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d00a      	beq.n	8004b8e <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8004b78:	4b3a      	ldr	r3, [pc, #232]	; (8004c64 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004b7a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004b7e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b86:	4937      	ldr	r1, [pc, #220]	; (8004c64 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004b88:	4313      	orrs	r3, r2
 8004b8a:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d00a      	beq.n	8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004b9a:	4b32      	ldr	r3, [pc, #200]	; (8004c64 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004b9c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004ba0:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ba8:	492e      	ldr	r1, [pc, #184]	; (8004c64 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004baa:	4313      	orrs	r3, r2
 8004bac:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d011      	beq.n	8004be0 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004bbc:	4b29      	ldr	r3, [pc, #164]	; (8004c64 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004bbe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004bc2:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bca:	4926      	ldr	r1, [pc, #152]	; (8004c64 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004bcc:	4313      	orrs	r3, r2
 8004bce:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bd6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004bda:	d101      	bne.n	8004be0 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8004bdc:	2301      	movs	r3, #1
 8004bde:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d00a      	beq.n	8004c02 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8004bec:	4b1d      	ldr	r3, [pc, #116]	; (8004c64 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004bee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004bf2:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bfa:	491a      	ldr	r1, [pc, #104]	; (8004c64 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004bfc:	4313      	orrs	r3, r2
 8004bfe:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d011      	beq.n	8004c32 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8004c0e:	4b15      	ldr	r3, [pc, #84]	; (8004c64 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004c10:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004c14:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c1c:	4911      	ldr	r1, [pc, #68]	; (8004c64 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8004c1e:	4313      	orrs	r3, r2
 8004c20:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c28:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004c2c:	d101      	bne.n	8004c32 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 8004c2e:	2301      	movs	r3, #1
 8004c30:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8004c32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c34:	2b01      	cmp	r3, #1
 8004c36:	d005      	beq.n	8004c44 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004c40:	f040 80ff 	bne.w	8004e42 <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004c44:	4b09      	ldr	r3, [pc, #36]	; (8004c6c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004c46:	2200      	movs	r2, #0
 8004c48:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004c4a:	f7fc ffef 	bl	8001c2c <HAL_GetTick>
 8004c4e:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004c50:	e00e      	b.n	8004c70 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004c52:	f7fc ffeb 	bl	8001c2c <HAL_GetTick>
 8004c56:	4602      	mov	r2, r0
 8004c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c5a:	1ad3      	subs	r3, r2, r3
 8004c5c:	2b02      	cmp	r3, #2
 8004c5e:	d907      	bls.n	8004c70 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004c60:	2303      	movs	r3, #3
 8004c62:	e188      	b.n	8004f76 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8004c64:	40023800 	.word	0x40023800
 8004c68:	424711e0 	.word	0x424711e0
 8004c6c:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004c70:	4b7e      	ldr	r3, [pc, #504]	; (8004e6c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d1ea      	bne.n	8004c52 <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f003 0301 	and.w	r3, r3, #1
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d003      	beq.n	8004c90 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d009      	beq.n	8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d028      	beq.n	8004cee <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d124      	bne.n	8004cee <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8004ca4:	4b71      	ldr	r3, [pc, #452]	; (8004e6c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004ca6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004caa:	0c1b      	lsrs	r3, r3, #16
 8004cac:	f003 0303 	and.w	r3, r3, #3
 8004cb0:	3301      	adds	r3, #1
 8004cb2:	005b      	lsls	r3, r3, #1
 8004cb4:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004cb6:	4b6d      	ldr	r3, [pc, #436]	; (8004e6c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004cb8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004cbc:	0e1b      	lsrs	r3, r3, #24
 8004cbe:	f003 030f 	and.w	r3, r3, #15
 8004cc2:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	685a      	ldr	r2, [r3, #4]
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	689b      	ldr	r3, [r3, #8]
 8004ccc:	019b      	lsls	r3, r3, #6
 8004cce:	431a      	orrs	r2, r3
 8004cd0:	69fb      	ldr	r3, [r7, #28]
 8004cd2:	085b      	lsrs	r3, r3, #1
 8004cd4:	3b01      	subs	r3, #1
 8004cd6:	041b      	lsls	r3, r3, #16
 8004cd8:	431a      	orrs	r2, r3
 8004cda:	69bb      	ldr	r3, [r7, #24]
 8004cdc:	061b      	lsls	r3, r3, #24
 8004cde:	431a      	orrs	r2, r3
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	695b      	ldr	r3, [r3, #20]
 8004ce4:	071b      	lsls	r3, r3, #28
 8004ce6:	4961      	ldr	r1, [pc, #388]	; (8004e6c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004ce8:	4313      	orrs	r3, r2
 8004cea:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f003 0304 	and.w	r3, r3, #4
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d004      	beq.n	8004d04 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cfe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004d02:	d00a      	beq.n	8004d1a <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d035      	beq.n	8004d7c <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d14:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004d18:	d130      	bne.n	8004d7c <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8004d1a:	4b54      	ldr	r3, [pc, #336]	; (8004e6c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004d1c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004d20:	0c1b      	lsrs	r3, r3, #16
 8004d22:	f003 0303 	and.w	r3, r3, #3
 8004d26:	3301      	adds	r3, #1
 8004d28:	005b      	lsls	r3, r3, #1
 8004d2a:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004d2c:	4b4f      	ldr	r3, [pc, #316]	; (8004e6c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004d2e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004d32:	0f1b      	lsrs	r3, r3, #28
 8004d34:	f003 0307 	and.w	r3, r3, #7
 8004d38:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	685a      	ldr	r2, [r3, #4]
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	689b      	ldr	r3, [r3, #8]
 8004d42:	019b      	lsls	r3, r3, #6
 8004d44:	431a      	orrs	r2, r3
 8004d46:	69fb      	ldr	r3, [r7, #28]
 8004d48:	085b      	lsrs	r3, r3, #1
 8004d4a:	3b01      	subs	r3, #1
 8004d4c:	041b      	lsls	r3, r3, #16
 8004d4e:	431a      	orrs	r2, r3
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	691b      	ldr	r3, [r3, #16]
 8004d54:	061b      	lsls	r3, r3, #24
 8004d56:	431a      	orrs	r2, r3
 8004d58:	697b      	ldr	r3, [r7, #20]
 8004d5a:	071b      	lsls	r3, r3, #28
 8004d5c:	4943      	ldr	r1, [pc, #268]	; (8004e6c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004d5e:	4313      	orrs	r3, r2
 8004d60:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004d64:	4b41      	ldr	r3, [pc, #260]	; (8004e6c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004d66:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004d6a:	f023 021f 	bic.w	r2, r3, #31
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d72:	3b01      	subs	r3, #1
 8004d74:	493d      	ldr	r1, [pc, #244]	; (8004e6c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004d76:	4313      	orrs	r3, r2
 8004d78:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d029      	beq.n	8004ddc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d8c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004d90:	d124      	bne.n	8004ddc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8004d92:	4b36      	ldr	r3, [pc, #216]	; (8004e6c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004d94:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004d98:	0c1b      	lsrs	r3, r3, #16
 8004d9a:	f003 0303 	and.w	r3, r3, #3
 8004d9e:	3301      	adds	r3, #1
 8004da0:	005b      	lsls	r3, r3, #1
 8004da2:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004da4:	4b31      	ldr	r3, [pc, #196]	; (8004e6c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004da6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004daa:	0f1b      	lsrs	r3, r3, #28
 8004dac:	f003 0307 	and.w	r3, r3, #7
 8004db0:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	685a      	ldr	r2, [r3, #4]
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	689b      	ldr	r3, [r3, #8]
 8004dba:	019b      	lsls	r3, r3, #6
 8004dbc:	431a      	orrs	r2, r3
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	68db      	ldr	r3, [r3, #12]
 8004dc2:	085b      	lsrs	r3, r3, #1
 8004dc4:	3b01      	subs	r3, #1
 8004dc6:	041b      	lsls	r3, r3, #16
 8004dc8:	431a      	orrs	r2, r3
 8004dca:	69bb      	ldr	r3, [r7, #24]
 8004dcc:	061b      	lsls	r3, r3, #24
 8004dce:	431a      	orrs	r2, r3
 8004dd0:	697b      	ldr	r3, [r7, #20]
 8004dd2:	071b      	lsls	r3, r3, #28
 8004dd4:	4925      	ldr	r1, [pc, #148]	; (8004e6c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004dd6:	4313      	orrs	r3, r2
 8004dd8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d016      	beq.n	8004e16 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	685a      	ldr	r2, [r3, #4]
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	689b      	ldr	r3, [r3, #8]
 8004df0:	019b      	lsls	r3, r3, #6
 8004df2:	431a      	orrs	r2, r3
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	68db      	ldr	r3, [r3, #12]
 8004df8:	085b      	lsrs	r3, r3, #1
 8004dfa:	3b01      	subs	r3, #1
 8004dfc:	041b      	lsls	r3, r3, #16
 8004dfe:	431a      	orrs	r2, r3
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	691b      	ldr	r3, [r3, #16]
 8004e04:	061b      	lsls	r3, r3, #24
 8004e06:	431a      	orrs	r2, r3
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	695b      	ldr	r3, [r3, #20]
 8004e0c:	071b      	lsls	r3, r3, #28
 8004e0e:	4917      	ldr	r1, [pc, #92]	; (8004e6c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004e10:	4313      	orrs	r3, r2
 8004e12:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004e16:	4b16      	ldr	r3, [pc, #88]	; (8004e70 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8004e18:	2201      	movs	r2, #1
 8004e1a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004e1c:	f7fc ff06 	bl	8001c2c <HAL_GetTick>
 8004e20:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004e22:	e008      	b.n	8004e36 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004e24:	f7fc ff02 	bl	8001c2c <HAL_GetTick>
 8004e28:	4602      	mov	r2, r0
 8004e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e2c:	1ad3      	subs	r3, r2, r3
 8004e2e:	2b02      	cmp	r3, #2
 8004e30:	d901      	bls.n	8004e36 <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004e32:	2303      	movs	r3, #3
 8004e34:	e09f      	b.n	8004f76 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004e36:	4b0d      	ldr	r3, [pc, #52]	; (8004e6c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d0f0      	beq.n	8004e24 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 8004e42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e44:	2b01      	cmp	r3, #1
 8004e46:	f040 8095 	bne.w	8004f74 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004e4a:	4b0a      	ldr	r3, [pc, #40]	; (8004e74 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8004e4c:	2200      	movs	r2, #0
 8004e4e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004e50:	f7fc feec 	bl	8001c2c <HAL_GetTick>
 8004e54:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004e56:	e00f      	b.n	8004e78 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8004e58:	f7fc fee8 	bl	8001c2c <HAL_GetTick>
 8004e5c:	4602      	mov	r2, r0
 8004e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e60:	1ad3      	subs	r3, r2, r3
 8004e62:	2b02      	cmp	r3, #2
 8004e64:	d908      	bls.n	8004e78 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004e66:	2303      	movs	r3, #3
 8004e68:	e085      	b.n	8004f76 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8004e6a:	bf00      	nop
 8004e6c:	40023800 	.word	0x40023800
 8004e70:	42470068 	.word	0x42470068
 8004e74:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004e78:	4b41      	ldr	r3, [pc, #260]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004e80:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004e84:	d0e8      	beq.n	8004e58 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	f003 0304 	and.w	r3, r3, #4
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d003      	beq.n	8004e9a <HAL_RCCEx_PeriphCLKConfig+0x566>
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d009      	beq.n	8004eae <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d02b      	beq.n	8004efe <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d127      	bne.n	8004efe <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8004eae:	4b34      	ldr	r3, [pc, #208]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004eb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004eb4:	0c1b      	lsrs	r3, r3, #16
 8004eb6:	f003 0303 	and.w	r3, r3, #3
 8004eba:	3301      	adds	r3, #1
 8004ebc:	005b      	lsls	r3, r3, #1
 8004ebe:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	699a      	ldr	r2, [r3, #24]
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	69db      	ldr	r3, [r3, #28]
 8004ec8:	019b      	lsls	r3, r3, #6
 8004eca:	431a      	orrs	r2, r3
 8004ecc:	693b      	ldr	r3, [r7, #16]
 8004ece:	085b      	lsrs	r3, r3, #1
 8004ed0:	3b01      	subs	r3, #1
 8004ed2:	041b      	lsls	r3, r3, #16
 8004ed4:	431a      	orrs	r2, r3
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eda:	061b      	lsls	r3, r3, #24
 8004edc:	4928      	ldr	r1, [pc, #160]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004ede:	4313      	orrs	r3, r2
 8004ee0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004ee4:	4b26      	ldr	r3, [pc, #152]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004ee6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004eea:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ef2:	3b01      	subs	r3, #1
 8004ef4:	021b      	lsls	r3, r3, #8
 8004ef6:	4922      	ldr	r1, [pc, #136]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004ef8:	4313      	orrs	r3, r2
 8004efa:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d01d      	beq.n	8004f46 <HAL_RCCEx_PeriphCLKConfig+0x612>
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f0e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004f12:	d118      	bne.n	8004f46 <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004f14:	4b1a      	ldr	r3, [pc, #104]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004f16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f1a:	0e1b      	lsrs	r3, r3, #24
 8004f1c:	f003 030f 	and.w	r3, r3, #15
 8004f20:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	699a      	ldr	r2, [r3, #24]
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	69db      	ldr	r3, [r3, #28]
 8004f2a:	019b      	lsls	r3, r3, #6
 8004f2c:	431a      	orrs	r2, r3
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	6a1b      	ldr	r3, [r3, #32]
 8004f32:	085b      	lsrs	r3, r3, #1
 8004f34:	3b01      	subs	r3, #1
 8004f36:	041b      	lsls	r3, r3, #16
 8004f38:	431a      	orrs	r2, r3
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	061b      	lsls	r3, r3, #24
 8004f3e:	4910      	ldr	r1, [pc, #64]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004f40:	4313      	orrs	r3, r2
 8004f42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004f46:	4b0f      	ldr	r3, [pc, #60]	; (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8004f48:	2201      	movs	r2, #1
 8004f4a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004f4c:	f7fc fe6e 	bl	8001c2c <HAL_GetTick>
 8004f50:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004f52:	e008      	b.n	8004f66 <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8004f54:	f7fc fe6a 	bl	8001c2c <HAL_GetTick>
 8004f58:	4602      	mov	r2, r0
 8004f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f5c:	1ad3      	subs	r3, r2, r3
 8004f5e:	2b02      	cmp	r3, #2
 8004f60:	d901      	bls.n	8004f66 <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004f62:	2303      	movs	r3, #3
 8004f64:	e007      	b.n	8004f76 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004f66:	4b06      	ldr	r3, [pc, #24]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004f6e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004f72:	d1ef      	bne.n	8004f54 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8004f74:	2300      	movs	r3, #0
}
 8004f76:	4618      	mov	r0, r3
 8004f78:	3730      	adds	r7, #48	; 0x30
 8004f7a:	46bd      	mov	sp, r7
 8004f7c:	bd80      	pop	{r7, pc}
 8004f7e:	bf00      	nop
 8004f80:	40023800 	.word	0x40023800
 8004f84:	42470070 	.word	0x42470070

08004f88 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004f88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004f8a:	b087      	sub	sp, #28
 8004f8c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004f8e:	2300      	movs	r3, #0
 8004f90:	60fb      	str	r3, [r7, #12]
  uint32_t pllvco = 0U;
 8004f92:	2300      	movs	r3, #0
 8004f94:	617b      	str	r3, [r7, #20]
  uint32_t pllp = 0U;
 8004f96:	2300      	movs	r3, #0
 8004f98:	60bb      	str	r3, [r7, #8]
  uint32_t pllr = 0U;
 8004f9a:	2300      	movs	r3, #0
 8004f9c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004f9e:	2300      	movs	r3, #0
 8004fa0:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004fa2:	4b9f      	ldr	r3, [pc, #636]	; (8005220 <HAL_RCC_GetSysClockFreq+0x298>)
 8004fa4:	689b      	ldr	r3, [r3, #8]
 8004fa6:	f003 030c 	and.w	r3, r3, #12
 8004faa:	2b0c      	cmp	r3, #12
 8004fac:	f200 8130 	bhi.w	8005210 <HAL_RCC_GetSysClockFreq+0x288>
 8004fb0:	a201      	add	r2, pc, #4	; (adr r2, 8004fb8 <HAL_RCC_GetSysClockFreq+0x30>)
 8004fb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fb6:	bf00      	nop
 8004fb8:	08004fed 	.word	0x08004fed
 8004fbc:	08005211 	.word	0x08005211
 8004fc0:	08005211 	.word	0x08005211
 8004fc4:	08005211 	.word	0x08005211
 8004fc8:	08004ff3 	.word	0x08004ff3
 8004fcc:	08005211 	.word	0x08005211
 8004fd0:	08005211 	.word	0x08005211
 8004fd4:	08005211 	.word	0x08005211
 8004fd8:	08004ff9 	.word	0x08004ff9
 8004fdc:	08005211 	.word	0x08005211
 8004fe0:	08005211 	.word	0x08005211
 8004fe4:	08005211 	.word	0x08005211
 8004fe8:	08005107 	.word	0x08005107
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004fec:	4b8d      	ldr	r3, [pc, #564]	; (8005224 <HAL_RCC_GetSysClockFreq+0x29c>)
 8004fee:	613b      	str	r3, [r7, #16]
       break;
 8004ff0:	e111      	b.n	8005216 <HAL_RCC_GetSysClockFreq+0x28e>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004ff2:	4b8d      	ldr	r3, [pc, #564]	; (8005228 <HAL_RCC_GetSysClockFreq+0x2a0>)
 8004ff4:	613b      	str	r3, [r7, #16]
      break;
 8004ff6:	e10e      	b.n	8005216 <HAL_RCC_GetSysClockFreq+0x28e>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004ff8:	4b89      	ldr	r3, [pc, #548]	; (8005220 <HAL_RCC_GetSysClockFreq+0x298>)
 8004ffa:	685b      	ldr	r3, [r3, #4]
 8004ffc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005000:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005002:	4b87      	ldr	r3, [pc, #540]	; (8005220 <HAL_RCC_GetSysClockFreq+0x298>)
 8005004:	685b      	ldr	r3, [r3, #4]
 8005006:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800500a:	2b00      	cmp	r3, #0
 800500c:	d023      	beq.n	8005056 <HAL_RCC_GetSysClockFreq+0xce>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800500e:	4b84      	ldr	r3, [pc, #528]	; (8005220 <HAL_RCC_GetSysClockFreq+0x298>)
 8005010:	685b      	ldr	r3, [r3, #4]
 8005012:	099b      	lsrs	r3, r3, #6
 8005014:	f04f 0400 	mov.w	r4, #0
 8005018:	f240 11ff 	movw	r1, #511	; 0x1ff
 800501c:	f04f 0200 	mov.w	r2, #0
 8005020:	ea03 0501 	and.w	r5, r3, r1
 8005024:	ea04 0602 	and.w	r6, r4, r2
 8005028:	4a7f      	ldr	r2, [pc, #508]	; (8005228 <HAL_RCC_GetSysClockFreq+0x2a0>)
 800502a:	fb02 f106 	mul.w	r1, r2, r6
 800502e:	2200      	movs	r2, #0
 8005030:	fb02 f205 	mul.w	r2, r2, r5
 8005034:	440a      	add	r2, r1
 8005036:	497c      	ldr	r1, [pc, #496]	; (8005228 <HAL_RCC_GetSysClockFreq+0x2a0>)
 8005038:	fba5 0101 	umull	r0, r1, r5, r1
 800503c:	1853      	adds	r3, r2, r1
 800503e:	4619      	mov	r1, r3
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	f04f 0400 	mov.w	r4, #0
 8005046:	461a      	mov	r2, r3
 8005048:	4623      	mov	r3, r4
 800504a:	f7fb fe3d 	bl	8000cc8 <__aeabi_uldivmod>
 800504e:	4603      	mov	r3, r0
 8005050:	460c      	mov	r4, r1
 8005052:	617b      	str	r3, [r7, #20]
 8005054:	e049      	b.n	80050ea <HAL_RCC_GetSysClockFreq+0x162>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005056:	4b72      	ldr	r3, [pc, #456]	; (8005220 <HAL_RCC_GetSysClockFreq+0x298>)
 8005058:	685b      	ldr	r3, [r3, #4]
 800505a:	099b      	lsrs	r3, r3, #6
 800505c:	f04f 0400 	mov.w	r4, #0
 8005060:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005064:	f04f 0200 	mov.w	r2, #0
 8005068:	ea03 0501 	and.w	r5, r3, r1
 800506c:	ea04 0602 	and.w	r6, r4, r2
 8005070:	4629      	mov	r1, r5
 8005072:	4632      	mov	r2, r6
 8005074:	f04f 0300 	mov.w	r3, #0
 8005078:	f04f 0400 	mov.w	r4, #0
 800507c:	0154      	lsls	r4, r2, #5
 800507e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8005082:	014b      	lsls	r3, r1, #5
 8005084:	4619      	mov	r1, r3
 8005086:	4622      	mov	r2, r4
 8005088:	1b49      	subs	r1, r1, r5
 800508a:	eb62 0206 	sbc.w	r2, r2, r6
 800508e:	f04f 0300 	mov.w	r3, #0
 8005092:	f04f 0400 	mov.w	r4, #0
 8005096:	0194      	lsls	r4, r2, #6
 8005098:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800509c:	018b      	lsls	r3, r1, #6
 800509e:	1a5b      	subs	r3, r3, r1
 80050a0:	eb64 0402 	sbc.w	r4, r4, r2
 80050a4:	f04f 0100 	mov.w	r1, #0
 80050a8:	f04f 0200 	mov.w	r2, #0
 80050ac:	00e2      	lsls	r2, r4, #3
 80050ae:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80050b2:	00d9      	lsls	r1, r3, #3
 80050b4:	460b      	mov	r3, r1
 80050b6:	4614      	mov	r4, r2
 80050b8:	195b      	adds	r3, r3, r5
 80050ba:	eb44 0406 	adc.w	r4, r4, r6
 80050be:	f04f 0100 	mov.w	r1, #0
 80050c2:	f04f 0200 	mov.w	r2, #0
 80050c6:	02a2      	lsls	r2, r4, #10
 80050c8:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80050cc:	0299      	lsls	r1, r3, #10
 80050ce:	460b      	mov	r3, r1
 80050d0:	4614      	mov	r4, r2
 80050d2:	4618      	mov	r0, r3
 80050d4:	4621      	mov	r1, r4
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	f04f 0400 	mov.w	r4, #0
 80050dc:	461a      	mov	r2, r3
 80050de:	4623      	mov	r3, r4
 80050e0:	f7fb fdf2 	bl	8000cc8 <__aeabi_uldivmod>
 80050e4:	4603      	mov	r3, r0
 80050e6:	460c      	mov	r4, r1
 80050e8:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80050ea:	4b4d      	ldr	r3, [pc, #308]	; (8005220 <HAL_RCC_GetSysClockFreq+0x298>)
 80050ec:	685b      	ldr	r3, [r3, #4]
 80050ee:	0c1b      	lsrs	r3, r3, #16
 80050f0:	f003 0303 	and.w	r3, r3, #3
 80050f4:	3301      	adds	r3, #1
 80050f6:	005b      	lsls	r3, r3, #1
 80050f8:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 80050fa:	697a      	ldr	r2, [r7, #20]
 80050fc:	68bb      	ldr	r3, [r7, #8]
 80050fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8005102:	613b      	str	r3, [r7, #16]
      break;
 8005104:	e087      	b.n	8005216 <HAL_RCC_GetSysClockFreq+0x28e>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005106:	4b46      	ldr	r3, [pc, #280]	; (8005220 <HAL_RCC_GetSysClockFreq+0x298>)
 8005108:	685b      	ldr	r3, [r3, #4]
 800510a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800510e:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005110:	4b43      	ldr	r3, [pc, #268]	; (8005220 <HAL_RCC_GetSysClockFreq+0x298>)
 8005112:	685b      	ldr	r3, [r3, #4]
 8005114:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005118:	2b00      	cmp	r3, #0
 800511a:	d023      	beq.n	8005164 <HAL_RCC_GetSysClockFreq+0x1dc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800511c:	4b40      	ldr	r3, [pc, #256]	; (8005220 <HAL_RCC_GetSysClockFreq+0x298>)
 800511e:	685b      	ldr	r3, [r3, #4]
 8005120:	099b      	lsrs	r3, r3, #6
 8005122:	f04f 0400 	mov.w	r4, #0
 8005126:	f240 11ff 	movw	r1, #511	; 0x1ff
 800512a:	f04f 0200 	mov.w	r2, #0
 800512e:	ea03 0501 	and.w	r5, r3, r1
 8005132:	ea04 0602 	and.w	r6, r4, r2
 8005136:	4a3c      	ldr	r2, [pc, #240]	; (8005228 <HAL_RCC_GetSysClockFreq+0x2a0>)
 8005138:	fb02 f106 	mul.w	r1, r2, r6
 800513c:	2200      	movs	r2, #0
 800513e:	fb02 f205 	mul.w	r2, r2, r5
 8005142:	440a      	add	r2, r1
 8005144:	4938      	ldr	r1, [pc, #224]	; (8005228 <HAL_RCC_GetSysClockFreq+0x2a0>)
 8005146:	fba5 0101 	umull	r0, r1, r5, r1
 800514a:	1853      	adds	r3, r2, r1
 800514c:	4619      	mov	r1, r3
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	f04f 0400 	mov.w	r4, #0
 8005154:	461a      	mov	r2, r3
 8005156:	4623      	mov	r3, r4
 8005158:	f7fb fdb6 	bl	8000cc8 <__aeabi_uldivmod>
 800515c:	4603      	mov	r3, r0
 800515e:	460c      	mov	r4, r1
 8005160:	617b      	str	r3, [r7, #20]
 8005162:	e049      	b.n	80051f8 <HAL_RCC_GetSysClockFreq+0x270>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005164:	4b2e      	ldr	r3, [pc, #184]	; (8005220 <HAL_RCC_GetSysClockFreq+0x298>)
 8005166:	685b      	ldr	r3, [r3, #4]
 8005168:	099b      	lsrs	r3, r3, #6
 800516a:	f04f 0400 	mov.w	r4, #0
 800516e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005172:	f04f 0200 	mov.w	r2, #0
 8005176:	ea03 0501 	and.w	r5, r3, r1
 800517a:	ea04 0602 	and.w	r6, r4, r2
 800517e:	4629      	mov	r1, r5
 8005180:	4632      	mov	r2, r6
 8005182:	f04f 0300 	mov.w	r3, #0
 8005186:	f04f 0400 	mov.w	r4, #0
 800518a:	0154      	lsls	r4, r2, #5
 800518c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8005190:	014b      	lsls	r3, r1, #5
 8005192:	4619      	mov	r1, r3
 8005194:	4622      	mov	r2, r4
 8005196:	1b49      	subs	r1, r1, r5
 8005198:	eb62 0206 	sbc.w	r2, r2, r6
 800519c:	f04f 0300 	mov.w	r3, #0
 80051a0:	f04f 0400 	mov.w	r4, #0
 80051a4:	0194      	lsls	r4, r2, #6
 80051a6:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80051aa:	018b      	lsls	r3, r1, #6
 80051ac:	1a5b      	subs	r3, r3, r1
 80051ae:	eb64 0402 	sbc.w	r4, r4, r2
 80051b2:	f04f 0100 	mov.w	r1, #0
 80051b6:	f04f 0200 	mov.w	r2, #0
 80051ba:	00e2      	lsls	r2, r4, #3
 80051bc:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80051c0:	00d9      	lsls	r1, r3, #3
 80051c2:	460b      	mov	r3, r1
 80051c4:	4614      	mov	r4, r2
 80051c6:	195b      	adds	r3, r3, r5
 80051c8:	eb44 0406 	adc.w	r4, r4, r6
 80051cc:	f04f 0100 	mov.w	r1, #0
 80051d0:	f04f 0200 	mov.w	r2, #0
 80051d4:	02a2      	lsls	r2, r4, #10
 80051d6:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80051da:	0299      	lsls	r1, r3, #10
 80051dc:	460b      	mov	r3, r1
 80051de:	4614      	mov	r4, r2
 80051e0:	4618      	mov	r0, r3
 80051e2:	4621      	mov	r1, r4
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	f04f 0400 	mov.w	r4, #0
 80051ea:	461a      	mov	r2, r3
 80051ec:	4623      	mov	r3, r4
 80051ee:	f7fb fd6b 	bl	8000cc8 <__aeabi_uldivmod>
 80051f2:	4603      	mov	r3, r0
 80051f4:	460c      	mov	r4, r1
 80051f6:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80051f8:	4b09      	ldr	r3, [pc, #36]	; (8005220 <HAL_RCC_GetSysClockFreq+0x298>)
 80051fa:	685b      	ldr	r3, [r3, #4]
 80051fc:	0f1b      	lsrs	r3, r3, #28
 80051fe:	f003 0307 	and.w	r3, r3, #7
 8005202:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 8005204:	697a      	ldr	r2, [r7, #20]
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	fbb2 f3f3 	udiv	r3, r2, r3
 800520c:	613b      	str	r3, [r7, #16]
      break;
 800520e:	e002      	b.n	8005216 <HAL_RCC_GetSysClockFreq+0x28e>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005210:	4b04      	ldr	r3, [pc, #16]	; (8005224 <HAL_RCC_GetSysClockFreq+0x29c>)
 8005212:	613b      	str	r3, [r7, #16]
      break;
 8005214:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005216:	693b      	ldr	r3, [r7, #16]
}
 8005218:	4618      	mov	r0, r3
 800521a:	371c      	adds	r7, #28
 800521c:	46bd      	mov	sp, r7
 800521e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005220:	40023800 	.word	0x40023800
 8005224:	00f42400 	.word	0x00f42400
 8005228:	00989680 	.word	0x00989680

0800522c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800522c:	b580      	push	{r7, lr}
 800522e:	b086      	sub	sp, #24
 8005230:	af00      	add	r7, sp, #0
 8005232:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005234:	2300      	movs	r3, #0
 8005236:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	f003 0301 	and.w	r3, r3, #1
 8005240:	2b00      	cmp	r3, #0
 8005242:	f000 8083 	beq.w	800534c <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8005246:	4b95      	ldr	r3, [pc, #596]	; (800549c <HAL_RCC_OscConfig+0x270>)
 8005248:	689b      	ldr	r3, [r3, #8]
 800524a:	f003 030c 	and.w	r3, r3, #12
 800524e:	2b04      	cmp	r3, #4
 8005250:	d019      	beq.n	8005286 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8005252:	4b92      	ldr	r3, [pc, #584]	; (800549c <HAL_RCC_OscConfig+0x270>)
 8005254:	689b      	ldr	r3, [r3, #8]
 8005256:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800525a:	2b08      	cmp	r3, #8
 800525c:	d106      	bne.n	800526c <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800525e:	4b8f      	ldr	r3, [pc, #572]	; (800549c <HAL_RCC_OscConfig+0x270>)
 8005260:	685b      	ldr	r3, [r3, #4]
 8005262:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005266:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800526a:	d00c      	beq.n	8005286 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800526c:	4b8b      	ldr	r3, [pc, #556]	; (800549c <HAL_RCC_OscConfig+0x270>)
 800526e:	689b      	ldr	r3, [r3, #8]
 8005270:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8005274:	2b0c      	cmp	r3, #12
 8005276:	d112      	bne.n	800529e <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005278:	4b88      	ldr	r3, [pc, #544]	; (800549c <HAL_RCC_OscConfig+0x270>)
 800527a:	685b      	ldr	r3, [r3, #4]
 800527c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005280:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005284:	d10b      	bne.n	800529e <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005286:	4b85      	ldr	r3, [pc, #532]	; (800549c <HAL_RCC_OscConfig+0x270>)
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800528e:	2b00      	cmp	r3, #0
 8005290:	d05b      	beq.n	800534a <HAL_RCC_OscConfig+0x11e>
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	685b      	ldr	r3, [r3, #4]
 8005296:	2b00      	cmp	r3, #0
 8005298:	d157      	bne.n	800534a <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 800529a:	2301      	movs	r3, #1
 800529c:	e216      	b.n	80056cc <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	685b      	ldr	r3, [r3, #4]
 80052a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80052a6:	d106      	bne.n	80052b6 <HAL_RCC_OscConfig+0x8a>
 80052a8:	4b7c      	ldr	r3, [pc, #496]	; (800549c <HAL_RCC_OscConfig+0x270>)
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	4a7b      	ldr	r2, [pc, #492]	; (800549c <HAL_RCC_OscConfig+0x270>)
 80052ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80052b2:	6013      	str	r3, [r2, #0]
 80052b4:	e01d      	b.n	80052f2 <HAL_RCC_OscConfig+0xc6>
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	685b      	ldr	r3, [r3, #4]
 80052ba:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80052be:	d10c      	bne.n	80052da <HAL_RCC_OscConfig+0xae>
 80052c0:	4b76      	ldr	r3, [pc, #472]	; (800549c <HAL_RCC_OscConfig+0x270>)
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	4a75      	ldr	r2, [pc, #468]	; (800549c <HAL_RCC_OscConfig+0x270>)
 80052c6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80052ca:	6013      	str	r3, [r2, #0]
 80052cc:	4b73      	ldr	r3, [pc, #460]	; (800549c <HAL_RCC_OscConfig+0x270>)
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	4a72      	ldr	r2, [pc, #456]	; (800549c <HAL_RCC_OscConfig+0x270>)
 80052d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80052d6:	6013      	str	r3, [r2, #0]
 80052d8:	e00b      	b.n	80052f2 <HAL_RCC_OscConfig+0xc6>
 80052da:	4b70      	ldr	r3, [pc, #448]	; (800549c <HAL_RCC_OscConfig+0x270>)
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	4a6f      	ldr	r2, [pc, #444]	; (800549c <HAL_RCC_OscConfig+0x270>)
 80052e0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80052e4:	6013      	str	r3, [r2, #0]
 80052e6:	4b6d      	ldr	r3, [pc, #436]	; (800549c <HAL_RCC_OscConfig+0x270>)
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	4a6c      	ldr	r2, [pc, #432]	; (800549c <HAL_RCC_OscConfig+0x270>)
 80052ec:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80052f0:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	685b      	ldr	r3, [r3, #4]
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d013      	beq.n	8005322 <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052fa:	f7fc fc97 	bl	8001c2c <HAL_GetTick>
 80052fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005300:	e008      	b.n	8005314 <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005302:	f7fc fc93 	bl	8001c2c <HAL_GetTick>
 8005306:	4602      	mov	r2, r0
 8005308:	693b      	ldr	r3, [r7, #16]
 800530a:	1ad3      	subs	r3, r2, r3
 800530c:	2b64      	cmp	r3, #100	; 0x64
 800530e:	d901      	bls.n	8005314 <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8005310:	2303      	movs	r3, #3
 8005312:	e1db      	b.n	80056cc <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005314:	4b61      	ldr	r3, [pc, #388]	; (800549c <HAL_RCC_OscConfig+0x270>)
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800531c:	2b00      	cmp	r3, #0
 800531e:	d0f0      	beq.n	8005302 <HAL_RCC_OscConfig+0xd6>
 8005320:	e014      	b.n	800534c <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005322:	f7fc fc83 	bl	8001c2c <HAL_GetTick>
 8005326:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005328:	e008      	b.n	800533c <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800532a:	f7fc fc7f 	bl	8001c2c <HAL_GetTick>
 800532e:	4602      	mov	r2, r0
 8005330:	693b      	ldr	r3, [r7, #16]
 8005332:	1ad3      	subs	r3, r2, r3
 8005334:	2b64      	cmp	r3, #100	; 0x64
 8005336:	d901      	bls.n	800533c <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 8005338:	2303      	movs	r3, #3
 800533a:	e1c7      	b.n	80056cc <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800533c:	4b57      	ldr	r3, [pc, #348]	; (800549c <HAL_RCC_OscConfig+0x270>)
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005344:	2b00      	cmp	r3, #0
 8005346:	d1f0      	bne.n	800532a <HAL_RCC_OscConfig+0xfe>
 8005348:	e000      	b.n	800534c <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800534a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	f003 0302 	and.w	r3, r3, #2
 8005354:	2b00      	cmp	r3, #0
 8005356:	d06f      	beq.n	8005438 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8005358:	4b50      	ldr	r3, [pc, #320]	; (800549c <HAL_RCC_OscConfig+0x270>)
 800535a:	689b      	ldr	r3, [r3, #8]
 800535c:	f003 030c 	and.w	r3, r3, #12
 8005360:	2b00      	cmp	r3, #0
 8005362:	d017      	beq.n	8005394 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8005364:	4b4d      	ldr	r3, [pc, #308]	; (800549c <HAL_RCC_OscConfig+0x270>)
 8005366:	689b      	ldr	r3, [r3, #8]
 8005368:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800536c:	2b08      	cmp	r3, #8
 800536e:	d105      	bne.n	800537c <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8005370:	4b4a      	ldr	r3, [pc, #296]	; (800549c <HAL_RCC_OscConfig+0x270>)
 8005372:	685b      	ldr	r3, [r3, #4]
 8005374:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005378:	2b00      	cmp	r3, #0
 800537a:	d00b      	beq.n	8005394 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800537c:	4b47      	ldr	r3, [pc, #284]	; (800549c <HAL_RCC_OscConfig+0x270>)
 800537e:	689b      	ldr	r3, [r3, #8]
 8005380:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8005384:	2b0c      	cmp	r3, #12
 8005386:	d11c      	bne.n	80053c2 <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005388:	4b44      	ldr	r3, [pc, #272]	; (800549c <HAL_RCC_OscConfig+0x270>)
 800538a:	685b      	ldr	r3, [r3, #4]
 800538c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005390:	2b00      	cmp	r3, #0
 8005392:	d116      	bne.n	80053c2 <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005394:	4b41      	ldr	r3, [pc, #260]	; (800549c <HAL_RCC_OscConfig+0x270>)
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	f003 0302 	and.w	r3, r3, #2
 800539c:	2b00      	cmp	r3, #0
 800539e:	d005      	beq.n	80053ac <HAL_RCC_OscConfig+0x180>
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	68db      	ldr	r3, [r3, #12]
 80053a4:	2b01      	cmp	r3, #1
 80053a6:	d001      	beq.n	80053ac <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 80053a8:	2301      	movs	r3, #1
 80053aa:	e18f      	b.n	80056cc <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80053ac:	4b3b      	ldr	r3, [pc, #236]	; (800549c <HAL_RCC_OscConfig+0x270>)
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	691b      	ldr	r3, [r3, #16]
 80053b8:	00db      	lsls	r3, r3, #3
 80053ba:	4938      	ldr	r1, [pc, #224]	; (800549c <HAL_RCC_OscConfig+0x270>)
 80053bc:	4313      	orrs	r3, r2
 80053be:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80053c0:	e03a      	b.n	8005438 <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	68db      	ldr	r3, [r3, #12]
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d020      	beq.n	800540c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80053ca:	4b35      	ldr	r3, [pc, #212]	; (80054a0 <HAL_RCC_OscConfig+0x274>)
 80053cc:	2201      	movs	r2, #1
 80053ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053d0:	f7fc fc2c 	bl	8001c2c <HAL_GetTick>
 80053d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80053d6:	e008      	b.n	80053ea <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80053d8:	f7fc fc28 	bl	8001c2c <HAL_GetTick>
 80053dc:	4602      	mov	r2, r0
 80053de:	693b      	ldr	r3, [r7, #16]
 80053e0:	1ad3      	subs	r3, r2, r3
 80053e2:	2b02      	cmp	r3, #2
 80053e4:	d901      	bls.n	80053ea <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80053e6:	2303      	movs	r3, #3
 80053e8:	e170      	b.n	80056cc <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80053ea:	4b2c      	ldr	r3, [pc, #176]	; (800549c <HAL_RCC_OscConfig+0x270>)
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	f003 0302 	and.w	r3, r3, #2
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d0f0      	beq.n	80053d8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80053f6:	4b29      	ldr	r3, [pc, #164]	; (800549c <HAL_RCC_OscConfig+0x270>)
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	691b      	ldr	r3, [r3, #16]
 8005402:	00db      	lsls	r3, r3, #3
 8005404:	4925      	ldr	r1, [pc, #148]	; (800549c <HAL_RCC_OscConfig+0x270>)
 8005406:	4313      	orrs	r3, r2
 8005408:	600b      	str	r3, [r1, #0]
 800540a:	e015      	b.n	8005438 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800540c:	4b24      	ldr	r3, [pc, #144]	; (80054a0 <HAL_RCC_OscConfig+0x274>)
 800540e:	2200      	movs	r2, #0
 8005410:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005412:	f7fc fc0b 	bl	8001c2c <HAL_GetTick>
 8005416:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005418:	e008      	b.n	800542c <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800541a:	f7fc fc07 	bl	8001c2c <HAL_GetTick>
 800541e:	4602      	mov	r2, r0
 8005420:	693b      	ldr	r3, [r7, #16]
 8005422:	1ad3      	subs	r3, r2, r3
 8005424:	2b02      	cmp	r3, #2
 8005426:	d901      	bls.n	800542c <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8005428:	2303      	movs	r3, #3
 800542a:	e14f      	b.n	80056cc <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800542c:	4b1b      	ldr	r3, [pc, #108]	; (800549c <HAL_RCC_OscConfig+0x270>)
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	f003 0302 	and.w	r3, r3, #2
 8005434:	2b00      	cmp	r3, #0
 8005436:	d1f0      	bne.n	800541a <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	f003 0308 	and.w	r3, r3, #8
 8005440:	2b00      	cmp	r3, #0
 8005442:	d037      	beq.n	80054b4 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	695b      	ldr	r3, [r3, #20]
 8005448:	2b00      	cmp	r3, #0
 800544a:	d016      	beq.n	800547a <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800544c:	4b15      	ldr	r3, [pc, #84]	; (80054a4 <HAL_RCC_OscConfig+0x278>)
 800544e:	2201      	movs	r2, #1
 8005450:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005452:	f7fc fbeb 	bl	8001c2c <HAL_GetTick>
 8005456:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005458:	e008      	b.n	800546c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800545a:	f7fc fbe7 	bl	8001c2c <HAL_GetTick>
 800545e:	4602      	mov	r2, r0
 8005460:	693b      	ldr	r3, [r7, #16]
 8005462:	1ad3      	subs	r3, r2, r3
 8005464:	2b02      	cmp	r3, #2
 8005466:	d901      	bls.n	800546c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005468:	2303      	movs	r3, #3
 800546a:	e12f      	b.n	80056cc <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800546c:	4b0b      	ldr	r3, [pc, #44]	; (800549c <HAL_RCC_OscConfig+0x270>)
 800546e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005470:	f003 0302 	and.w	r3, r3, #2
 8005474:	2b00      	cmp	r3, #0
 8005476:	d0f0      	beq.n	800545a <HAL_RCC_OscConfig+0x22e>
 8005478:	e01c      	b.n	80054b4 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800547a:	4b0a      	ldr	r3, [pc, #40]	; (80054a4 <HAL_RCC_OscConfig+0x278>)
 800547c:	2200      	movs	r2, #0
 800547e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005480:	f7fc fbd4 	bl	8001c2c <HAL_GetTick>
 8005484:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005486:	e00f      	b.n	80054a8 <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005488:	f7fc fbd0 	bl	8001c2c <HAL_GetTick>
 800548c:	4602      	mov	r2, r0
 800548e:	693b      	ldr	r3, [r7, #16]
 8005490:	1ad3      	subs	r3, r2, r3
 8005492:	2b02      	cmp	r3, #2
 8005494:	d908      	bls.n	80054a8 <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 8005496:	2303      	movs	r3, #3
 8005498:	e118      	b.n	80056cc <HAL_RCC_OscConfig+0x4a0>
 800549a:	bf00      	nop
 800549c:	40023800 	.word	0x40023800
 80054a0:	42470000 	.word	0x42470000
 80054a4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80054a8:	4b8a      	ldr	r3, [pc, #552]	; (80056d4 <HAL_RCC_OscConfig+0x4a8>)
 80054aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80054ac:	f003 0302 	and.w	r3, r3, #2
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d1e9      	bne.n	8005488 <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	f003 0304 	and.w	r3, r3, #4
 80054bc:	2b00      	cmp	r3, #0
 80054be:	f000 8097 	beq.w	80055f0 <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80054c2:	2300      	movs	r3, #0
 80054c4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80054c6:	4b83      	ldr	r3, [pc, #524]	; (80056d4 <HAL_RCC_OscConfig+0x4a8>)
 80054c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d10f      	bne.n	80054f2 <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80054d2:	2300      	movs	r3, #0
 80054d4:	60fb      	str	r3, [r7, #12]
 80054d6:	4b7f      	ldr	r3, [pc, #508]	; (80056d4 <HAL_RCC_OscConfig+0x4a8>)
 80054d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054da:	4a7e      	ldr	r2, [pc, #504]	; (80056d4 <HAL_RCC_OscConfig+0x4a8>)
 80054dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80054e0:	6413      	str	r3, [r2, #64]	; 0x40
 80054e2:	4b7c      	ldr	r3, [pc, #496]	; (80056d4 <HAL_RCC_OscConfig+0x4a8>)
 80054e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80054ea:	60fb      	str	r3, [r7, #12]
 80054ec:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80054ee:	2301      	movs	r3, #1
 80054f0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80054f2:	4b79      	ldr	r3, [pc, #484]	; (80056d8 <HAL_RCC_OscConfig+0x4ac>)
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d118      	bne.n	8005530 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80054fe:	4b76      	ldr	r3, [pc, #472]	; (80056d8 <HAL_RCC_OscConfig+0x4ac>)
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	4a75      	ldr	r2, [pc, #468]	; (80056d8 <HAL_RCC_OscConfig+0x4ac>)
 8005504:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005508:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800550a:	f7fc fb8f 	bl	8001c2c <HAL_GetTick>
 800550e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005510:	e008      	b.n	8005524 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005512:	f7fc fb8b 	bl	8001c2c <HAL_GetTick>
 8005516:	4602      	mov	r2, r0
 8005518:	693b      	ldr	r3, [r7, #16]
 800551a:	1ad3      	subs	r3, r2, r3
 800551c:	2b02      	cmp	r3, #2
 800551e:	d901      	bls.n	8005524 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8005520:	2303      	movs	r3, #3
 8005522:	e0d3      	b.n	80056cc <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005524:	4b6c      	ldr	r3, [pc, #432]	; (80056d8 <HAL_RCC_OscConfig+0x4ac>)
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800552c:	2b00      	cmp	r3, #0
 800552e:	d0f0      	beq.n	8005512 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	689b      	ldr	r3, [r3, #8]
 8005534:	2b01      	cmp	r3, #1
 8005536:	d106      	bne.n	8005546 <HAL_RCC_OscConfig+0x31a>
 8005538:	4b66      	ldr	r3, [pc, #408]	; (80056d4 <HAL_RCC_OscConfig+0x4a8>)
 800553a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800553c:	4a65      	ldr	r2, [pc, #404]	; (80056d4 <HAL_RCC_OscConfig+0x4a8>)
 800553e:	f043 0301 	orr.w	r3, r3, #1
 8005542:	6713      	str	r3, [r2, #112]	; 0x70
 8005544:	e01c      	b.n	8005580 <HAL_RCC_OscConfig+0x354>
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	689b      	ldr	r3, [r3, #8]
 800554a:	2b05      	cmp	r3, #5
 800554c:	d10c      	bne.n	8005568 <HAL_RCC_OscConfig+0x33c>
 800554e:	4b61      	ldr	r3, [pc, #388]	; (80056d4 <HAL_RCC_OscConfig+0x4a8>)
 8005550:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005552:	4a60      	ldr	r2, [pc, #384]	; (80056d4 <HAL_RCC_OscConfig+0x4a8>)
 8005554:	f043 0304 	orr.w	r3, r3, #4
 8005558:	6713      	str	r3, [r2, #112]	; 0x70
 800555a:	4b5e      	ldr	r3, [pc, #376]	; (80056d4 <HAL_RCC_OscConfig+0x4a8>)
 800555c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800555e:	4a5d      	ldr	r2, [pc, #372]	; (80056d4 <HAL_RCC_OscConfig+0x4a8>)
 8005560:	f043 0301 	orr.w	r3, r3, #1
 8005564:	6713      	str	r3, [r2, #112]	; 0x70
 8005566:	e00b      	b.n	8005580 <HAL_RCC_OscConfig+0x354>
 8005568:	4b5a      	ldr	r3, [pc, #360]	; (80056d4 <HAL_RCC_OscConfig+0x4a8>)
 800556a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800556c:	4a59      	ldr	r2, [pc, #356]	; (80056d4 <HAL_RCC_OscConfig+0x4a8>)
 800556e:	f023 0301 	bic.w	r3, r3, #1
 8005572:	6713      	str	r3, [r2, #112]	; 0x70
 8005574:	4b57      	ldr	r3, [pc, #348]	; (80056d4 <HAL_RCC_OscConfig+0x4a8>)
 8005576:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005578:	4a56      	ldr	r2, [pc, #344]	; (80056d4 <HAL_RCC_OscConfig+0x4a8>)
 800557a:	f023 0304 	bic.w	r3, r3, #4
 800557e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	689b      	ldr	r3, [r3, #8]
 8005584:	2b00      	cmp	r3, #0
 8005586:	d015      	beq.n	80055b4 <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005588:	f7fc fb50 	bl	8001c2c <HAL_GetTick>
 800558c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800558e:	e00a      	b.n	80055a6 <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005590:	f7fc fb4c 	bl	8001c2c <HAL_GetTick>
 8005594:	4602      	mov	r2, r0
 8005596:	693b      	ldr	r3, [r7, #16]
 8005598:	1ad3      	subs	r3, r2, r3
 800559a:	f241 3288 	movw	r2, #5000	; 0x1388
 800559e:	4293      	cmp	r3, r2
 80055a0:	d901      	bls.n	80055a6 <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 80055a2:	2303      	movs	r3, #3
 80055a4:	e092      	b.n	80056cc <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80055a6:	4b4b      	ldr	r3, [pc, #300]	; (80056d4 <HAL_RCC_OscConfig+0x4a8>)
 80055a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055aa:	f003 0302 	and.w	r3, r3, #2
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d0ee      	beq.n	8005590 <HAL_RCC_OscConfig+0x364>
 80055b2:	e014      	b.n	80055de <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80055b4:	f7fc fb3a 	bl	8001c2c <HAL_GetTick>
 80055b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80055ba:	e00a      	b.n	80055d2 <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80055bc:	f7fc fb36 	bl	8001c2c <HAL_GetTick>
 80055c0:	4602      	mov	r2, r0
 80055c2:	693b      	ldr	r3, [r7, #16]
 80055c4:	1ad3      	subs	r3, r2, r3
 80055c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80055ca:	4293      	cmp	r3, r2
 80055cc:	d901      	bls.n	80055d2 <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 80055ce:	2303      	movs	r3, #3
 80055d0:	e07c      	b.n	80056cc <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80055d2:	4b40      	ldr	r3, [pc, #256]	; (80056d4 <HAL_RCC_OscConfig+0x4a8>)
 80055d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055d6:	f003 0302 	and.w	r3, r3, #2
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d1ee      	bne.n	80055bc <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80055de:	7dfb      	ldrb	r3, [r7, #23]
 80055e0:	2b01      	cmp	r3, #1
 80055e2:	d105      	bne.n	80055f0 <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80055e4:	4b3b      	ldr	r3, [pc, #236]	; (80056d4 <HAL_RCC_OscConfig+0x4a8>)
 80055e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055e8:	4a3a      	ldr	r2, [pc, #232]	; (80056d4 <HAL_RCC_OscConfig+0x4a8>)
 80055ea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80055ee:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	699b      	ldr	r3, [r3, #24]
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d068      	beq.n	80056ca <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80055f8:	4b36      	ldr	r3, [pc, #216]	; (80056d4 <HAL_RCC_OscConfig+0x4a8>)
 80055fa:	689b      	ldr	r3, [r3, #8]
 80055fc:	f003 030c 	and.w	r3, r3, #12
 8005600:	2b08      	cmp	r3, #8
 8005602:	d060      	beq.n	80056c6 <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	699b      	ldr	r3, [r3, #24]
 8005608:	2b02      	cmp	r3, #2
 800560a:	d145      	bne.n	8005698 <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800560c:	4b33      	ldr	r3, [pc, #204]	; (80056dc <HAL_RCC_OscConfig+0x4b0>)
 800560e:	2200      	movs	r2, #0
 8005610:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005612:	f7fc fb0b 	bl	8001c2c <HAL_GetTick>
 8005616:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005618:	e008      	b.n	800562c <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800561a:	f7fc fb07 	bl	8001c2c <HAL_GetTick>
 800561e:	4602      	mov	r2, r0
 8005620:	693b      	ldr	r3, [r7, #16]
 8005622:	1ad3      	subs	r3, r2, r3
 8005624:	2b02      	cmp	r3, #2
 8005626:	d901      	bls.n	800562c <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 8005628:	2303      	movs	r3, #3
 800562a:	e04f      	b.n	80056cc <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800562c:	4b29      	ldr	r3, [pc, #164]	; (80056d4 <HAL_RCC_OscConfig+0x4a8>)
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005634:	2b00      	cmp	r3, #0
 8005636:	d1f0      	bne.n	800561a <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	69da      	ldr	r2, [r3, #28]
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	6a1b      	ldr	r3, [r3, #32]
 8005640:	431a      	orrs	r2, r3
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005646:	019b      	lsls	r3, r3, #6
 8005648:	431a      	orrs	r2, r3
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800564e:	085b      	lsrs	r3, r3, #1
 8005650:	3b01      	subs	r3, #1
 8005652:	041b      	lsls	r3, r3, #16
 8005654:	431a      	orrs	r2, r3
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800565a:	061b      	lsls	r3, r3, #24
 800565c:	431a      	orrs	r2, r3
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005662:	071b      	lsls	r3, r3, #28
 8005664:	491b      	ldr	r1, [pc, #108]	; (80056d4 <HAL_RCC_OscConfig+0x4a8>)
 8005666:	4313      	orrs	r3, r2
 8005668:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800566a:	4b1c      	ldr	r3, [pc, #112]	; (80056dc <HAL_RCC_OscConfig+0x4b0>)
 800566c:	2201      	movs	r2, #1
 800566e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005670:	f7fc fadc 	bl	8001c2c <HAL_GetTick>
 8005674:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005676:	e008      	b.n	800568a <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005678:	f7fc fad8 	bl	8001c2c <HAL_GetTick>
 800567c:	4602      	mov	r2, r0
 800567e:	693b      	ldr	r3, [r7, #16]
 8005680:	1ad3      	subs	r3, r2, r3
 8005682:	2b02      	cmp	r3, #2
 8005684:	d901      	bls.n	800568a <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8005686:	2303      	movs	r3, #3
 8005688:	e020      	b.n	80056cc <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800568a:	4b12      	ldr	r3, [pc, #72]	; (80056d4 <HAL_RCC_OscConfig+0x4a8>)
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005692:	2b00      	cmp	r3, #0
 8005694:	d0f0      	beq.n	8005678 <HAL_RCC_OscConfig+0x44c>
 8005696:	e018      	b.n	80056ca <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005698:	4b10      	ldr	r3, [pc, #64]	; (80056dc <HAL_RCC_OscConfig+0x4b0>)
 800569a:	2200      	movs	r2, #0
 800569c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800569e:	f7fc fac5 	bl	8001c2c <HAL_GetTick>
 80056a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80056a4:	e008      	b.n	80056b8 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80056a6:	f7fc fac1 	bl	8001c2c <HAL_GetTick>
 80056aa:	4602      	mov	r2, r0
 80056ac:	693b      	ldr	r3, [r7, #16]
 80056ae:	1ad3      	subs	r3, r2, r3
 80056b0:	2b02      	cmp	r3, #2
 80056b2:	d901      	bls.n	80056b8 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 80056b4:	2303      	movs	r3, #3
 80056b6:	e009      	b.n	80056cc <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80056b8:	4b06      	ldr	r3, [pc, #24]	; (80056d4 <HAL_RCC_OscConfig+0x4a8>)
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d1f0      	bne.n	80056a6 <HAL_RCC_OscConfig+0x47a>
 80056c4:	e001      	b.n	80056ca <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80056c6:	2301      	movs	r3, #1
 80056c8:	e000      	b.n	80056cc <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 80056ca:	2300      	movs	r3, #0
}
 80056cc:	4618      	mov	r0, r3
 80056ce:	3718      	adds	r7, #24
 80056d0:	46bd      	mov	sp, r7
 80056d2:	bd80      	pop	{r7, pc}
 80056d4:	40023800 	.word	0x40023800
 80056d8:	40007000 	.word	0x40007000
 80056dc:	42470060 	.word	0x42470060

080056e0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80056e0:	b580      	push	{r7, lr}
 80056e2:	b082      	sub	sp, #8
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d101      	bne.n	80056f2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80056ee:	2301      	movs	r3, #1
 80056f0:	e01d      	b.n	800572e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056f8:	b2db      	uxtb	r3, r3
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d106      	bne.n	800570c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	2200      	movs	r2, #0
 8005702:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005706:	6878      	ldr	r0, [r7, #4]
 8005708:	f7fc f902 	bl	8001910 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	2202      	movs	r2, #2
 8005710:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681a      	ldr	r2, [r3, #0]
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	3304      	adds	r3, #4
 800571c:	4619      	mov	r1, r3
 800571e:	4610      	mov	r0, r2
 8005720:	f000 fa14 	bl	8005b4c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	2201      	movs	r2, #1
 8005728:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800572c:	2300      	movs	r3, #0
}
 800572e:	4618      	mov	r0, r3
 8005730:	3708      	adds	r7, #8
 8005732:	46bd      	mov	sp, r7
 8005734:	bd80      	pop	{r7, pc}

08005736 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005736:	b480      	push	{r7}
 8005738:	b085      	sub	sp, #20
 800573a:	af00      	add	r7, sp, #0
 800573c:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	68da      	ldr	r2, [r3, #12]
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	f042 0201 	orr.w	r2, r2, #1
 800574c:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	689b      	ldr	r3, [r3, #8]
 8005754:	f003 0307 	and.w	r3, r3, #7
 8005758:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	2b06      	cmp	r3, #6
 800575e:	d007      	beq.n	8005770 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	681a      	ldr	r2, [r3, #0]
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	f042 0201 	orr.w	r2, r2, #1
 800576e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005770:	2300      	movs	r3, #0
}
 8005772:	4618      	mov	r0, r3
 8005774:	3714      	adds	r7, #20
 8005776:	46bd      	mov	sp, r7
 8005778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800577c:	4770      	bx	lr

0800577e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800577e:	b580      	push	{r7, lr}
 8005780:	b082      	sub	sp, #8
 8005782:	af00      	add	r7, sp, #0
 8005784:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	691b      	ldr	r3, [r3, #16]
 800578c:	f003 0302 	and.w	r3, r3, #2
 8005790:	2b02      	cmp	r3, #2
 8005792:	d122      	bne.n	80057da <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	68db      	ldr	r3, [r3, #12]
 800579a:	f003 0302 	and.w	r3, r3, #2
 800579e:	2b02      	cmp	r3, #2
 80057a0:	d11b      	bne.n	80057da <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	f06f 0202 	mvn.w	r2, #2
 80057aa:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	2201      	movs	r2, #1
 80057b0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	699b      	ldr	r3, [r3, #24]
 80057b8:	f003 0303 	and.w	r3, r3, #3
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d003      	beq.n	80057c8 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80057c0:	6878      	ldr	r0, [r7, #4]
 80057c2:	f000 f9a5 	bl	8005b10 <HAL_TIM_IC_CaptureCallback>
 80057c6:	e005      	b.n	80057d4 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80057c8:	6878      	ldr	r0, [r7, #4]
 80057ca:	f000 f997 	bl	8005afc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80057ce:	6878      	ldr	r0, [r7, #4]
 80057d0:	f000 f9a8 	bl	8005b24 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	2200      	movs	r2, #0
 80057d8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	691b      	ldr	r3, [r3, #16]
 80057e0:	f003 0304 	and.w	r3, r3, #4
 80057e4:	2b04      	cmp	r3, #4
 80057e6:	d122      	bne.n	800582e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	68db      	ldr	r3, [r3, #12]
 80057ee:	f003 0304 	and.w	r3, r3, #4
 80057f2:	2b04      	cmp	r3, #4
 80057f4:	d11b      	bne.n	800582e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	f06f 0204 	mvn.w	r2, #4
 80057fe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	2202      	movs	r2, #2
 8005804:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	699b      	ldr	r3, [r3, #24]
 800580c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005810:	2b00      	cmp	r3, #0
 8005812:	d003      	beq.n	800581c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005814:	6878      	ldr	r0, [r7, #4]
 8005816:	f000 f97b 	bl	8005b10 <HAL_TIM_IC_CaptureCallback>
 800581a:	e005      	b.n	8005828 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800581c:	6878      	ldr	r0, [r7, #4]
 800581e:	f000 f96d 	bl	8005afc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005822:	6878      	ldr	r0, [r7, #4]
 8005824:	f000 f97e 	bl	8005b24 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	2200      	movs	r2, #0
 800582c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	691b      	ldr	r3, [r3, #16]
 8005834:	f003 0308 	and.w	r3, r3, #8
 8005838:	2b08      	cmp	r3, #8
 800583a:	d122      	bne.n	8005882 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	68db      	ldr	r3, [r3, #12]
 8005842:	f003 0308 	and.w	r3, r3, #8
 8005846:	2b08      	cmp	r3, #8
 8005848:	d11b      	bne.n	8005882 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	f06f 0208 	mvn.w	r2, #8
 8005852:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	2204      	movs	r2, #4
 8005858:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	69db      	ldr	r3, [r3, #28]
 8005860:	f003 0303 	and.w	r3, r3, #3
 8005864:	2b00      	cmp	r3, #0
 8005866:	d003      	beq.n	8005870 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005868:	6878      	ldr	r0, [r7, #4]
 800586a:	f000 f951 	bl	8005b10 <HAL_TIM_IC_CaptureCallback>
 800586e:	e005      	b.n	800587c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005870:	6878      	ldr	r0, [r7, #4]
 8005872:	f000 f943 	bl	8005afc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005876:	6878      	ldr	r0, [r7, #4]
 8005878:	f000 f954 	bl	8005b24 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	2200      	movs	r2, #0
 8005880:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	691b      	ldr	r3, [r3, #16]
 8005888:	f003 0310 	and.w	r3, r3, #16
 800588c:	2b10      	cmp	r3, #16
 800588e:	d122      	bne.n	80058d6 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	68db      	ldr	r3, [r3, #12]
 8005896:	f003 0310 	and.w	r3, r3, #16
 800589a:	2b10      	cmp	r3, #16
 800589c:	d11b      	bne.n	80058d6 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	f06f 0210 	mvn.w	r2, #16
 80058a6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	2208      	movs	r2, #8
 80058ac:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	69db      	ldr	r3, [r3, #28]
 80058b4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d003      	beq.n	80058c4 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80058bc:	6878      	ldr	r0, [r7, #4]
 80058be:	f000 f927 	bl	8005b10 <HAL_TIM_IC_CaptureCallback>
 80058c2:	e005      	b.n	80058d0 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80058c4:	6878      	ldr	r0, [r7, #4]
 80058c6:	f000 f919 	bl	8005afc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80058ca:	6878      	ldr	r0, [r7, #4]
 80058cc:	f000 f92a 	bl	8005b24 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	2200      	movs	r2, #0
 80058d4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	691b      	ldr	r3, [r3, #16]
 80058dc:	f003 0301 	and.w	r3, r3, #1
 80058e0:	2b01      	cmp	r3, #1
 80058e2:	d10e      	bne.n	8005902 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	68db      	ldr	r3, [r3, #12]
 80058ea:	f003 0301 	and.w	r3, r3, #1
 80058ee:	2b01      	cmp	r3, #1
 80058f0:	d107      	bne.n	8005902 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	f06f 0201 	mvn.w	r2, #1
 80058fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80058fc:	6878      	ldr	r0, [r7, #4]
 80058fe:	f7fb fcab 	bl	8001258 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	691b      	ldr	r3, [r3, #16]
 8005908:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800590c:	2b80      	cmp	r3, #128	; 0x80
 800590e:	d10e      	bne.n	800592e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	68db      	ldr	r3, [r3, #12]
 8005916:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800591a:	2b80      	cmp	r3, #128	; 0x80
 800591c:	d107      	bne.n	800592e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005926:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005928:	6878      	ldr	r0, [r7, #4]
 800592a:	f000 facf 	bl	8005ecc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	691b      	ldr	r3, [r3, #16]
 8005934:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005938:	2b40      	cmp	r3, #64	; 0x40
 800593a:	d10e      	bne.n	800595a <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	68db      	ldr	r3, [r3, #12]
 8005942:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005946:	2b40      	cmp	r3, #64	; 0x40
 8005948:	d107      	bne.n	800595a <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005952:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005954:	6878      	ldr	r0, [r7, #4]
 8005956:	f000 f8ef 	bl	8005b38 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	691b      	ldr	r3, [r3, #16]
 8005960:	f003 0320 	and.w	r3, r3, #32
 8005964:	2b20      	cmp	r3, #32
 8005966:	d10e      	bne.n	8005986 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	68db      	ldr	r3, [r3, #12]
 800596e:	f003 0320 	and.w	r3, r3, #32
 8005972:	2b20      	cmp	r3, #32
 8005974:	d107      	bne.n	8005986 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	f06f 0220 	mvn.w	r2, #32
 800597e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005980:	6878      	ldr	r0, [r7, #4]
 8005982:	f000 fa99 	bl	8005eb8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005986:	bf00      	nop
 8005988:	3708      	adds	r7, #8
 800598a:	46bd      	mov	sp, r7
 800598c:	bd80      	pop	{r7, pc}

0800598e <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800598e:	b580      	push	{r7, lr}
 8005990:	b084      	sub	sp, #16
 8005992:	af00      	add	r7, sp, #0
 8005994:	6078      	str	r0, [r7, #4]
 8005996:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800599e:	2b01      	cmp	r3, #1
 80059a0:	d101      	bne.n	80059a6 <HAL_TIM_ConfigClockSource+0x18>
 80059a2:	2302      	movs	r3, #2
 80059a4:	e0a6      	b.n	8005af4 <HAL_TIM_ConfigClockSource+0x166>
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	2201      	movs	r2, #1
 80059aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	2202      	movs	r2, #2
 80059b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	689b      	ldr	r3, [r3, #8]
 80059bc:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80059c4:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80059cc:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	68fa      	ldr	r2, [r7, #12]
 80059d4:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80059d6:	683b      	ldr	r3, [r7, #0]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	2b40      	cmp	r3, #64	; 0x40
 80059dc:	d067      	beq.n	8005aae <HAL_TIM_ConfigClockSource+0x120>
 80059de:	2b40      	cmp	r3, #64	; 0x40
 80059e0:	d80b      	bhi.n	80059fa <HAL_TIM_ConfigClockSource+0x6c>
 80059e2:	2b10      	cmp	r3, #16
 80059e4:	d073      	beq.n	8005ace <HAL_TIM_ConfigClockSource+0x140>
 80059e6:	2b10      	cmp	r3, #16
 80059e8:	d802      	bhi.n	80059f0 <HAL_TIM_ConfigClockSource+0x62>
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d06f      	beq.n	8005ace <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80059ee:	e078      	b.n	8005ae2 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80059f0:	2b20      	cmp	r3, #32
 80059f2:	d06c      	beq.n	8005ace <HAL_TIM_ConfigClockSource+0x140>
 80059f4:	2b30      	cmp	r3, #48	; 0x30
 80059f6:	d06a      	beq.n	8005ace <HAL_TIM_ConfigClockSource+0x140>
      break;
 80059f8:	e073      	b.n	8005ae2 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80059fa:	2b70      	cmp	r3, #112	; 0x70
 80059fc:	d00d      	beq.n	8005a1a <HAL_TIM_ConfigClockSource+0x8c>
 80059fe:	2b70      	cmp	r3, #112	; 0x70
 8005a00:	d804      	bhi.n	8005a0c <HAL_TIM_ConfigClockSource+0x7e>
 8005a02:	2b50      	cmp	r3, #80	; 0x50
 8005a04:	d033      	beq.n	8005a6e <HAL_TIM_ConfigClockSource+0xe0>
 8005a06:	2b60      	cmp	r3, #96	; 0x60
 8005a08:	d041      	beq.n	8005a8e <HAL_TIM_ConfigClockSource+0x100>
      break;
 8005a0a:	e06a      	b.n	8005ae2 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005a0c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a10:	d066      	beq.n	8005ae0 <HAL_TIM_ConfigClockSource+0x152>
 8005a12:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005a16:	d017      	beq.n	8005a48 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8005a18:	e063      	b.n	8005ae2 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	6818      	ldr	r0, [r3, #0]
 8005a1e:	683b      	ldr	r3, [r7, #0]
 8005a20:	6899      	ldr	r1, [r3, #8]
 8005a22:	683b      	ldr	r3, [r7, #0]
 8005a24:	685a      	ldr	r2, [r3, #4]
 8005a26:	683b      	ldr	r3, [r7, #0]
 8005a28:	68db      	ldr	r3, [r3, #12]
 8005a2a:	f000 f9a9 	bl	8005d80 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	689b      	ldr	r3, [r3, #8]
 8005a34:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005a3c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	68fa      	ldr	r2, [r7, #12]
 8005a44:	609a      	str	r2, [r3, #8]
      break;
 8005a46:	e04c      	b.n	8005ae2 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	6818      	ldr	r0, [r3, #0]
 8005a4c:	683b      	ldr	r3, [r7, #0]
 8005a4e:	6899      	ldr	r1, [r3, #8]
 8005a50:	683b      	ldr	r3, [r7, #0]
 8005a52:	685a      	ldr	r2, [r3, #4]
 8005a54:	683b      	ldr	r3, [r7, #0]
 8005a56:	68db      	ldr	r3, [r3, #12]
 8005a58:	f000 f992 	bl	8005d80 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	689a      	ldr	r2, [r3, #8]
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005a6a:	609a      	str	r2, [r3, #8]
      break;
 8005a6c:	e039      	b.n	8005ae2 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	6818      	ldr	r0, [r3, #0]
 8005a72:	683b      	ldr	r3, [r7, #0]
 8005a74:	6859      	ldr	r1, [r3, #4]
 8005a76:	683b      	ldr	r3, [r7, #0]
 8005a78:	68db      	ldr	r3, [r3, #12]
 8005a7a:	461a      	mov	r2, r3
 8005a7c:	f000 f906 	bl	8005c8c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	2150      	movs	r1, #80	; 0x50
 8005a86:	4618      	mov	r0, r3
 8005a88:	f000 f95f 	bl	8005d4a <TIM_ITRx_SetConfig>
      break;
 8005a8c:	e029      	b.n	8005ae2 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	6818      	ldr	r0, [r3, #0]
 8005a92:	683b      	ldr	r3, [r7, #0]
 8005a94:	6859      	ldr	r1, [r3, #4]
 8005a96:	683b      	ldr	r3, [r7, #0]
 8005a98:	68db      	ldr	r3, [r3, #12]
 8005a9a:	461a      	mov	r2, r3
 8005a9c:	f000 f925 	bl	8005cea <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	2160      	movs	r1, #96	; 0x60
 8005aa6:	4618      	mov	r0, r3
 8005aa8:	f000 f94f 	bl	8005d4a <TIM_ITRx_SetConfig>
      break;
 8005aac:	e019      	b.n	8005ae2 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	6818      	ldr	r0, [r3, #0]
 8005ab2:	683b      	ldr	r3, [r7, #0]
 8005ab4:	6859      	ldr	r1, [r3, #4]
 8005ab6:	683b      	ldr	r3, [r7, #0]
 8005ab8:	68db      	ldr	r3, [r3, #12]
 8005aba:	461a      	mov	r2, r3
 8005abc:	f000 f8e6 	bl	8005c8c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	2140      	movs	r1, #64	; 0x40
 8005ac6:	4618      	mov	r0, r3
 8005ac8:	f000 f93f 	bl	8005d4a <TIM_ITRx_SetConfig>
      break;
 8005acc:	e009      	b.n	8005ae2 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681a      	ldr	r2, [r3, #0]
 8005ad2:	683b      	ldr	r3, [r7, #0]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	4619      	mov	r1, r3
 8005ad8:	4610      	mov	r0, r2
 8005ada:	f000 f936 	bl	8005d4a <TIM_ITRx_SetConfig>
      break;
 8005ade:	e000      	b.n	8005ae2 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8005ae0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	2201      	movs	r2, #1
 8005ae6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	2200      	movs	r2, #0
 8005aee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005af2:	2300      	movs	r3, #0
}
 8005af4:	4618      	mov	r0, r3
 8005af6:	3710      	adds	r7, #16
 8005af8:	46bd      	mov	sp, r7
 8005afa:	bd80      	pop	{r7, pc}

08005afc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005afc:	b480      	push	{r7}
 8005afe:	b083      	sub	sp, #12
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005b04:	bf00      	nop
 8005b06:	370c      	adds	r7, #12
 8005b08:	46bd      	mov	sp, r7
 8005b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b0e:	4770      	bx	lr

08005b10 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005b10:	b480      	push	{r7}
 8005b12:	b083      	sub	sp, #12
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005b18:	bf00      	nop
 8005b1a:	370c      	adds	r7, #12
 8005b1c:	46bd      	mov	sp, r7
 8005b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b22:	4770      	bx	lr

08005b24 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005b24:	b480      	push	{r7}
 8005b26:	b083      	sub	sp, #12
 8005b28:	af00      	add	r7, sp, #0
 8005b2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005b2c:	bf00      	nop
 8005b2e:	370c      	adds	r7, #12
 8005b30:	46bd      	mov	sp, r7
 8005b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b36:	4770      	bx	lr

08005b38 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005b38:	b480      	push	{r7}
 8005b3a:	b083      	sub	sp, #12
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005b40:	bf00      	nop
 8005b42:	370c      	adds	r7, #12
 8005b44:	46bd      	mov	sp, r7
 8005b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b4a:	4770      	bx	lr

08005b4c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005b4c:	b480      	push	{r7}
 8005b4e:	b085      	sub	sp, #20
 8005b50:	af00      	add	r7, sp, #0
 8005b52:	6078      	str	r0, [r7, #4]
 8005b54:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	4a40      	ldr	r2, [pc, #256]	; (8005c60 <TIM_Base_SetConfig+0x114>)
 8005b60:	4293      	cmp	r3, r2
 8005b62:	d013      	beq.n	8005b8c <TIM_Base_SetConfig+0x40>
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b6a:	d00f      	beq.n	8005b8c <TIM_Base_SetConfig+0x40>
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	4a3d      	ldr	r2, [pc, #244]	; (8005c64 <TIM_Base_SetConfig+0x118>)
 8005b70:	4293      	cmp	r3, r2
 8005b72:	d00b      	beq.n	8005b8c <TIM_Base_SetConfig+0x40>
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	4a3c      	ldr	r2, [pc, #240]	; (8005c68 <TIM_Base_SetConfig+0x11c>)
 8005b78:	4293      	cmp	r3, r2
 8005b7a:	d007      	beq.n	8005b8c <TIM_Base_SetConfig+0x40>
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	4a3b      	ldr	r2, [pc, #236]	; (8005c6c <TIM_Base_SetConfig+0x120>)
 8005b80:	4293      	cmp	r3, r2
 8005b82:	d003      	beq.n	8005b8c <TIM_Base_SetConfig+0x40>
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	4a3a      	ldr	r2, [pc, #232]	; (8005c70 <TIM_Base_SetConfig+0x124>)
 8005b88:	4293      	cmp	r3, r2
 8005b8a:	d108      	bne.n	8005b9e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b92:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005b94:	683b      	ldr	r3, [r7, #0]
 8005b96:	685b      	ldr	r3, [r3, #4]
 8005b98:	68fa      	ldr	r2, [r7, #12]
 8005b9a:	4313      	orrs	r3, r2
 8005b9c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	4a2f      	ldr	r2, [pc, #188]	; (8005c60 <TIM_Base_SetConfig+0x114>)
 8005ba2:	4293      	cmp	r3, r2
 8005ba4:	d02b      	beq.n	8005bfe <TIM_Base_SetConfig+0xb2>
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005bac:	d027      	beq.n	8005bfe <TIM_Base_SetConfig+0xb2>
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	4a2c      	ldr	r2, [pc, #176]	; (8005c64 <TIM_Base_SetConfig+0x118>)
 8005bb2:	4293      	cmp	r3, r2
 8005bb4:	d023      	beq.n	8005bfe <TIM_Base_SetConfig+0xb2>
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	4a2b      	ldr	r2, [pc, #172]	; (8005c68 <TIM_Base_SetConfig+0x11c>)
 8005bba:	4293      	cmp	r3, r2
 8005bbc:	d01f      	beq.n	8005bfe <TIM_Base_SetConfig+0xb2>
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	4a2a      	ldr	r2, [pc, #168]	; (8005c6c <TIM_Base_SetConfig+0x120>)
 8005bc2:	4293      	cmp	r3, r2
 8005bc4:	d01b      	beq.n	8005bfe <TIM_Base_SetConfig+0xb2>
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	4a29      	ldr	r2, [pc, #164]	; (8005c70 <TIM_Base_SetConfig+0x124>)
 8005bca:	4293      	cmp	r3, r2
 8005bcc:	d017      	beq.n	8005bfe <TIM_Base_SetConfig+0xb2>
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	4a28      	ldr	r2, [pc, #160]	; (8005c74 <TIM_Base_SetConfig+0x128>)
 8005bd2:	4293      	cmp	r3, r2
 8005bd4:	d013      	beq.n	8005bfe <TIM_Base_SetConfig+0xb2>
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	4a27      	ldr	r2, [pc, #156]	; (8005c78 <TIM_Base_SetConfig+0x12c>)
 8005bda:	4293      	cmp	r3, r2
 8005bdc:	d00f      	beq.n	8005bfe <TIM_Base_SetConfig+0xb2>
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	4a26      	ldr	r2, [pc, #152]	; (8005c7c <TIM_Base_SetConfig+0x130>)
 8005be2:	4293      	cmp	r3, r2
 8005be4:	d00b      	beq.n	8005bfe <TIM_Base_SetConfig+0xb2>
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	4a25      	ldr	r2, [pc, #148]	; (8005c80 <TIM_Base_SetConfig+0x134>)
 8005bea:	4293      	cmp	r3, r2
 8005bec:	d007      	beq.n	8005bfe <TIM_Base_SetConfig+0xb2>
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	4a24      	ldr	r2, [pc, #144]	; (8005c84 <TIM_Base_SetConfig+0x138>)
 8005bf2:	4293      	cmp	r3, r2
 8005bf4:	d003      	beq.n	8005bfe <TIM_Base_SetConfig+0xb2>
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	4a23      	ldr	r2, [pc, #140]	; (8005c88 <TIM_Base_SetConfig+0x13c>)
 8005bfa:	4293      	cmp	r3, r2
 8005bfc:	d108      	bne.n	8005c10 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c04:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005c06:	683b      	ldr	r3, [r7, #0]
 8005c08:	68db      	ldr	r3, [r3, #12]
 8005c0a:	68fa      	ldr	r2, [r7, #12]
 8005c0c:	4313      	orrs	r3, r2
 8005c0e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005c16:	683b      	ldr	r3, [r7, #0]
 8005c18:	695b      	ldr	r3, [r3, #20]
 8005c1a:	4313      	orrs	r3, r2
 8005c1c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	68fa      	ldr	r2, [r7, #12]
 8005c22:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005c24:	683b      	ldr	r3, [r7, #0]
 8005c26:	689a      	ldr	r2, [r3, #8]
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005c2c:	683b      	ldr	r3, [r7, #0]
 8005c2e:	681a      	ldr	r2, [r3, #0]
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	4a0a      	ldr	r2, [pc, #40]	; (8005c60 <TIM_Base_SetConfig+0x114>)
 8005c38:	4293      	cmp	r3, r2
 8005c3a:	d003      	beq.n	8005c44 <TIM_Base_SetConfig+0xf8>
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	4a0c      	ldr	r2, [pc, #48]	; (8005c70 <TIM_Base_SetConfig+0x124>)
 8005c40:	4293      	cmp	r3, r2
 8005c42:	d103      	bne.n	8005c4c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005c44:	683b      	ldr	r3, [r7, #0]
 8005c46:	691a      	ldr	r2, [r3, #16]
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	2201      	movs	r2, #1
 8005c50:	615a      	str	r2, [r3, #20]
}
 8005c52:	bf00      	nop
 8005c54:	3714      	adds	r7, #20
 8005c56:	46bd      	mov	sp, r7
 8005c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c5c:	4770      	bx	lr
 8005c5e:	bf00      	nop
 8005c60:	40010000 	.word	0x40010000
 8005c64:	40000400 	.word	0x40000400
 8005c68:	40000800 	.word	0x40000800
 8005c6c:	40000c00 	.word	0x40000c00
 8005c70:	40010400 	.word	0x40010400
 8005c74:	40014000 	.word	0x40014000
 8005c78:	40014400 	.word	0x40014400
 8005c7c:	40014800 	.word	0x40014800
 8005c80:	40001800 	.word	0x40001800
 8005c84:	40001c00 	.word	0x40001c00
 8005c88:	40002000 	.word	0x40002000

08005c8c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005c8c:	b480      	push	{r7}
 8005c8e:	b087      	sub	sp, #28
 8005c90:	af00      	add	r7, sp, #0
 8005c92:	60f8      	str	r0, [r7, #12]
 8005c94:	60b9      	str	r1, [r7, #8]
 8005c96:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	6a1b      	ldr	r3, [r3, #32]
 8005c9c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	6a1b      	ldr	r3, [r3, #32]
 8005ca2:	f023 0201 	bic.w	r2, r3, #1
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	699b      	ldr	r3, [r3, #24]
 8005cae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005cb0:	693b      	ldr	r3, [r7, #16]
 8005cb2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005cb6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	011b      	lsls	r3, r3, #4
 8005cbc:	693a      	ldr	r2, [r7, #16]
 8005cbe:	4313      	orrs	r3, r2
 8005cc0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005cc2:	697b      	ldr	r3, [r7, #20]
 8005cc4:	f023 030a 	bic.w	r3, r3, #10
 8005cc8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005cca:	697a      	ldr	r2, [r7, #20]
 8005ccc:	68bb      	ldr	r3, [r7, #8]
 8005cce:	4313      	orrs	r3, r2
 8005cd0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	693a      	ldr	r2, [r7, #16]
 8005cd6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	697a      	ldr	r2, [r7, #20]
 8005cdc:	621a      	str	r2, [r3, #32]
}
 8005cde:	bf00      	nop
 8005ce0:	371c      	adds	r7, #28
 8005ce2:	46bd      	mov	sp, r7
 8005ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce8:	4770      	bx	lr

08005cea <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005cea:	b480      	push	{r7}
 8005cec:	b087      	sub	sp, #28
 8005cee:	af00      	add	r7, sp, #0
 8005cf0:	60f8      	str	r0, [r7, #12]
 8005cf2:	60b9      	str	r1, [r7, #8]
 8005cf4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	6a1b      	ldr	r3, [r3, #32]
 8005cfa:	f023 0210 	bic.w	r2, r3, #16
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	699b      	ldr	r3, [r3, #24]
 8005d06:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	6a1b      	ldr	r3, [r3, #32]
 8005d0c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005d0e:	697b      	ldr	r3, [r7, #20]
 8005d10:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005d14:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	031b      	lsls	r3, r3, #12
 8005d1a:	697a      	ldr	r2, [r7, #20]
 8005d1c:	4313      	orrs	r3, r2
 8005d1e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005d20:	693b      	ldr	r3, [r7, #16]
 8005d22:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005d26:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005d28:	68bb      	ldr	r3, [r7, #8]
 8005d2a:	011b      	lsls	r3, r3, #4
 8005d2c:	693a      	ldr	r2, [r7, #16]
 8005d2e:	4313      	orrs	r3, r2
 8005d30:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	697a      	ldr	r2, [r7, #20]
 8005d36:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	693a      	ldr	r2, [r7, #16]
 8005d3c:	621a      	str	r2, [r3, #32]
}
 8005d3e:	bf00      	nop
 8005d40:	371c      	adds	r7, #28
 8005d42:	46bd      	mov	sp, r7
 8005d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d48:	4770      	bx	lr

08005d4a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005d4a:	b480      	push	{r7}
 8005d4c:	b085      	sub	sp, #20
 8005d4e:	af00      	add	r7, sp, #0
 8005d50:	6078      	str	r0, [r7, #4]
 8005d52:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	689b      	ldr	r3, [r3, #8]
 8005d58:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d60:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005d62:	683a      	ldr	r2, [r7, #0]
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	4313      	orrs	r3, r2
 8005d68:	f043 0307 	orr.w	r3, r3, #7
 8005d6c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	68fa      	ldr	r2, [r7, #12]
 8005d72:	609a      	str	r2, [r3, #8]
}
 8005d74:	bf00      	nop
 8005d76:	3714      	adds	r7, #20
 8005d78:	46bd      	mov	sp, r7
 8005d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d7e:	4770      	bx	lr

08005d80 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005d80:	b480      	push	{r7}
 8005d82:	b087      	sub	sp, #28
 8005d84:	af00      	add	r7, sp, #0
 8005d86:	60f8      	str	r0, [r7, #12]
 8005d88:	60b9      	str	r1, [r7, #8]
 8005d8a:	607a      	str	r2, [r7, #4]
 8005d8c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	689b      	ldr	r3, [r3, #8]
 8005d92:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005d94:	697b      	ldr	r3, [r7, #20]
 8005d96:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005d9a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005d9c:	683b      	ldr	r3, [r7, #0]
 8005d9e:	021a      	lsls	r2, r3, #8
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	431a      	orrs	r2, r3
 8005da4:	68bb      	ldr	r3, [r7, #8]
 8005da6:	4313      	orrs	r3, r2
 8005da8:	697a      	ldr	r2, [r7, #20]
 8005daa:	4313      	orrs	r3, r2
 8005dac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	697a      	ldr	r2, [r7, #20]
 8005db2:	609a      	str	r2, [r3, #8]
}
 8005db4:	bf00      	nop
 8005db6:	371c      	adds	r7, #28
 8005db8:	46bd      	mov	sp, r7
 8005dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dbe:	4770      	bx	lr

08005dc0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005dc0:	b480      	push	{r7}
 8005dc2:	b085      	sub	sp, #20
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	6078      	str	r0, [r7, #4]
 8005dc8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005dd0:	2b01      	cmp	r3, #1
 8005dd2:	d101      	bne.n	8005dd8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005dd4:	2302      	movs	r3, #2
 8005dd6:	e05a      	b.n	8005e8e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	2201      	movs	r2, #1
 8005ddc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	2202      	movs	r2, #2
 8005de4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	685b      	ldr	r3, [r3, #4]
 8005dee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	689b      	ldr	r3, [r3, #8]
 8005df6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005dfe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005e00:	683b      	ldr	r3, [r7, #0]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	68fa      	ldr	r2, [r7, #12]
 8005e06:	4313      	orrs	r3, r2
 8005e08:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	68fa      	ldr	r2, [r7, #12]
 8005e10:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	4a21      	ldr	r2, [pc, #132]	; (8005e9c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005e18:	4293      	cmp	r3, r2
 8005e1a:	d022      	beq.n	8005e62 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e24:	d01d      	beq.n	8005e62 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	4a1d      	ldr	r2, [pc, #116]	; (8005ea0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005e2c:	4293      	cmp	r3, r2
 8005e2e:	d018      	beq.n	8005e62 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	4a1b      	ldr	r2, [pc, #108]	; (8005ea4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005e36:	4293      	cmp	r3, r2
 8005e38:	d013      	beq.n	8005e62 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	4a1a      	ldr	r2, [pc, #104]	; (8005ea8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005e40:	4293      	cmp	r3, r2
 8005e42:	d00e      	beq.n	8005e62 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	4a18      	ldr	r2, [pc, #96]	; (8005eac <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005e4a:	4293      	cmp	r3, r2
 8005e4c:	d009      	beq.n	8005e62 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	4a17      	ldr	r2, [pc, #92]	; (8005eb0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005e54:	4293      	cmp	r3, r2
 8005e56:	d004      	beq.n	8005e62 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	4a15      	ldr	r2, [pc, #84]	; (8005eb4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005e5e:	4293      	cmp	r3, r2
 8005e60:	d10c      	bne.n	8005e7c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005e62:	68bb      	ldr	r3, [r7, #8]
 8005e64:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005e68:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005e6a:	683b      	ldr	r3, [r7, #0]
 8005e6c:	685b      	ldr	r3, [r3, #4]
 8005e6e:	68ba      	ldr	r2, [r7, #8]
 8005e70:	4313      	orrs	r3, r2
 8005e72:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	68ba      	ldr	r2, [r7, #8]
 8005e7a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	2201      	movs	r2, #1
 8005e80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	2200      	movs	r2, #0
 8005e88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005e8c:	2300      	movs	r3, #0
}
 8005e8e:	4618      	mov	r0, r3
 8005e90:	3714      	adds	r7, #20
 8005e92:	46bd      	mov	sp, r7
 8005e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e98:	4770      	bx	lr
 8005e9a:	bf00      	nop
 8005e9c:	40010000 	.word	0x40010000
 8005ea0:	40000400 	.word	0x40000400
 8005ea4:	40000800 	.word	0x40000800
 8005ea8:	40000c00 	.word	0x40000c00
 8005eac:	40010400 	.word	0x40010400
 8005eb0:	40014000 	.word	0x40014000
 8005eb4:	40001800 	.word	0x40001800

08005eb8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005eb8:	b480      	push	{r7}
 8005eba:	b083      	sub	sp, #12
 8005ebc:	af00      	add	r7, sp, #0
 8005ebe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005ec0:	bf00      	nop
 8005ec2:	370c      	adds	r7, #12
 8005ec4:	46bd      	mov	sp, r7
 8005ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eca:	4770      	bx	lr

08005ecc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005ecc:	b480      	push	{r7}
 8005ece:	b083      	sub	sp, #12
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005ed4:	bf00      	nop
 8005ed6:	370c      	adds	r7, #12
 8005ed8:	46bd      	mov	sp, r7
 8005eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ede:	4770      	bx	lr

08005ee0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005ee0:	b580      	push	{r7, lr}
 8005ee2:	b082      	sub	sp, #8
 8005ee4:	af00      	add	r7, sp, #0
 8005ee6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d101      	bne.n	8005ef2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005eee:	2301      	movs	r3, #1
 8005ef0:	e03f      	b.n	8005f72 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005ef8:	b2db      	uxtb	r3, r3
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d106      	bne.n	8005f0c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	2200      	movs	r2, #0
 8005f02:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005f06:	6878      	ldr	r0, [r7, #4]
 8005f08:	f7fb fd2a 	bl	8001960 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	2224      	movs	r2, #36	; 0x24
 8005f10:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	68da      	ldr	r2, [r3, #12]
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005f22:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005f24:	6878      	ldr	r0, [r7, #4]
 8005f26:	f000 f829 	bl	8005f7c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	691a      	ldr	r2, [r3, #16]
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005f38:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	695a      	ldr	r2, [r3, #20]
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005f48:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	68da      	ldr	r2, [r3, #12]
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005f58:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	2200      	movs	r2, #0
 8005f5e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	2220      	movs	r2, #32
 8005f64:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	2220      	movs	r2, #32
 8005f6c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8005f70:	2300      	movs	r3, #0
}
 8005f72:	4618      	mov	r0, r3
 8005f74:	3708      	adds	r7, #8
 8005f76:	46bd      	mov	sp, r7
 8005f78:	bd80      	pop	{r7, pc}
	...

08005f7c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005f7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f80:	b085      	sub	sp, #20
 8005f82:	af00      	add	r7, sp, #0
 8005f84:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	691b      	ldr	r3, [r3, #16]
 8005f8c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	68da      	ldr	r2, [r3, #12]
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	430a      	orrs	r2, r1
 8005f9a:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	689a      	ldr	r2, [r3, #8]
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	691b      	ldr	r3, [r3, #16]
 8005fa4:	431a      	orrs	r2, r3
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	695b      	ldr	r3, [r3, #20]
 8005faa:	431a      	orrs	r2, r3
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	69db      	ldr	r3, [r3, #28]
 8005fb0:	4313      	orrs	r3, r2
 8005fb2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	68db      	ldr	r3, [r3, #12]
 8005fba:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8005fbe:	f023 030c 	bic.w	r3, r3, #12
 8005fc2:	687a      	ldr	r2, [r7, #4]
 8005fc4:	6812      	ldr	r2, [r2, #0]
 8005fc6:	68f9      	ldr	r1, [r7, #12]
 8005fc8:	430b      	orrs	r3, r1
 8005fca:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	695b      	ldr	r3, [r3, #20]
 8005fd2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	699a      	ldr	r2, [r3, #24]
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	430a      	orrs	r2, r1
 8005fe0:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	69db      	ldr	r3, [r3, #28]
 8005fe6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005fea:	f040 818b 	bne.w	8006304 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	4ac1      	ldr	r2, [pc, #772]	; (80062f8 <UART_SetConfig+0x37c>)
 8005ff4:	4293      	cmp	r3, r2
 8005ff6:	d005      	beq.n	8006004 <UART_SetConfig+0x88>
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	4abf      	ldr	r2, [pc, #764]	; (80062fc <UART_SetConfig+0x380>)
 8005ffe:	4293      	cmp	r3, r2
 8006000:	f040 80bd 	bne.w	800617e <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006004:	f7fe fc82 	bl	800490c <HAL_RCC_GetPCLK2Freq>
 8006008:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800600a:	68bb      	ldr	r3, [r7, #8]
 800600c:	461d      	mov	r5, r3
 800600e:	f04f 0600 	mov.w	r6, #0
 8006012:	46a8      	mov	r8, r5
 8006014:	46b1      	mov	r9, r6
 8006016:	eb18 0308 	adds.w	r3, r8, r8
 800601a:	eb49 0409 	adc.w	r4, r9, r9
 800601e:	4698      	mov	r8, r3
 8006020:	46a1      	mov	r9, r4
 8006022:	eb18 0805 	adds.w	r8, r8, r5
 8006026:	eb49 0906 	adc.w	r9, r9, r6
 800602a:	f04f 0100 	mov.w	r1, #0
 800602e:	f04f 0200 	mov.w	r2, #0
 8006032:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006036:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800603a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800603e:	4688      	mov	r8, r1
 8006040:	4691      	mov	r9, r2
 8006042:	eb18 0005 	adds.w	r0, r8, r5
 8006046:	eb49 0106 	adc.w	r1, r9, r6
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	685b      	ldr	r3, [r3, #4]
 800604e:	461d      	mov	r5, r3
 8006050:	f04f 0600 	mov.w	r6, #0
 8006054:	196b      	adds	r3, r5, r5
 8006056:	eb46 0406 	adc.w	r4, r6, r6
 800605a:	461a      	mov	r2, r3
 800605c:	4623      	mov	r3, r4
 800605e:	f7fa fe33 	bl	8000cc8 <__aeabi_uldivmod>
 8006062:	4603      	mov	r3, r0
 8006064:	460c      	mov	r4, r1
 8006066:	461a      	mov	r2, r3
 8006068:	4ba5      	ldr	r3, [pc, #660]	; (8006300 <UART_SetConfig+0x384>)
 800606a:	fba3 2302 	umull	r2, r3, r3, r2
 800606e:	095b      	lsrs	r3, r3, #5
 8006070:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006074:	68bb      	ldr	r3, [r7, #8]
 8006076:	461d      	mov	r5, r3
 8006078:	f04f 0600 	mov.w	r6, #0
 800607c:	46a9      	mov	r9, r5
 800607e:	46b2      	mov	sl, r6
 8006080:	eb19 0309 	adds.w	r3, r9, r9
 8006084:	eb4a 040a 	adc.w	r4, sl, sl
 8006088:	4699      	mov	r9, r3
 800608a:	46a2      	mov	sl, r4
 800608c:	eb19 0905 	adds.w	r9, r9, r5
 8006090:	eb4a 0a06 	adc.w	sl, sl, r6
 8006094:	f04f 0100 	mov.w	r1, #0
 8006098:	f04f 0200 	mov.w	r2, #0
 800609c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80060a0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80060a4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80060a8:	4689      	mov	r9, r1
 80060aa:	4692      	mov	sl, r2
 80060ac:	eb19 0005 	adds.w	r0, r9, r5
 80060b0:	eb4a 0106 	adc.w	r1, sl, r6
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	685b      	ldr	r3, [r3, #4]
 80060b8:	461d      	mov	r5, r3
 80060ba:	f04f 0600 	mov.w	r6, #0
 80060be:	196b      	adds	r3, r5, r5
 80060c0:	eb46 0406 	adc.w	r4, r6, r6
 80060c4:	461a      	mov	r2, r3
 80060c6:	4623      	mov	r3, r4
 80060c8:	f7fa fdfe 	bl	8000cc8 <__aeabi_uldivmod>
 80060cc:	4603      	mov	r3, r0
 80060ce:	460c      	mov	r4, r1
 80060d0:	461a      	mov	r2, r3
 80060d2:	4b8b      	ldr	r3, [pc, #556]	; (8006300 <UART_SetConfig+0x384>)
 80060d4:	fba3 1302 	umull	r1, r3, r3, r2
 80060d8:	095b      	lsrs	r3, r3, #5
 80060da:	2164      	movs	r1, #100	; 0x64
 80060dc:	fb01 f303 	mul.w	r3, r1, r3
 80060e0:	1ad3      	subs	r3, r2, r3
 80060e2:	00db      	lsls	r3, r3, #3
 80060e4:	3332      	adds	r3, #50	; 0x32
 80060e6:	4a86      	ldr	r2, [pc, #536]	; (8006300 <UART_SetConfig+0x384>)
 80060e8:	fba2 2303 	umull	r2, r3, r2, r3
 80060ec:	095b      	lsrs	r3, r3, #5
 80060ee:	005b      	lsls	r3, r3, #1
 80060f0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80060f4:	4498      	add	r8, r3
 80060f6:	68bb      	ldr	r3, [r7, #8]
 80060f8:	461d      	mov	r5, r3
 80060fa:	f04f 0600 	mov.w	r6, #0
 80060fe:	46a9      	mov	r9, r5
 8006100:	46b2      	mov	sl, r6
 8006102:	eb19 0309 	adds.w	r3, r9, r9
 8006106:	eb4a 040a 	adc.w	r4, sl, sl
 800610a:	4699      	mov	r9, r3
 800610c:	46a2      	mov	sl, r4
 800610e:	eb19 0905 	adds.w	r9, r9, r5
 8006112:	eb4a 0a06 	adc.w	sl, sl, r6
 8006116:	f04f 0100 	mov.w	r1, #0
 800611a:	f04f 0200 	mov.w	r2, #0
 800611e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006122:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006126:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800612a:	4689      	mov	r9, r1
 800612c:	4692      	mov	sl, r2
 800612e:	eb19 0005 	adds.w	r0, r9, r5
 8006132:	eb4a 0106 	adc.w	r1, sl, r6
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	685b      	ldr	r3, [r3, #4]
 800613a:	461d      	mov	r5, r3
 800613c:	f04f 0600 	mov.w	r6, #0
 8006140:	196b      	adds	r3, r5, r5
 8006142:	eb46 0406 	adc.w	r4, r6, r6
 8006146:	461a      	mov	r2, r3
 8006148:	4623      	mov	r3, r4
 800614a:	f7fa fdbd 	bl	8000cc8 <__aeabi_uldivmod>
 800614e:	4603      	mov	r3, r0
 8006150:	460c      	mov	r4, r1
 8006152:	461a      	mov	r2, r3
 8006154:	4b6a      	ldr	r3, [pc, #424]	; (8006300 <UART_SetConfig+0x384>)
 8006156:	fba3 1302 	umull	r1, r3, r3, r2
 800615a:	095b      	lsrs	r3, r3, #5
 800615c:	2164      	movs	r1, #100	; 0x64
 800615e:	fb01 f303 	mul.w	r3, r1, r3
 8006162:	1ad3      	subs	r3, r2, r3
 8006164:	00db      	lsls	r3, r3, #3
 8006166:	3332      	adds	r3, #50	; 0x32
 8006168:	4a65      	ldr	r2, [pc, #404]	; (8006300 <UART_SetConfig+0x384>)
 800616a:	fba2 2303 	umull	r2, r3, r2, r3
 800616e:	095b      	lsrs	r3, r3, #5
 8006170:	f003 0207 	and.w	r2, r3, #7
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	4442      	add	r2, r8
 800617a:	609a      	str	r2, [r3, #8]
 800617c:	e26f      	b.n	800665e <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800617e:	f7fe fbb1 	bl	80048e4 <HAL_RCC_GetPCLK1Freq>
 8006182:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006184:	68bb      	ldr	r3, [r7, #8]
 8006186:	461d      	mov	r5, r3
 8006188:	f04f 0600 	mov.w	r6, #0
 800618c:	46a8      	mov	r8, r5
 800618e:	46b1      	mov	r9, r6
 8006190:	eb18 0308 	adds.w	r3, r8, r8
 8006194:	eb49 0409 	adc.w	r4, r9, r9
 8006198:	4698      	mov	r8, r3
 800619a:	46a1      	mov	r9, r4
 800619c:	eb18 0805 	adds.w	r8, r8, r5
 80061a0:	eb49 0906 	adc.w	r9, r9, r6
 80061a4:	f04f 0100 	mov.w	r1, #0
 80061a8:	f04f 0200 	mov.w	r2, #0
 80061ac:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80061b0:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80061b4:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80061b8:	4688      	mov	r8, r1
 80061ba:	4691      	mov	r9, r2
 80061bc:	eb18 0005 	adds.w	r0, r8, r5
 80061c0:	eb49 0106 	adc.w	r1, r9, r6
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	685b      	ldr	r3, [r3, #4]
 80061c8:	461d      	mov	r5, r3
 80061ca:	f04f 0600 	mov.w	r6, #0
 80061ce:	196b      	adds	r3, r5, r5
 80061d0:	eb46 0406 	adc.w	r4, r6, r6
 80061d4:	461a      	mov	r2, r3
 80061d6:	4623      	mov	r3, r4
 80061d8:	f7fa fd76 	bl	8000cc8 <__aeabi_uldivmod>
 80061dc:	4603      	mov	r3, r0
 80061de:	460c      	mov	r4, r1
 80061e0:	461a      	mov	r2, r3
 80061e2:	4b47      	ldr	r3, [pc, #284]	; (8006300 <UART_SetConfig+0x384>)
 80061e4:	fba3 2302 	umull	r2, r3, r3, r2
 80061e8:	095b      	lsrs	r3, r3, #5
 80061ea:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80061ee:	68bb      	ldr	r3, [r7, #8]
 80061f0:	461d      	mov	r5, r3
 80061f2:	f04f 0600 	mov.w	r6, #0
 80061f6:	46a9      	mov	r9, r5
 80061f8:	46b2      	mov	sl, r6
 80061fa:	eb19 0309 	adds.w	r3, r9, r9
 80061fe:	eb4a 040a 	adc.w	r4, sl, sl
 8006202:	4699      	mov	r9, r3
 8006204:	46a2      	mov	sl, r4
 8006206:	eb19 0905 	adds.w	r9, r9, r5
 800620a:	eb4a 0a06 	adc.w	sl, sl, r6
 800620e:	f04f 0100 	mov.w	r1, #0
 8006212:	f04f 0200 	mov.w	r2, #0
 8006216:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800621a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800621e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006222:	4689      	mov	r9, r1
 8006224:	4692      	mov	sl, r2
 8006226:	eb19 0005 	adds.w	r0, r9, r5
 800622a:	eb4a 0106 	adc.w	r1, sl, r6
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	685b      	ldr	r3, [r3, #4]
 8006232:	461d      	mov	r5, r3
 8006234:	f04f 0600 	mov.w	r6, #0
 8006238:	196b      	adds	r3, r5, r5
 800623a:	eb46 0406 	adc.w	r4, r6, r6
 800623e:	461a      	mov	r2, r3
 8006240:	4623      	mov	r3, r4
 8006242:	f7fa fd41 	bl	8000cc8 <__aeabi_uldivmod>
 8006246:	4603      	mov	r3, r0
 8006248:	460c      	mov	r4, r1
 800624a:	461a      	mov	r2, r3
 800624c:	4b2c      	ldr	r3, [pc, #176]	; (8006300 <UART_SetConfig+0x384>)
 800624e:	fba3 1302 	umull	r1, r3, r3, r2
 8006252:	095b      	lsrs	r3, r3, #5
 8006254:	2164      	movs	r1, #100	; 0x64
 8006256:	fb01 f303 	mul.w	r3, r1, r3
 800625a:	1ad3      	subs	r3, r2, r3
 800625c:	00db      	lsls	r3, r3, #3
 800625e:	3332      	adds	r3, #50	; 0x32
 8006260:	4a27      	ldr	r2, [pc, #156]	; (8006300 <UART_SetConfig+0x384>)
 8006262:	fba2 2303 	umull	r2, r3, r2, r3
 8006266:	095b      	lsrs	r3, r3, #5
 8006268:	005b      	lsls	r3, r3, #1
 800626a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800626e:	4498      	add	r8, r3
 8006270:	68bb      	ldr	r3, [r7, #8]
 8006272:	461d      	mov	r5, r3
 8006274:	f04f 0600 	mov.w	r6, #0
 8006278:	46a9      	mov	r9, r5
 800627a:	46b2      	mov	sl, r6
 800627c:	eb19 0309 	adds.w	r3, r9, r9
 8006280:	eb4a 040a 	adc.w	r4, sl, sl
 8006284:	4699      	mov	r9, r3
 8006286:	46a2      	mov	sl, r4
 8006288:	eb19 0905 	adds.w	r9, r9, r5
 800628c:	eb4a 0a06 	adc.w	sl, sl, r6
 8006290:	f04f 0100 	mov.w	r1, #0
 8006294:	f04f 0200 	mov.w	r2, #0
 8006298:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800629c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80062a0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80062a4:	4689      	mov	r9, r1
 80062a6:	4692      	mov	sl, r2
 80062a8:	eb19 0005 	adds.w	r0, r9, r5
 80062ac:	eb4a 0106 	adc.w	r1, sl, r6
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	685b      	ldr	r3, [r3, #4]
 80062b4:	461d      	mov	r5, r3
 80062b6:	f04f 0600 	mov.w	r6, #0
 80062ba:	196b      	adds	r3, r5, r5
 80062bc:	eb46 0406 	adc.w	r4, r6, r6
 80062c0:	461a      	mov	r2, r3
 80062c2:	4623      	mov	r3, r4
 80062c4:	f7fa fd00 	bl	8000cc8 <__aeabi_uldivmod>
 80062c8:	4603      	mov	r3, r0
 80062ca:	460c      	mov	r4, r1
 80062cc:	461a      	mov	r2, r3
 80062ce:	4b0c      	ldr	r3, [pc, #48]	; (8006300 <UART_SetConfig+0x384>)
 80062d0:	fba3 1302 	umull	r1, r3, r3, r2
 80062d4:	095b      	lsrs	r3, r3, #5
 80062d6:	2164      	movs	r1, #100	; 0x64
 80062d8:	fb01 f303 	mul.w	r3, r1, r3
 80062dc:	1ad3      	subs	r3, r2, r3
 80062de:	00db      	lsls	r3, r3, #3
 80062e0:	3332      	adds	r3, #50	; 0x32
 80062e2:	4a07      	ldr	r2, [pc, #28]	; (8006300 <UART_SetConfig+0x384>)
 80062e4:	fba2 2303 	umull	r2, r3, r2, r3
 80062e8:	095b      	lsrs	r3, r3, #5
 80062ea:	f003 0207 	and.w	r2, r3, #7
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	4442      	add	r2, r8
 80062f4:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80062f6:	e1b2      	b.n	800665e <UART_SetConfig+0x6e2>
 80062f8:	40011000 	.word	0x40011000
 80062fc:	40011400 	.word	0x40011400
 8006300:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	4ad7      	ldr	r2, [pc, #860]	; (8006668 <UART_SetConfig+0x6ec>)
 800630a:	4293      	cmp	r3, r2
 800630c:	d005      	beq.n	800631a <UART_SetConfig+0x39e>
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	4ad6      	ldr	r2, [pc, #856]	; (800666c <UART_SetConfig+0x6f0>)
 8006314:	4293      	cmp	r3, r2
 8006316:	f040 80d1 	bne.w	80064bc <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800631a:	f7fe faf7 	bl	800490c <HAL_RCC_GetPCLK2Freq>
 800631e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006320:	68bb      	ldr	r3, [r7, #8]
 8006322:	469a      	mov	sl, r3
 8006324:	f04f 0b00 	mov.w	fp, #0
 8006328:	46d0      	mov	r8, sl
 800632a:	46d9      	mov	r9, fp
 800632c:	eb18 0308 	adds.w	r3, r8, r8
 8006330:	eb49 0409 	adc.w	r4, r9, r9
 8006334:	4698      	mov	r8, r3
 8006336:	46a1      	mov	r9, r4
 8006338:	eb18 080a 	adds.w	r8, r8, sl
 800633c:	eb49 090b 	adc.w	r9, r9, fp
 8006340:	f04f 0100 	mov.w	r1, #0
 8006344:	f04f 0200 	mov.w	r2, #0
 8006348:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800634c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006350:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006354:	4688      	mov	r8, r1
 8006356:	4691      	mov	r9, r2
 8006358:	eb1a 0508 	adds.w	r5, sl, r8
 800635c:	eb4b 0609 	adc.w	r6, fp, r9
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	685b      	ldr	r3, [r3, #4]
 8006364:	4619      	mov	r1, r3
 8006366:	f04f 0200 	mov.w	r2, #0
 800636a:	f04f 0300 	mov.w	r3, #0
 800636e:	f04f 0400 	mov.w	r4, #0
 8006372:	0094      	lsls	r4, r2, #2
 8006374:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006378:	008b      	lsls	r3, r1, #2
 800637a:	461a      	mov	r2, r3
 800637c:	4623      	mov	r3, r4
 800637e:	4628      	mov	r0, r5
 8006380:	4631      	mov	r1, r6
 8006382:	f7fa fca1 	bl	8000cc8 <__aeabi_uldivmod>
 8006386:	4603      	mov	r3, r0
 8006388:	460c      	mov	r4, r1
 800638a:	461a      	mov	r2, r3
 800638c:	4bb8      	ldr	r3, [pc, #736]	; (8006670 <UART_SetConfig+0x6f4>)
 800638e:	fba3 2302 	umull	r2, r3, r3, r2
 8006392:	095b      	lsrs	r3, r3, #5
 8006394:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006398:	68bb      	ldr	r3, [r7, #8]
 800639a:	469b      	mov	fp, r3
 800639c:	f04f 0c00 	mov.w	ip, #0
 80063a0:	46d9      	mov	r9, fp
 80063a2:	46e2      	mov	sl, ip
 80063a4:	eb19 0309 	adds.w	r3, r9, r9
 80063a8:	eb4a 040a 	adc.w	r4, sl, sl
 80063ac:	4699      	mov	r9, r3
 80063ae:	46a2      	mov	sl, r4
 80063b0:	eb19 090b 	adds.w	r9, r9, fp
 80063b4:	eb4a 0a0c 	adc.w	sl, sl, ip
 80063b8:	f04f 0100 	mov.w	r1, #0
 80063bc:	f04f 0200 	mov.w	r2, #0
 80063c0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80063c4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80063c8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80063cc:	4689      	mov	r9, r1
 80063ce:	4692      	mov	sl, r2
 80063d0:	eb1b 0509 	adds.w	r5, fp, r9
 80063d4:	eb4c 060a 	adc.w	r6, ip, sl
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	685b      	ldr	r3, [r3, #4]
 80063dc:	4619      	mov	r1, r3
 80063de:	f04f 0200 	mov.w	r2, #0
 80063e2:	f04f 0300 	mov.w	r3, #0
 80063e6:	f04f 0400 	mov.w	r4, #0
 80063ea:	0094      	lsls	r4, r2, #2
 80063ec:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80063f0:	008b      	lsls	r3, r1, #2
 80063f2:	461a      	mov	r2, r3
 80063f4:	4623      	mov	r3, r4
 80063f6:	4628      	mov	r0, r5
 80063f8:	4631      	mov	r1, r6
 80063fa:	f7fa fc65 	bl	8000cc8 <__aeabi_uldivmod>
 80063fe:	4603      	mov	r3, r0
 8006400:	460c      	mov	r4, r1
 8006402:	461a      	mov	r2, r3
 8006404:	4b9a      	ldr	r3, [pc, #616]	; (8006670 <UART_SetConfig+0x6f4>)
 8006406:	fba3 1302 	umull	r1, r3, r3, r2
 800640a:	095b      	lsrs	r3, r3, #5
 800640c:	2164      	movs	r1, #100	; 0x64
 800640e:	fb01 f303 	mul.w	r3, r1, r3
 8006412:	1ad3      	subs	r3, r2, r3
 8006414:	011b      	lsls	r3, r3, #4
 8006416:	3332      	adds	r3, #50	; 0x32
 8006418:	4a95      	ldr	r2, [pc, #596]	; (8006670 <UART_SetConfig+0x6f4>)
 800641a:	fba2 2303 	umull	r2, r3, r2, r3
 800641e:	095b      	lsrs	r3, r3, #5
 8006420:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006424:	4498      	add	r8, r3
 8006426:	68bb      	ldr	r3, [r7, #8]
 8006428:	469b      	mov	fp, r3
 800642a:	f04f 0c00 	mov.w	ip, #0
 800642e:	46d9      	mov	r9, fp
 8006430:	46e2      	mov	sl, ip
 8006432:	eb19 0309 	adds.w	r3, r9, r9
 8006436:	eb4a 040a 	adc.w	r4, sl, sl
 800643a:	4699      	mov	r9, r3
 800643c:	46a2      	mov	sl, r4
 800643e:	eb19 090b 	adds.w	r9, r9, fp
 8006442:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006446:	f04f 0100 	mov.w	r1, #0
 800644a:	f04f 0200 	mov.w	r2, #0
 800644e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006452:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006456:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800645a:	4689      	mov	r9, r1
 800645c:	4692      	mov	sl, r2
 800645e:	eb1b 0509 	adds.w	r5, fp, r9
 8006462:	eb4c 060a 	adc.w	r6, ip, sl
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	685b      	ldr	r3, [r3, #4]
 800646a:	4619      	mov	r1, r3
 800646c:	f04f 0200 	mov.w	r2, #0
 8006470:	f04f 0300 	mov.w	r3, #0
 8006474:	f04f 0400 	mov.w	r4, #0
 8006478:	0094      	lsls	r4, r2, #2
 800647a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800647e:	008b      	lsls	r3, r1, #2
 8006480:	461a      	mov	r2, r3
 8006482:	4623      	mov	r3, r4
 8006484:	4628      	mov	r0, r5
 8006486:	4631      	mov	r1, r6
 8006488:	f7fa fc1e 	bl	8000cc8 <__aeabi_uldivmod>
 800648c:	4603      	mov	r3, r0
 800648e:	460c      	mov	r4, r1
 8006490:	461a      	mov	r2, r3
 8006492:	4b77      	ldr	r3, [pc, #476]	; (8006670 <UART_SetConfig+0x6f4>)
 8006494:	fba3 1302 	umull	r1, r3, r3, r2
 8006498:	095b      	lsrs	r3, r3, #5
 800649a:	2164      	movs	r1, #100	; 0x64
 800649c:	fb01 f303 	mul.w	r3, r1, r3
 80064a0:	1ad3      	subs	r3, r2, r3
 80064a2:	011b      	lsls	r3, r3, #4
 80064a4:	3332      	adds	r3, #50	; 0x32
 80064a6:	4a72      	ldr	r2, [pc, #456]	; (8006670 <UART_SetConfig+0x6f4>)
 80064a8:	fba2 2303 	umull	r2, r3, r2, r3
 80064ac:	095b      	lsrs	r3, r3, #5
 80064ae:	f003 020f 	and.w	r2, r3, #15
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	4442      	add	r2, r8
 80064b8:	609a      	str	r2, [r3, #8]
 80064ba:	e0d0      	b.n	800665e <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 80064bc:	f7fe fa12 	bl	80048e4 <HAL_RCC_GetPCLK1Freq>
 80064c0:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80064c2:	68bb      	ldr	r3, [r7, #8]
 80064c4:	469a      	mov	sl, r3
 80064c6:	f04f 0b00 	mov.w	fp, #0
 80064ca:	46d0      	mov	r8, sl
 80064cc:	46d9      	mov	r9, fp
 80064ce:	eb18 0308 	adds.w	r3, r8, r8
 80064d2:	eb49 0409 	adc.w	r4, r9, r9
 80064d6:	4698      	mov	r8, r3
 80064d8:	46a1      	mov	r9, r4
 80064da:	eb18 080a 	adds.w	r8, r8, sl
 80064de:	eb49 090b 	adc.w	r9, r9, fp
 80064e2:	f04f 0100 	mov.w	r1, #0
 80064e6:	f04f 0200 	mov.w	r2, #0
 80064ea:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80064ee:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80064f2:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80064f6:	4688      	mov	r8, r1
 80064f8:	4691      	mov	r9, r2
 80064fa:	eb1a 0508 	adds.w	r5, sl, r8
 80064fe:	eb4b 0609 	adc.w	r6, fp, r9
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	685b      	ldr	r3, [r3, #4]
 8006506:	4619      	mov	r1, r3
 8006508:	f04f 0200 	mov.w	r2, #0
 800650c:	f04f 0300 	mov.w	r3, #0
 8006510:	f04f 0400 	mov.w	r4, #0
 8006514:	0094      	lsls	r4, r2, #2
 8006516:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800651a:	008b      	lsls	r3, r1, #2
 800651c:	461a      	mov	r2, r3
 800651e:	4623      	mov	r3, r4
 8006520:	4628      	mov	r0, r5
 8006522:	4631      	mov	r1, r6
 8006524:	f7fa fbd0 	bl	8000cc8 <__aeabi_uldivmod>
 8006528:	4603      	mov	r3, r0
 800652a:	460c      	mov	r4, r1
 800652c:	461a      	mov	r2, r3
 800652e:	4b50      	ldr	r3, [pc, #320]	; (8006670 <UART_SetConfig+0x6f4>)
 8006530:	fba3 2302 	umull	r2, r3, r3, r2
 8006534:	095b      	lsrs	r3, r3, #5
 8006536:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800653a:	68bb      	ldr	r3, [r7, #8]
 800653c:	469b      	mov	fp, r3
 800653e:	f04f 0c00 	mov.w	ip, #0
 8006542:	46d9      	mov	r9, fp
 8006544:	46e2      	mov	sl, ip
 8006546:	eb19 0309 	adds.w	r3, r9, r9
 800654a:	eb4a 040a 	adc.w	r4, sl, sl
 800654e:	4699      	mov	r9, r3
 8006550:	46a2      	mov	sl, r4
 8006552:	eb19 090b 	adds.w	r9, r9, fp
 8006556:	eb4a 0a0c 	adc.w	sl, sl, ip
 800655a:	f04f 0100 	mov.w	r1, #0
 800655e:	f04f 0200 	mov.w	r2, #0
 8006562:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006566:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800656a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800656e:	4689      	mov	r9, r1
 8006570:	4692      	mov	sl, r2
 8006572:	eb1b 0509 	adds.w	r5, fp, r9
 8006576:	eb4c 060a 	adc.w	r6, ip, sl
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	685b      	ldr	r3, [r3, #4]
 800657e:	4619      	mov	r1, r3
 8006580:	f04f 0200 	mov.w	r2, #0
 8006584:	f04f 0300 	mov.w	r3, #0
 8006588:	f04f 0400 	mov.w	r4, #0
 800658c:	0094      	lsls	r4, r2, #2
 800658e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006592:	008b      	lsls	r3, r1, #2
 8006594:	461a      	mov	r2, r3
 8006596:	4623      	mov	r3, r4
 8006598:	4628      	mov	r0, r5
 800659a:	4631      	mov	r1, r6
 800659c:	f7fa fb94 	bl	8000cc8 <__aeabi_uldivmod>
 80065a0:	4603      	mov	r3, r0
 80065a2:	460c      	mov	r4, r1
 80065a4:	461a      	mov	r2, r3
 80065a6:	4b32      	ldr	r3, [pc, #200]	; (8006670 <UART_SetConfig+0x6f4>)
 80065a8:	fba3 1302 	umull	r1, r3, r3, r2
 80065ac:	095b      	lsrs	r3, r3, #5
 80065ae:	2164      	movs	r1, #100	; 0x64
 80065b0:	fb01 f303 	mul.w	r3, r1, r3
 80065b4:	1ad3      	subs	r3, r2, r3
 80065b6:	011b      	lsls	r3, r3, #4
 80065b8:	3332      	adds	r3, #50	; 0x32
 80065ba:	4a2d      	ldr	r2, [pc, #180]	; (8006670 <UART_SetConfig+0x6f4>)
 80065bc:	fba2 2303 	umull	r2, r3, r2, r3
 80065c0:	095b      	lsrs	r3, r3, #5
 80065c2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80065c6:	4498      	add	r8, r3
 80065c8:	68bb      	ldr	r3, [r7, #8]
 80065ca:	469b      	mov	fp, r3
 80065cc:	f04f 0c00 	mov.w	ip, #0
 80065d0:	46d9      	mov	r9, fp
 80065d2:	46e2      	mov	sl, ip
 80065d4:	eb19 0309 	adds.w	r3, r9, r9
 80065d8:	eb4a 040a 	adc.w	r4, sl, sl
 80065dc:	4699      	mov	r9, r3
 80065de:	46a2      	mov	sl, r4
 80065e0:	eb19 090b 	adds.w	r9, r9, fp
 80065e4:	eb4a 0a0c 	adc.w	sl, sl, ip
 80065e8:	f04f 0100 	mov.w	r1, #0
 80065ec:	f04f 0200 	mov.w	r2, #0
 80065f0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80065f4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80065f8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80065fc:	4689      	mov	r9, r1
 80065fe:	4692      	mov	sl, r2
 8006600:	eb1b 0509 	adds.w	r5, fp, r9
 8006604:	eb4c 060a 	adc.w	r6, ip, sl
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	685b      	ldr	r3, [r3, #4]
 800660c:	4619      	mov	r1, r3
 800660e:	f04f 0200 	mov.w	r2, #0
 8006612:	f04f 0300 	mov.w	r3, #0
 8006616:	f04f 0400 	mov.w	r4, #0
 800661a:	0094      	lsls	r4, r2, #2
 800661c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006620:	008b      	lsls	r3, r1, #2
 8006622:	461a      	mov	r2, r3
 8006624:	4623      	mov	r3, r4
 8006626:	4628      	mov	r0, r5
 8006628:	4631      	mov	r1, r6
 800662a:	f7fa fb4d 	bl	8000cc8 <__aeabi_uldivmod>
 800662e:	4603      	mov	r3, r0
 8006630:	460c      	mov	r4, r1
 8006632:	461a      	mov	r2, r3
 8006634:	4b0e      	ldr	r3, [pc, #56]	; (8006670 <UART_SetConfig+0x6f4>)
 8006636:	fba3 1302 	umull	r1, r3, r3, r2
 800663a:	095b      	lsrs	r3, r3, #5
 800663c:	2164      	movs	r1, #100	; 0x64
 800663e:	fb01 f303 	mul.w	r3, r1, r3
 8006642:	1ad3      	subs	r3, r2, r3
 8006644:	011b      	lsls	r3, r3, #4
 8006646:	3332      	adds	r3, #50	; 0x32
 8006648:	4a09      	ldr	r2, [pc, #36]	; (8006670 <UART_SetConfig+0x6f4>)
 800664a:	fba2 2303 	umull	r2, r3, r2, r3
 800664e:	095b      	lsrs	r3, r3, #5
 8006650:	f003 020f 	and.w	r2, r3, #15
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	4442      	add	r2, r8
 800665a:	609a      	str	r2, [r3, #8]
}
 800665c:	e7ff      	b.n	800665e <UART_SetConfig+0x6e2>
 800665e:	bf00      	nop
 8006660:	3714      	adds	r7, #20
 8006662:	46bd      	mov	sp, r7
 8006664:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006668:	40011000 	.word	0x40011000
 800666c:	40011400 	.word	0x40011400
 8006670:	51eb851f 	.word	0x51eb851f

08006674 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006674:	b084      	sub	sp, #16
 8006676:	b580      	push	{r7, lr}
 8006678:	b084      	sub	sp, #16
 800667a:	af00      	add	r7, sp, #0
 800667c:	6078      	str	r0, [r7, #4]
 800667e:	f107 001c 	add.w	r0, r7, #28
 8006682:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006686:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006688:	2b01      	cmp	r3, #1
 800668a:	d122      	bne.n	80066d2 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006690:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	68db      	ldr	r3, [r3, #12]
 800669c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80066a0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80066a4:	687a      	ldr	r2, [r7, #4]
 80066a6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	68db      	ldr	r3, [r3, #12]
 80066ac:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80066b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80066b6:	2b01      	cmp	r3, #1
 80066b8:	d105      	bne.n	80066c6 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	68db      	ldr	r3, [r3, #12]
 80066be:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 80066c6:	6878      	ldr	r0, [r7, #4]
 80066c8:	f001 fac0 	bl	8007c4c <USB_CoreReset>
 80066cc:	4603      	mov	r3, r0
 80066ce:	73fb      	strb	r3, [r7, #15]
 80066d0:	e01a      	b.n	8006708 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	68db      	ldr	r3, [r3, #12]
 80066d6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80066de:	6878      	ldr	r0, [r7, #4]
 80066e0:	f001 fab4 	bl	8007c4c <USB_CoreReset>
 80066e4:	4603      	mov	r3, r0
 80066e6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80066e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d106      	bne.n	80066fc <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066f2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	639a      	str	r2, [r3, #56]	; 0x38
 80066fa:	e005      	b.n	8006708 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006700:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006708:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800670a:	2b01      	cmp	r3, #1
 800670c:	d10b      	bne.n	8006726 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	689b      	ldr	r3, [r3, #8]
 8006712:	f043 0206 	orr.w	r2, r3, #6
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	689b      	ldr	r3, [r3, #8]
 800671e:	f043 0220 	orr.w	r2, r3, #32
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006726:	7bfb      	ldrb	r3, [r7, #15]
}
 8006728:	4618      	mov	r0, r3
 800672a:	3710      	adds	r7, #16
 800672c:	46bd      	mov	sp, r7
 800672e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006732:	b004      	add	sp, #16
 8006734:	4770      	bx	lr
	...

08006738 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8006738:	b480      	push	{r7}
 800673a:	b087      	sub	sp, #28
 800673c:	af00      	add	r7, sp, #0
 800673e:	60f8      	str	r0, [r7, #12]
 8006740:	60b9      	str	r1, [r7, #8]
 8006742:	4613      	mov	r3, r2
 8006744:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8006746:	79fb      	ldrb	r3, [r7, #7]
 8006748:	2b02      	cmp	r3, #2
 800674a:	d165      	bne.n	8006818 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800674c:	68bb      	ldr	r3, [r7, #8]
 800674e:	4a41      	ldr	r2, [pc, #260]	; (8006854 <USB_SetTurnaroundTime+0x11c>)
 8006750:	4293      	cmp	r3, r2
 8006752:	d906      	bls.n	8006762 <USB_SetTurnaroundTime+0x2a>
 8006754:	68bb      	ldr	r3, [r7, #8]
 8006756:	4a40      	ldr	r2, [pc, #256]	; (8006858 <USB_SetTurnaroundTime+0x120>)
 8006758:	4293      	cmp	r3, r2
 800675a:	d802      	bhi.n	8006762 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800675c:	230f      	movs	r3, #15
 800675e:	617b      	str	r3, [r7, #20]
 8006760:	e062      	b.n	8006828 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8006762:	68bb      	ldr	r3, [r7, #8]
 8006764:	4a3c      	ldr	r2, [pc, #240]	; (8006858 <USB_SetTurnaroundTime+0x120>)
 8006766:	4293      	cmp	r3, r2
 8006768:	d906      	bls.n	8006778 <USB_SetTurnaroundTime+0x40>
 800676a:	68bb      	ldr	r3, [r7, #8]
 800676c:	4a3b      	ldr	r2, [pc, #236]	; (800685c <USB_SetTurnaroundTime+0x124>)
 800676e:	4293      	cmp	r3, r2
 8006770:	d802      	bhi.n	8006778 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8006772:	230e      	movs	r3, #14
 8006774:	617b      	str	r3, [r7, #20]
 8006776:	e057      	b.n	8006828 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8006778:	68bb      	ldr	r3, [r7, #8]
 800677a:	4a38      	ldr	r2, [pc, #224]	; (800685c <USB_SetTurnaroundTime+0x124>)
 800677c:	4293      	cmp	r3, r2
 800677e:	d906      	bls.n	800678e <USB_SetTurnaroundTime+0x56>
 8006780:	68bb      	ldr	r3, [r7, #8]
 8006782:	4a37      	ldr	r2, [pc, #220]	; (8006860 <USB_SetTurnaroundTime+0x128>)
 8006784:	4293      	cmp	r3, r2
 8006786:	d802      	bhi.n	800678e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8006788:	230d      	movs	r3, #13
 800678a:	617b      	str	r3, [r7, #20]
 800678c:	e04c      	b.n	8006828 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800678e:	68bb      	ldr	r3, [r7, #8]
 8006790:	4a33      	ldr	r2, [pc, #204]	; (8006860 <USB_SetTurnaroundTime+0x128>)
 8006792:	4293      	cmp	r3, r2
 8006794:	d906      	bls.n	80067a4 <USB_SetTurnaroundTime+0x6c>
 8006796:	68bb      	ldr	r3, [r7, #8]
 8006798:	4a32      	ldr	r2, [pc, #200]	; (8006864 <USB_SetTurnaroundTime+0x12c>)
 800679a:	4293      	cmp	r3, r2
 800679c:	d802      	bhi.n	80067a4 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800679e:	230c      	movs	r3, #12
 80067a0:	617b      	str	r3, [r7, #20]
 80067a2:	e041      	b.n	8006828 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80067a4:	68bb      	ldr	r3, [r7, #8]
 80067a6:	4a2f      	ldr	r2, [pc, #188]	; (8006864 <USB_SetTurnaroundTime+0x12c>)
 80067a8:	4293      	cmp	r3, r2
 80067aa:	d906      	bls.n	80067ba <USB_SetTurnaroundTime+0x82>
 80067ac:	68bb      	ldr	r3, [r7, #8]
 80067ae:	4a2e      	ldr	r2, [pc, #184]	; (8006868 <USB_SetTurnaroundTime+0x130>)
 80067b0:	4293      	cmp	r3, r2
 80067b2:	d802      	bhi.n	80067ba <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80067b4:	230b      	movs	r3, #11
 80067b6:	617b      	str	r3, [r7, #20]
 80067b8:	e036      	b.n	8006828 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80067ba:	68bb      	ldr	r3, [r7, #8]
 80067bc:	4a2a      	ldr	r2, [pc, #168]	; (8006868 <USB_SetTurnaroundTime+0x130>)
 80067be:	4293      	cmp	r3, r2
 80067c0:	d906      	bls.n	80067d0 <USB_SetTurnaroundTime+0x98>
 80067c2:	68bb      	ldr	r3, [r7, #8]
 80067c4:	4a29      	ldr	r2, [pc, #164]	; (800686c <USB_SetTurnaroundTime+0x134>)
 80067c6:	4293      	cmp	r3, r2
 80067c8:	d802      	bhi.n	80067d0 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80067ca:	230a      	movs	r3, #10
 80067cc:	617b      	str	r3, [r7, #20]
 80067ce:	e02b      	b.n	8006828 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80067d0:	68bb      	ldr	r3, [r7, #8]
 80067d2:	4a26      	ldr	r2, [pc, #152]	; (800686c <USB_SetTurnaroundTime+0x134>)
 80067d4:	4293      	cmp	r3, r2
 80067d6:	d906      	bls.n	80067e6 <USB_SetTurnaroundTime+0xae>
 80067d8:	68bb      	ldr	r3, [r7, #8]
 80067da:	4a25      	ldr	r2, [pc, #148]	; (8006870 <USB_SetTurnaroundTime+0x138>)
 80067dc:	4293      	cmp	r3, r2
 80067de:	d802      	bhi.n	80067e6 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80067e0:	2309      	movs	r3, #9
 80067e2:	617b      	str	r3, [r7, #20]
 80067e4:	e020      	b.n	8006828 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80067e6:	68bb      	ldr	r3, [r7, #8]
 80067e8:	4a21      	ldr	r2, [pc, #132]	; (8006870 <USB_SetTurnaroundTime+0x138>)
 80067ea:	4293      	cmp	r3, r2
 80067ec:	d906      	bls.n	80067fc <USB_SetTurnaroundTime+0xc4>
 80067ee:	68bb      	ldr	r3, [r7, #8]
 80067f0:	4a20      	ldr	r2, [pc, #128]	; (8006874 <USB_SetTurnaroundTime+0x13c>)
 80067f2:	4293      	cmp	r3, r2
 80067f4:	d802      	bhi.n	80067fc <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80067f6:	2308      	movs	r3, #8
 80067f8:	617b      	str	r3, [r7, #20]
 80067fa:	e015      	b.n	8006828 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80067fc:	68bb      	ldr	r3, [r7, #8]
 80067fe:	4a1d      	ldr	r2, [pc, #116]	; (8006874 <USB_SetTurnaroundTime+0x13c>)
 8006800:	4293      	cmp	r3, r2
 8006802:	d906      	bls.n	8006812 <USB_SetTurnaroundTime+0xda>
 8006804:	68bb      	ldr	r3, [r7, #8]
 8006806:	4a1c      	ldr	r2, [pc, #112]	; (8006878 <USB_SetTurnaroundTime+0x140>)
 8006808:	4293      	cmp	r3, r2
 800680a:	d802      	bhi.n	8006812 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800680c:	2307      	movs	r3, #7
 800680e:	617b      	str	r3, [r7, #20]
 8006810:	e00a      	b.n	8006828 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8006812:	2306      	movs	r3, #6
 8006814:	617b      	str	r3, [r7, #20]
 8006816:	e007      	b.n	8006828 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8006818:	79fb      	ldrb	r3, [r7, #7]
 800681a:	2b00      	cmp	r3, #0
 800681c:	d102      	bne.n	8006824 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800681e:	2309      	movs	r3, #9
 8006820:	617b      	str	r3, [r7, #20]
 8006822:	e001      	b.n	8006828 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8006824:	2309      	movs	r3, #9
 8006826:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	68db      	ldr	r3, [r3, #12]
 800682c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	68da      	ldr	r2, [r3, #12]
 8006838:	697b      	ldr	r3, [r7, #20]
 800683a:	029b      	lsls	r3, r3, #10
 800683c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8006840:	431a      	orrs	r2, r3
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006846:	2300      	movs	r3, #0
}
 8006848:	4618      	mov	r0, r3
 800684a:	371c      	adds	r7, #28
 800684c:	46bd      	mov	sp, r7
 800684e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006852:	4770      	bx	lr
 8006854:	00d8acbf 	.word	0x00d8acbf
 8006858:	00e4e1bf 	.word	0x00e4e1bf
 800685c:	00f423ff 	.word	0x00f423ff
 8006860:	0106737f 	.word	0x0106737f
 8006864:	011a499f 	.word	0x011a499f
 8006868:	01312cff 	.word	0x01312cff
 800686c:	014ca43f 	.word	0x014ca43f
 8006870:	016e35ff 	.word	0x016e35ff
 8006874:	01a6ab1f 	.word	0x01a6ab1f
 8006878:	01e847ff 	.word	0x01e847ff

0800687c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800687c:	b480      	push	{r7}
 800687e:	b083      	sub	sp, #12
 8006880:	af00      	add	r7, sp, #0
 8006882:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	689b      	ldr	r3, [r3, #8]
 8006888:	f043 0201 	orr.w	r2, r3, #1
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006890:	2300      	movs	r3, #0
}
 8006892:	4618      	mov	r0, r3
 8006894:	370c      	adds	r7, #12
 8006896:	46bd      	mov	sp, r7
 8006898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800689c:	4770      	bx	lr

0800689e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800689e:	b480      	push	{r7}
 80068a0:	b083      	sub	sp, #12
 80068a2:	af00      	add	r7, sp, #0
 80068a4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	689b      	ldr	r3, [r3, #8]
 80068aa:	f023 0201 	bic.w	r2, r3, #1
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80068b2:	2300      	movs	r3, #0
}
 80068b4:	4618      	mov	r0, r3
 80068b6:	370c      	adds	r7, #12
 80068b8:	46bd      	mov	sp, r7
 80068ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068be:	4770      	bx	lr

080068c0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80068c0:	b580      	push	{r7, lr}
 80068c2:	b082      	sub	sp, #8
 80068c4:	af00      	add	r7, sp, #0
 80068c6:	6078      	str	r0, [r7, #4]
 80068c8:	460b      	mov	r3, r1
 80068ca:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	68db      	ldr	r3, [r3, #12]
 80068d0:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80068d8:	78fb      	ldrb	r3, [r7, #3]
 80068da:	2b01      	cmp	r3, #1
 80068dc:	d106      	bne.n	80068ec <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	68db      	ldr	r3, [r3, #12]
 80068e2:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	60da      	str	r2, [r3, #12]
 80068ea:	e00b      	b.n	8006904 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 80068ec:	78fb      	ldrb	r3, [r7, #3]
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d106      	bne.n	8006900 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	68db      	ldr	r3, [r3, #12]
 80068f6:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	60da      	str	r2, [r3, #12]
 80068fe:	e001      	b.n	8006904 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8006900:	2301      	movs	r3, #1
 8006902:	e003      	b.n	800690c <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8006904:	2032      	movs	r0, #50	; 0x32
 8006906:	f7fb f99d 	bl	8001c44 <HAL_Delay>

  return HAL_OK;
 800690a:	2300      	movs	r3, #0
}
 800690c:	4618      	mov	r0, r3
 800690e:	3708      	adds	r7, #8
 8006910:	46bd      	mov	sp, r7
 8006912:	bd80      	pop	{r7, pc}

08006914 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006914:	b084      	sub	sp, #16
 8006916:	b580      	push	{r7, lr}
 8006918:	b086      	sub	sp, #24
 800691a:	af00      	add	r7, sp, #0
 800691c:	6078      	str	r0, [r7, #4]
 800691e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006922:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006926:	2300      	movs	r3, #0
 8006928:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800692e:	2300      	movs	r3, #0
 8006930:	613b      	str	r3, [r7, #16]
 8006932:	e009      	b.n	8006948 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006934:	687a      	ldr	r2, [r7, #4]
 8006936:	693b      	ldr	r3, [r7, #16]
 8006938:	3340      	adds	r3, #64	; 0x40
 800693a:	009b      	lsls	r3, r3, #2
 800693c:	4413      	add	r3, r2
 800693e:	2200      	movs	r2, #0
 8006940:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006942:	693b      	ldr	r3, [r7, #16]
 8006944:	3301      	adds	r3, #1
 8006946:	613b      	str	r3, [r7, #16]
 8006948:	693b      	ldr	r3, [r7, #16]
 800694a:	2b0e      	cmp	r3, #14
 800694c:	d9f2      	bls.n	8006934 <USB_DevInit+0x20>
  }

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800694e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006950:	2b00      	cmp	r3, #0
 8006952:	d11c      	bne.n	800698e <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800695a:	685b      	ldr	r3, [r3, #4]
 800695c:	68fa      	ldr	r2, [r7, #12]
 800695e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006962:	f043 0302 	orr.w	r3, r3, #2
 8006966:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800696c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	601a      	str	r2, [r3, #0]
 800698c:	e005      	b.n	800699a <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006992:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80069a0:	461a      	mov	r2, r3
 80069a2:	2300      	movs	r3, #0
 80069a4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80069ac:	4619      	mov	r1, r3
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80069b4:	461a      	mov	r2, r3
 80069b6:	680b      	ldr	r3, [r1, #0]
 80069b8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80069ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069bc:	2b01      	cmp	r3, #1
 80069be:	d10c      	bne.n	80069da <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80069c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d104      	bne.n	80069d0 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80069c6:	2100      	movs	r1, #0
 80069c8:	6878      	ldr	r0, [r7, #4]
 80069ca:	f000 f949 	bl	8006c60 <USB_SetDevSpeed>
 80069ce:	e008      	b.n	80069e2 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80069d0:	2101      	movs	r1, #1
 80069d2:	6878      	ldr	r0, [r7, #4]
 80069d4:	f000 f944 	bl	8006c60 <USB_SetDevSpeed>
 80069d8:	e003      	b.n	80069e2 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80069da:	2103      	movs	r1, #3
 80069dc:	6878      	ldr	r0, [r7, #4]
 80069de:	f000 f93f 	bl	8006c60 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80069e2:	2110      	movs	r1, #16
 80069e4:	6878      	ldr	r0, [r7, #4]
 80069e6:	f000 f8f3 	bl	8006bd0 <USB_FlushTxFifo>
 80069ea:	4603      	mov	r3, r0
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d001      	beq.n	80069f4 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 80069f0:	2301      	movs	r3, #1
 80069f2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80069f4:	6878      	ldr	r0, [r7, #4]
 80069f6:	f000 f911 	bl	8006c1c <USB_FlushRxFifo>
 80069fa:	4603      	mov	r3, r0
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d001      	beq.n	8006a04 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8006a00:	2301      	movs	r3, #1
 8006a02:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a0a:	461a      	mov	r2, r3
 8006a0c:	2300      	movs	r3, #0
 8006a0e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a16:	461a      	mov	r2, r3
 8006a18:	2300      	movs	r3, #0
 8006a1a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a22:	461a      	mov	r2, r3
 8006a24:	2300      	movs	r3, #0
 8006a26:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006a28:	2300      	movs	r3, #0
 8006a2a:	613b      	str	r3, [r7, #16]
 8006a2c:	e043      	b.n	8006ab6 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006a2e:	693b      	ldr	r3, [r7, #16]
 8006a30:	015a      	lsls	r2, r3, #5
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	4413      	add	r3, r2
 8006a36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006a40:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006a44:	d118      	bne.n	8006a78 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8006a46:	693b      	ldr	r3, [r7, #16]
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d10a      	bne.n	8006a62 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006a4c:	693b      	ldr	r3, [r7, #16]
 8006a4e:	015a      	lsls	r2, r3, #5
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	4413      	add	r3, r2
 8006a54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a58:	461a      	mov	r2, r3
 8006a5a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006a5e:	6013      	str	r3, [r2, #0]
 8006a60:	e013      	b.n	8006a8a <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006a62:	693b      	ldr	r3, [r7, #16]
 8006a64:	015a      	lsls	r2, r3, #5
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	4413      	add	r3, r2
 8006a6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a6e:	461a      	mov	r2, r3
 8006a70:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006a74:	6013      	str	r3, [r2, #0]
 8006a76:	e008      	b.n	8006a8a <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006a78:	693b      	ldr	r3, [r7, #16]
 8006a7a:	015a      	lsls	r2, r3, #5
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	4413      	add	r3, r2
 8006a80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a84:	461a      	mov	r2, r3
 8006a86:	2300      	movs	r3, #0
 8006a88:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006a8a:	693b      	ldr	r3, [r7, #16]
 8006a8c:	015a      	lsls	r2, r3, #5
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	4413      	add	r3, r2
 8006a92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a96:	461a      	mov	r2, r3
 8006a98:	2300      	movs	r3, #0
 8006a9a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006a9c:	693b      	ldr	r3, [r7, #16]
 8006a9e:	015a      	lsls	r2, r3, #5
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	4413      	add	r3, r2
 8006aa4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006aa8:	461a      	mov	r2, r3
 8006aaa:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006aae:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006ab0:	693b      	ldr	r3, [r7, #16]
 8006ab2:	3301      	adds	r3, #1
 8006ab4:	613b      	str	r3, [r7, #16]
 8006ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ab8:	693a      	ldr	r2, [r7, #16]
 8006aba:	429a      	cmp	r2, r3
 8006abc:	d3b7      	bcc.n	8006a2e <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006abe:	2300      	movs	r3, #0
 8006ac0:	613b      	str	r3, [r7, #16]
 8006ac2:	e043      	b.n	8006b4c <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006ac4:	693b      	ldr	r3, [r7, #16]
 8006ac6:	015a      	lsls	r2, r3, #5
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	4413      	add	r3, r2
 8006acc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006ad6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006ada:	d118      	bne.n	8006b0e <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8006adc:	693b      	ldr	r3, [r7, #16]
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d10a      	bne.n	8006af8 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006ae2:	693b      	ldr	r3, [r7, #16]
 8006ae4:	015a      	lsls	r2, r3, #5
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	4413      	add	r3, r2
 8006aea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006aee:	461a      	mov	r2, r3
 8006af0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006af4:	6013      	str	r3, [r2, #0]
 8006af6:	e013      	b.n	8006b20 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006af8:	693b      	ldr	r3, [r7, #16]
 8006afa:	015a      	lsls	r2, r3, #5
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	4413      	add	r3, r2
 8006b00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b04:	461a      	mov	r2, r3
 8006b06:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006b0a:	6013      	str	r3, [r2, #0]
 8006b0c:	e008      	b.n	8006b20 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006b0e:	693b      	ldr	r3, [r7, #16]
 8006b10:	015a      	lsls	r2, r3, #5
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	4413      	add	r3, r2
 8006b16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b1a:	461a      	mov	r2, r3
 8006b1c:	2300      	movs	r3, #0
 8006b1e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006b20:	693b      	ldr	r3, [r7, #16]
 8006b22:	015a      	lsls	r2, r3, #5
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	4413      	add	r3, r2
 8006b28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b2c:	461a      	mov	r2, r3
 8006b2e:	2300      	movs	r3, #0
 8006b30:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006b32:	693b      	ldr	r3, [r7, #16]
 8006b34:	015a      	lsls	r2, r3, #5
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	4413      	add	r3, r2
 8006b3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b3e:	461a      	mov	r2, r3
 8006b40:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006b44:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006b46:	693b      	ldr	r3, [r7, #16]
 8006b48:	3301      	adds	r3, #1
 8006b4a:	613b      	str	r3, [r7, #16]
 8006b4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b4e:	693a      	ldr	r2, [r7, #16]
 8006b50:	429a      	cmp	r2, r3
 8006b52:	d3b7      	bcc.n	8006ac4 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b5a:	691b      	ldr	r3, [r3, #16]
 8006b5c:	68fa      	ldr	r2, [r7, #12]
 8006b5e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006b62:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006b66:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	2200      	movs	r2, #0
 8006b6c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8006b74:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006b76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d105      	bne.n	8006b88 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	699b      	ldr	r3, [r3, #24]
 8006b80:	f043 0210 	orr.w	r2, r3, #16
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	699a      	ldr	r2, [r3, #24]
 8006b8c:	4b0f      	ldr	r3, [pc, #60]	; (8006bcc <USB_DevInit+0x2b8>)
 8006b8e:	4313      	orrs	r3, r2
 8006b90:	687a      	ldr	r2, [r7, #4]
 8006b92:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006b94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d005      	beq.n	8006ba6 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	699b      	ldr	r3, [r3, #24]
 8006b9e:	f043 0208 	orr.w	r2, r3, #8
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006ba6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006ba8:	2b01      	cmp	r3, #1
 8006baa:	d107      	bne.n	8006bbc <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	699b      	ldr	r3, [r3, #24]
 8006bb0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006bb4:	f043 0304 	orr.w	r3, r3, #4
 8006bb8:	687a      	ldr	r2, [r7, #4]
 8006bba:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006bbc:	7dfb      	ldrb	r3, [r7, #23]
}
 8006bbe:	4618      	mov	r0, r3
 8006bc0:	3718      	adds	r7, #24
 8006bc2:	46bd      	mov	sp, r7
 8006bc4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006bc8:	b004      	add	sp, #16
 8006bca:	4770      	bx	lr
 8006bcc:	803c3800 	.word	0x803c3800

08006bd0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006bd0:	b480      	push	{r7}
 8006bd2:	b085      	sub	sp, #20
 8006bd4:	af00      	add	r7, sp, #0
 8006bd6:	6078      	str	r0, [r7, #4]
 8006bd8:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8006bda:	2300      	movs	r3, #0
 8006bdc:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006bde:	683b      	ldr	r3, [r7, #0]
 8006be0:	019b      	lsls	r3, r3, #6
 8006be2:	f043 0220 	orr.w	r2, r3, #32
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	3301      	adds	r3, #1
 8006bee:	60fb      	str	r3, [r7, #12]
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	4a09      	ldr	r2, [pc, #36]	; (8006c18 <USB_FlushTxFifo+0x48>)
 8006bf4:	4293      	cmp	r3, r2
 8006bf6:	d901      	bls.n	8006bfc <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8006bf8:	2303      	movs	r3, #3
 8006bfa:	e006      	b.n	8006c0a <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	691b      	ldr	r3, [r3, #16]
 8006c00:	f003 0320 	and.w	r3, r3, #32
 8006c04:	2b20      	cmp	r3, #32
 8006c06:	d0f0      	beq.n	8006bea <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8006c08:	2300      	movs	r3, #0
}
 8006c0a:	4618      	mov	r0, r3
 8006c0c:	3714      	adds	r7, #20
 8006c0e:	46bd      	mov	sp, r7
 8006c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c14:	4770      	bx	lr
 8006c16:	bf00      	nop
 8006c18:	00030d40 	.word	0x00030d40

08006c1c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006c1c:	b480      	push	{r7}
 8006c1e:	b085      	sub	sp, #20
 8006c20:	af00      	add	r7, sp, #0
 8006c22:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8006c24:	2300      	movs	r3, #0
 8006c26:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	2210      	movs	r2, #16
 8006c2c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	3301      	adds	r3, #1
 8006c32:	60fb      	str	r3, [r7, #12]
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	4a09      	ldr	r2, [pc, #36]	; (8006c5c <USB_FlushRxFifo+0x40>)
 8006c38:	4293      	cmp	r3, r2
 8006c3a:	d901      	bls.n	8006c40 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8006c3c:	2303      	movs	r3, #3
 8006c3e:	e006      	b.n	8006c4e <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	691b      	ldr	r3, [r3, #16]
 8006c44:	f003 0310 	and.w	r3, r3, #16
 8006c48:	2b10      	cmp	r3, #16
 8006c4a:	d0f0      	beq.n	8006c2e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8006c4c:	2300      	movs	r3, #0
}
 8006c4e:	4618      	mov	r0, r3
 8006c50:	3714      	adds	r7, #20
 8006c52:	46bd      	mov	sp, r7
 8006c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c58:	4770      	bx	lr
 8006c5a:	bf00      	nop
 8006c5c:	00030d40 	.word	0x00030d40

08006c60 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006c60:	b480      	push	{r7}
 8006c62:	b085      	sub	sp, #20
 8006c64:	af00      	add	r7, sp, #0
 8006c66:	6078      	str	r0, [r7, #4]
 8006c68:	460b      	mov	r3, r1
 8006c6a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c76:	681a      	ldr	r2, [r3, #0]
 8006c78:	78fb      	ldrb	r3, [r7, #3]
 8006c7a:	68f9      	ldr	r1, [r7, #12]
 8006c7c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006c80:	4313      	orrs	r3, r2
 8006c82:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006c84:	2300      	movs	r3, #0
}
 8006c86:	4618      	mov	r0, r3
 8006c88:	3714      	adds	r7, #20
 8006c8a:	46bd      	mov	sp, r7
 8006c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c90:	4770      	bx	lr

08006c92 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8006c92:	b480      	push	{r7}
 8006c94:	b087      	sub	sp, #28
 8006c96:	af00      	add	r7, sp, #0
 8006c98:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8006c9e:	693b      	ldr	r3, [r7, #16]
 8006ca0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ca4:	689b      	ldr	r3, [r3, #8]
 8006ca6:	f003 0306 	and.w	r3, r3, #6
 8006caa:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d102      	bne.n	8006cb8 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8006cb2:	2300      	movs	r3, #0
 8006cb4:	75fb      	strb	r3, [r7, #23]
 8006cb6:	e00a      	b.n	8006cce <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	2b02      	cmp	r3, #2
 8006cbc:	d002      	beq.n	8006cc4 <USB_GetDevSpeed+0x32>
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	2b06      	cmp	r3, #6
 8006cc2:	d102      	bne.n	8006cca <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8006cc4:	2302      	movs	r3, #2
 8006cc6:	75fb      	strb	r3, [r7, #23]
 8006cc8:	e001      	b.n	8006cce <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8006cca:	230f      	movs	r3, #15
 8006ccc:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8006cce:	7dfb      	ldrb	r3, [r7, #23]
}
 8006cd0:	4618      	mov	r0, r3
 8006cd2:	371c      	adds	r7, #28
 8006cd4:	46bd      	mov	sp, r7
 8006cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cda:	4770      	bx	lr

08006cdc <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006cdc:	b480      	push	{r7}
 8006cde:	b085      	sub	sp, #20
 8006ce0:	af00      	add	r7, sp, #0
 8006ce2:	6078      	str	r0, [r7, #4]
 8006ce4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006cea:	683b      	ldr	r3, [r7, #0]
 8006cec:	781b      	ldrb	r3, [r3, #0]
 8006cee:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006cf0:	683b      	ldr	r3, [r7, #0]
 8006cf2:	785b      	ldrb	r3, [r3, #1]
 8006cf4:	2b01      	cmp	r3, #1
 8006cf6:	d13a      	bne.n	8006d6e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006cfe:	69da      	ldr	r2, [r3, #28]
 8006d00:	683b      	ldr	r3, [r7, #0]
 8006d02:	781b      	ldrb	r3, [r3, #0]
 8006d04:	f003 030f 	and.w	r3, r3, #15
 8006d08:	2101      	movs	r1, #1
 8006d0a:	fa01 f303 	lsl.w	r3, r1, r3
 8006d0e:	b29b      	uxth	r3, r3
 8006d10:	68f9      	ldr	r1, [r7, #12]
 8006d12:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006d16:	4313      	orrs	r3, r2
 8006d18:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8006d1a:	68bb      	ldr	r3, [r7, #8]
 8006d1c:	015a      	lsls	r2, r3, #5
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	4413      	add	r3, r2
 8006d22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d155      	bne.n	8006ddc <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006d30:	68bb      	ldr	r3, [r7, #8]
 8006d32:	015a      	lsls	r2, r3, #5
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	4413      	add	r3, r2
 8006d38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d3c:	681a      	ldr	r2, [r3, #0]
 8006d3e:	683b      	ldr	r3, [r7, #0]
 8006d40:	689b      	ldr	r3, [r3, #8]
 8006d42:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006d46:	683b      	ldr	r3, [r7, #0]
 8006d48:	78db      	ldrb	r3, [r3, #3]
 8006d4a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006d4c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006d4e:	68bb      	ldr	r3, [r7, #8]
 8006d50:	059b      	lsls	r3, r3, #22
 8006d52:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006d54:	4313      	orrs	r3, r2
 8006d56:	68ba      	ldr	r2, [r7, #8]
 8006d58:	0151      	lsls	r1, r2, #5
 8006d5a:	68fa      	ldr	r2, [r7, #12]
 8006d5c:	440a      	add	r2, r1
 8006d5e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006d62:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006d66:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006d6a:	6013      	str	r3, [r2, #0]
 8006d6c:	e036      	b.n	8006ddc <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d74:	69da      	ldr	r2, [r3, #28]
 8006d76:	683b      	ldr	r3, [r7, #0]
 8006d78:	781b      	ldrb	r3, [r3, #0]
 8006d7a:	f003 030f 	and.w	r3, r3, #15
 8006d7e:	2101      	movs	r1, #1
 8006d80:	fa01 f303 	lsl.w	r3, r1, r3
 8006d84:	041b      	lsls	r3, r3, #16
 8006d86:	68f9      	ldr	r1, [r7, #12]
 8006d88:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006d8c:	4313      	orrs	r3, r2
 8006d8e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8006d90:	68bb      	ldr	r3, [r7, #8]
 8006d92:	015a      	lsls	r2, r3, #5
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	4413      	add	r3, r2
 8006d98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d11a      	bne.n	8006ddc <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006da6:	68bb      	ldr	r3, [r7, #8]
 8006da8:	015a      	lsls	r2, r3, #5
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	4413      	add	r3, r2
 8006dae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006db2:	681a      	ldr	r2, [r3, #0]
 8006db4:	683b      	ldr	r3, [r7, #0]
 8006db6:	689b      	ldr	r3, [r3, #8]
 8006db8:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8006dbc:	683b      	ldr	r3, [r7, #0]
 8006dbe:	78db      	ldrb	r3, [r3, #3]
 8006dc0:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006dc2:	430b      	orrs	r3, r1
 8006dc4:	4313      	orrs	r3, r2
 8006dc6:	68ba      	ldr	r2, [r7, #8]
 8006dc8:	0151      	lsls	r1, r2, #5
 8006dca:	68fa      	ldr	r2, [r7, #12]
 8006dcc:	440a      	add	r2, r1
 8006dce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006dd2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006dd6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006dda:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8006ddc:	2300      	movs	r3, #0
}
 8006dde:	4618      	mov	r0, r3
 8006de0:	3714      	adds	r7, #20
 8006de2:	46bd      	mov	sp, r7
 8006de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de8:	4770      	bx	lr
	...

08006dec <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006dec:	b480      	push	{r7}
 8006dee:	b085      	sub	sp, #20
 8006df0:	af00      	add	r7, sp, #0
 8006df2:	6078      	str	r0, [r7, #4]
 8006df4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006dfa:	683b      	ldr	r3, [r7, #0]
 8006dfc:	781b      	ldrb	r3, [r3, #0]
 8006dfe:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8006e00:	683b      	ldr	r3, [r7, #0]
 8006e02:	785b      	ldrb	r3, [r3, #1]
 8006e04:	2b01      	cmp	r3, #1
 8006e06:	d161      	bne.n	8006ecc <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006e08:	68bb      	ldr	r3, [r7, #8]
 8006e0a:	015a      	lsls	r2, r3, #5
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	4413      	add	r3, r2
 8006e10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006e1a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006e1e:	d11f      	bne.n	8006e60 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8006e20:	68bb      	ldr	r3, [r7, #8]
 8006e22:	015a      	lsls	r2, r3, #5
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	4413      	add	r3, r2
 8006e28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	68ba      	ldr	r2, [r7, #8]
 8006e30:	0151      	lsls	r1, r2, #5
 8006e32:	68fa      	ldr	r2, [r7, #12]
 8006e34:	440a      	add	r2, r1
 8006e36:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006e3a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006e3e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8006e40:	68bb      	ldr	r3, [r7, #8]
 8006e42:	015a      	lsls	r2, r3, #5
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	4413      	add	r3, r2
 8006e48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	68ba      	ldr	r2, [r7, #8]
 8006e50:	0151      	lsls	r1, r2, #5
 8006e52:	68fa      	ldr	r2, [r7, #12]
 8006e54:	440a      	add	r2, r1
 8006e56:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006e5a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006e5e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e66:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006e68:	683b      	ldr	r3, [r7, #0]
 8006e6a:	781b      	ldrb	r3, [r3, #0]
 8006e6c:	f003 030f 	and.w	r3, r3, #15
 8006e70:	2101      	movs	r1, #1
 8006e72:	fa01 f303 	lsl.w	r3, r1, r3
 8006e76:	b29b      	uxth	r3, r3
 8006e78:	43db      	mvns	r3, r3
 8006e7a:	68f9      	ldr	r1, [r7, #12]
 8006e7c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006e80:	4013      	ands	r3, r2
 8006e82:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e8a:	69da      	ldr	r2, [r3, #28]
 8006e8c:	683b      	ldr	r3, [r7, #0]
 8006e8e:	781b      	ldrb	r3, [r3, #0]
 8006e90:	f003 030f 	and.w	r3, r3, #15
 8006e94:	2101      	movs	r1, #1
 8006e96:	fa01 f303 	lsl.w	r3, r1, r3
 8006e9a:	b29b      	uxth	r3, r3
 8006e9c:	43db      	mvns	r3, r3
 8006e9e:	68f9      	ldr	r1, [r7, #12]
 8006ea0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006ea4:	4013      	ands	r3, r2
 8006ea6:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8006ea8:	68bb      	ldr	r3, [r7, #8]
 8006eaa:	015a      	lsls	r2, r3, #5
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	4413      	add	r3, r2
 8006eb0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006eb4:	681a      	ldr	r2, [r3, #0]
 8006eb6:	68bb      	ldr	r3, [r7, #8]
 8006eb8:	0159      	lsls	r1, r3, #5
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	440b      	add	r3, r1
 8006ebe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ec2:	4619      	mov	r1, r3
 8006ec4:	4b35      	ldr	r3, [pc, #212]	; (8006f9c <USB_DeactivateEndpoint+0x1b0>)
 8006ec6:	4013      	ands	r3, r2
 8006ec8:	600b      	str	r3, [r1, #0]
 8006eca:	e060      	b.n	8006f8e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006ecc:	68bb      	ldr	r3, [r7, #8]
 8006ece:	015a      	lsls	r2, r3, #5
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	4413      	add	r3, r2
 8006ed4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006ede:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006ee2:	d11f      	bne.n	8006f24 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006ee4:	68bb      	ldr	r3, [r7, #8]
 8006ee6:	015a      	lsls	r2, r3, #5
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	4413      	add	r3, r2
 8006eec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	68ba      	ldr	r2, [r7, #8]
 8006ef4:	0151      	lsls	r1, r2, #5
 8006ef6:	68fa      	ldr	r2, [r7, #12]
 8006ef8:	440a      	add	r2, r1
 8006efa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006efe:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006f02:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8006f04:	68bb      	ldr	r3, [r7, #8]
 8006f06:	015a      	lsls	r2, r3, #5
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	4413      	add	r3, r2
 8006f0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	68ba      	ldr	r2, [r7, #8]
 8006f14:	0151      	lsls	r1, r2, #5
 8006f16:	68fa      	ldr	r2, [r7, #12]
 8006f18:	440a      	add	r2, r1
 8006f1a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006f1e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006f22:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f2a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006f2c:	683b      	ldr	r3, [r7, #0]
 8006f2e:	781b      	ldrb	r3, [r3, #0]
 8006f30:	f003 030f 	and.w	r3, r3, #15
 8006f34:	2101      	movs	r1, #1
 8006f36:	fa01 f303 	lsl.w	r3, r1, r3
 8006f3a:	041b      	lsls	r3, r3, #16
 8006f3c:	43db      	mvns	r3, r3
 8006f3e:	68f9      	ldr	r1, [r7, #12]
 8006f40:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006f44:	4013      	ands	r3, r2
 8006f46:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f4e:	69da      	ldr	r2, [r3, #28]
 8006f50:	683b      	ldr	r3, [r7, #0]
 8006f52:	781b      	ldrb	r3, [r3, #0]
 8006f54:	f003 030f 	and.w	r3, r3, #15
 8006f58:	2101      	movs	r1, #1
 8006f5a:	fa01 f303 	lsl.w	r3, r1, r3
 8006f5e:	041b      	lsls	r3, r3, #16
 8006f60:	43db      	mvns	r3, r3
 8006f62:	68f9      	ldr	r1, [r7, #12]
 8006f64:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006f68:	4013      	ands	r3, r2
 8006f6a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8006f6c:	68bb      	ldr	r3, [r7, #8]
 8006f6e:	015a      	lsls	r2, r3, #5
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	4413      	add	r3, r2
 8006f74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f78:	681a      	ldr	r2, [r3, #0]
 8006f7a:	68bb      	ldr	r3, [r7, #8]
 8006f7c:	0159      	lsls	r1, r3, #5
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	440b      	add	r3, r1
 8006f82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f86:	4619      	mov	r1, r3
 8006f88:	4b05      	ldr	r3, [pc, #20]	; (8006fa0 <USB_DeactivateEndpoint+0x1b4>)
 8006f8a:	4013      	ands	r3, r2
 8006f8c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8006f8e:	2300      	movs	r3, #0
}
 8006f90:	4618      	mov	r0, r3
 8006f92:	3714      	adds	r7, #20
 8006f94:	46bd      	mov	sp, r7
 8006f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f9a:	4770      	bx	lr
 8006f9c:	ec337800 	.word	0xec337800
 8006fa0:	eff37800 	.word	0xeff37800

08006fa4 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006fa4:	b580      	push	{r7, lr}
 8006fa6:	b08a      	sub	sp, #40	; 0x28
 8006fa8:	af02      	add	r7, sp, #8
 8006faa:	60f8      	str	r0, [r7, #12]
 8006fac:	60b9      	str	r1, [r7, #8]
 8006fae:	4613      	mov	r3, r2
 8006fb0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8006fb6:	68bb      	ldr	r3, [r7, #8]
 8006fb8:	781b      	ldrb	r3, [r3, #0]
 8006fba:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006fbc:	68bb      	ldr	r3, [r7, #8]
 8006fbe:	785b      	ldrb	r3, [r3, #1]
 8006fc0:	2b01      	cmp	r3, #1
 8006fc2:	f040 815c 	bne.w	800727e <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006fc6:	68bb      	ldr	r3, [r7, #8]
 8006fc8:	695b      	ldr	r3, [r3, #20]
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d132      	bne.n	8007034 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006fce:	69bb      	ldr	r3, [r7, #24]
 8006fd0:	015a      	lsls	r2, r3, #5
 8006fd2:	69fb      	ldr	r3, [r7, #28]
 8006fd4:	4413      	add	r3, r2
 8006fd6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006fda:	691b      	ldr	r3, [r3, #16]
 8006fdc:	69ba      	ldr	r2, [r7, #24]
 8006fde:	0151      	lsls	r1, r2, #5
 8006fe0:	69fa      	ldr	r2, [r7, #28]
 8006fe2:	440a      	add	r2, r1
 8006fe4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006fe8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006fec:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006ff0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006ff2:	69bb      	ldr	r3, [r7, #24]
 8006ff4:	015a      	lsls	r2, r3, #5
 8006ff6:	69fb      	ldr	r3, [r7, #28]
 8006ff8:	4413      	add	r3, r2
 8006ffa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ffe:	691b      	ldr	r3, [r3, #16]
 8007000:	69ba      	ldr	r2, [r7, #24]
 8007002:	0151      	lsls	r1, r2, #5
 8007004:	69fa      	ldr	r2, [r7, #28]
 8007006:	440a      	add	r2, r1
 8007008:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800700c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007010:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007012:	69bb      	ldr	r3, [r7, #24]
 8007014:	015a      	lsls	r2, r3, #5
 8007016:	69fb      	ldr	r3, [r7, #28]
 8007018:	4413      	add	r3, r2
 800701a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800701e:	691b      	ldr	r3, [r3, #16]
 8007020:	69ba      	ldr	r2, [r7, #24]
 8007022:	0151      	lsls	r1, r2, #5
 8007024:	69fa      	ldr	r2, [r7, #28]
 8007026:	440a      	add	r2, r1
 8007028:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800702c:	0cdb      	lsrs	r3, r3, #19
 800702e:	04db      	lsls	r3, r3, #19
 8007030:	6113      	str	r3, [r2, #16]
 8007032:	e074      	b.n	800711e <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007034:	69bb      	ldr	r3, [r7, #24]
 8007036:	015a      	lsls	r2, r3, #5
 8007038:	69fb      	ldr	r3, [r7, #28]
 800703a:	4413      	add	r3, r2
 800703c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007040:	691b      	ldr	r3, [r3, #16]
 8007042:	69ba      	ldr	r2, [r7, #24]
 8007044:	0151      	lsls	r1, r2, #5
 8007046:	69fa      	ldr	r2, [r7, #28]
 8007048:	440a      	add	r2, r1
 800704a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800704e:	0cdb      	lsrs	r3, r3, #19
 8007050:	04db      	lsls	r3, r3, #19
 8007052:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007054:	69bb      	ldr	r3, [r7, #24]
 8007056:	015a      	lsls	r2, r3, #5
 8007058:	69fb      	ldr	r3, [r7, #28]
 800705a:	4413      	add	r3, r2
 800705c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007060:	691b      	ldr	r3, [r3, #16]
 8007062:	69ba      	ldr	r2, [r7, #24]
 8007064:	0151      	lsls	r1, r2, #5
 8007066:	69fa      	ldr	r2, [r7, #28]
 8007068:	440a      	add	r2, r1
 800706a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800706e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007072:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007076:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8007078:	69bb      	ldr	r3, [r7, #24]
 800707a:	015a      	lsls	r2, r3, #5
 800707c:	69fb      	ldr	r3, [r7, #28]
 800707e:	4413      	add	r3, r2
 8007080:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007084:	691a      	ldr	r2, [r3, #16]
 8007086:	68bb      	ldr	r3, [r7, #8]
 8007088:	6959      	ldr	r1, [r3, #20]
 800708a:	68bb      	ldr	r3, [r7, #8]
 800708c:	689b      	ldr	r3, [r3, #8]
 800708e:	440b      	add	r3, r1
 8007090:	1e59      	subs	r1, r3, #1
 8007092:	68bb      	ldr	r3, [r7, #8]
 8007094:	689b      	ldr	r3, [r3, #8]
 8007096:	fbb1 f3f3 	udiv	r3, r1, r3
 800709a:	04d9      	lsls	r1, r3, #19
 800709c:	4b9d      	ldr	r3, [pc, #628]	; (8007314 <USB_EPStartXfer+0x370>)
 800709e:	400b      	ands	r3, r1
 80070a0:	69b9      	ldr	r1, [r7, #24]
 80070a2:	0148      	lsls	r0, r1, #5
 80070a4:	69f9      	ldr	r1, [r7, #28]
 80070a6:	4401      	add	r1, r0
 80070a8:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80070ac:	4313      	orrs	r3, r2
 80070ae:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80070b0:	69bb      	ldr	r3, [r7, #24]
 80070b2:	015a      	lsls	r2, r3, #5
 80070b4:	69fb      	ldr	r3, [r7, #28]
 80070b6:	4413      	add	r3, r2
 80070b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070bc:	691a      	ldr	r2, [r3, #16]
 80070be:	68bb      	ldr	r3, [r7, #8]
 80070c0:	695b      	ldr	r3, [r3, #20]
 80070c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80070c6:	69b9      	ldr	r1, [r7, #24]
 80070c8:	0148      	lsls	r0, r1, #5
 80070ca:	69f9      	ldr	r1, [r7, #28]
 80070cc:	4401      	add	r1, r0
 80070ce:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80070d2:	4313      	orrs	r3, r2
 80070d4:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80070d6:	68bb      	ldr	r3, [r7, #8]
 80070d8:	78db      	ldrb	r3, [r3, #3]
 80070da:	2b01      	cmp	r3, #1
 80070dc:	d11f      	bne.n	800711e <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80070de:	69bb      	ldr	r3, [r7, #24]
 80070e0:	015a      	lsls	r2, r3, #5
 80070e2:	69fb      	ldr	r3, [r7, #28]
 80070e4:	4413      	add	r3, r2
 80070e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070ea:	691b      	ldr	r3, [r3, #16]
 80070ec:	69ba      	ldr	r2, [r7, #24]
 80070ee:	0151      	lsls	r1, r2, #5
 80070f0:	69fa      	ldr	r2, [r7, #28]
 80070f2:	440a      	add	r2, r1
 80070f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80070f8:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80070fc:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80070fe:	69bb      	ldr	r3, [r7, #24]
 8007100:	015a      	lsls	r2, r3, #5
 8007102:	69fb      	ldr	r3, [r7, #28]
 8007104:	4413      	add	r3, r2
 8007106:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800710a:	691b      	ldr	r3, [r3, #16]
 800710c:	69ba      	ldr	r2, [r7, #24]
 800710e:	0151      	lsls	r1, r2, #5
 8007110:	69fa      	ldr	r2, [r7, #28]
 8007112:	440a      	add	r2, r1
 8007114:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007118:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800711c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800711e:	79fb      	ldrb	r3, [r7, #7]
 8007120:	2b01      	cmp	r3, #1
 8007122:	d14b      	bne.n	80071bc <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8007124:	68bb      	ldr	r3, [r7, #8]
 8007126:	691b      	ldr	r3, [r3, #16]
 8007128:	2b00      	cmp	r3, #0
 800712a:	d009      	beq.n	8007140 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800712c:	69bb      	ldr	r3, [r7, #24]
 800712e:	015a      	lsls	r2, r3, #5
 8007130:	69fb      	ldr	r3, [r7, #28]
 8007132:	4413      	add	r3, r2
 8007134:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007138:	461a      	mov	r2, r3
 800713a:	68bb      	ldr	r3, [r7, #8]
 800713c:	691b      	ldr	r3, [r3, #16]
 800713e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8007140:	68bb      	ldr	r3, [r7, #8]
 8007142:	78db      	ldrb	r3, [r3, #3]
 8007144:	2b01      	cmp	r3, #1
 8007146:	d128      	bne.n	800719a <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007148:	69fb      	ldr	r3, [r7, #28]
 800714a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800714e:	689b      	ldr	r3, [r3, #8]
 8007150:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007154:	2b00      	cmp	r3, #0
 8007156:	d110      	bne.n	800717a <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007158:	69bb      	ldr	r3, [r7, #24]
 800715a:	015a      	lsls	r2, r3, #5
 800715c:	69fb      	ldr	r3, [r7, #28]
 800715e:	4413      	add	r3, r2
 8007160:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	69ba      	ldr	r2, [r7, #24]
 8007168:	0151      	lsls	r1, r2, #5
 800716a:	69fa      	ldr	r2, [r7, #28]
 800716c:	440a      	add	r2, r1
 800716e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007172:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007176:	6013      	str	r3, [r2, #0]
 8007178:	e00f      	b.n	800719a <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800717a:	69bb      	ldr	r3, [r7, #24]
 800717c:	015a      	lsls	r2, r3, #5
 800717e:	69fb      	ldr	r3, [r7, #28]
 8007180:	4413      	add	r3, r2
 8007182:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	69ba      	ldr	r2, [r7, #24]
 800718a:	0151      	lsls	r1, r2, #5
 800718c:	69fa      	ldr	r2, [r7, #28]
 800718e:	440a      	add	r2, r1
 8007190:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007194:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007198:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800719a:	69bb      	ldr	r3, [r7, #24]
 800719c:	015a      	lsls	r2, r3, #5
 800719e:	69fb      	ldr	r3, [r7, #28]
 80071a0:	4413      	add	r3, r2
 80071a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	69ba      	ldr	r2, [r7, #24]
 80071aa:	0151      	lsls	r1, r2, #5
 80071ac:	69fa      	ldr	r2, [r7, #28]
 80071ae:	440a      	add	r2, r1
 80071b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80071b4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80071b8:	6013      	str	r3, [r2, #0]
 80071ba:	e12f      	b.n	800741c <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80071bc:	69bb      	ldr	r3, [r7, #24]
 80071be:	015a      	lsls	r2, r3, #5
 80071c0:	69fb      	ldr	r3, [r7, #28]
 80071c2:	4413      	add	r3, r2
 80071c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	69ba      	ldr	r2, [r7, #24]
 80071cc:	0151      	lsls	r1, r2, #5
 80071ce:	69fa      	ldr	r2, [r7, #28]
 80071d0:	440a      	add	r2, r1
 80071d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80071d6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80071da:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80071dc:	68bb      	ldr	r3, [r7, #8]
 80071de:	78db      	ldrb	r3, [r3, #3]
 80071e0:	2b01      	cmp	r3, #1
 80071e2:	d015      	beq.n	8007210 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80071e4:	68bb      	ldr	r3, [r7, #8]
 80071e6:	695b      	ldr	r3, [r3, #20]
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	f000 8117 	beq.w	800741c <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80071ee:	69fb      	ldr	r3, [r7, #28]
 80071f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80071f4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80071f6:	68bb      	ldr	r3, [r7, #8]
 80071f8:	781b      	ldrb	r3, [r3, #0]
 80071fa:	f003 030f 	and.w	r3, r3, #15
 80071fe:	2101      	movs	r1, #1
 8007200:	fa01 f303 	lsl.w	r3, r1, r3
 8007204:	69f9      	ldr	r1, [r7, #28]
 8007206:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800720a:	4313      	orrs	r3, r2
 800720c:	634b      	str	r3, [r1, #52]	; 0x34
 800720e:	e105      	b.n	800741c <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007210:	69fb      	ldr	r3, [r7, #28]
 8007212:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007216:	689b      	ldr	r3, [r3, #8]
 8007218:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800721c:	2b00      	cmp	r3, #0
 800721e:	d110      	bne.n	8007242 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007220:	69bb      	ldr	r3, [r7, #24]
 8007222:	015a      	lsls	r2, r3, #5
 8007224:	69fb      	ldr	r3, [r7, #28]
 8007226:	4413      	add	r3, r2
 8007228:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	69ba      	ldr	r2, [r7, #24]
 8007230:	0151      	lsls	r1, r2, #5
 8007232:	69fa      	ldr	r2, [r7, #28]
 8007234:	440a      	add	r2, r1
 8007236:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800723a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800723e:	6013      	str	r3, [r2, #0]
 8007240:	e00f      	b.n	8007262 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007242:	69bb      	ldr	r3, [r7, #24]
 8007244:	015a      	lsls	r2, r3, #5
 8007246:	69fb      	ldr	r3, [r7, #28]
 8007248:	4413      	add	r3, r2
 800724a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	69ba      	ldr	r2, [r7, #24]
 8007252:	0151      	lsls	r1, r2, #5
 8007254:	69fa      	ldr	r2, [r7, #28]
 8007256:	440a      	add	r2, r1
 8007258:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800725c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007260:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8007262:	68bb      	ldr	r3, [r7, #8]
 8007264:	68d9      	ldr	r1, [r3, #12]
 8007266:	68bb      	ldr	r3, [r7, #8]
 8007268:	781a      	ldrb	r2, [r3, #0]
 800726a:	68bb      	ldr	r3, [r7, #8]
 800726c:	695b      	ldr	r3, [r3, #20]
 800726e:	b298      	uxth	r0, r3
 8007270:	79fb      	ldrb	r3, [r7, #7]
 8007272:	9300      	str	r3, [sp, #0]
 8007274:	4603      	mov	r3, r0
 8007276:	68f8      	ldr	r0, [r7, #12]
 8007278:	f000 fa2b 	bl	80076d2 <USB_WritePacket>
 800727c:	e0ce      	b.n	800741c <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800727e:	69bb      	ldr	r3, [r7, #24]
 8007280:	015a      	lsls	r2, r3, #5
 8007282:	69fb      	ldr	r3, [r7, #28]
 8007284:	4413      	add	r3, r2
 8007286:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800728a:	691b      	ldr	r3, [r3, #16]
 800728c:	69ba      	ldr	r2, [r7, #24]
 800728e:	0151      	lsls	r1, r2, #5
 8007290:	69fa      	ldr	r2, [r7, #28]
 8007292:	440a      	add	r2, r1
 8007294:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007298:	0cdb      	lsrs	r3, r3, #19
 800729a:	04db      	lsls	r3, r3, #19
 800729c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800729e:	69bb      	ldr	r3, [r7, #24]
 80072a0:	015a      	lsls	r2, r3, #5
 80072a2:	69fb      	ldr	r3, [r7, #28]
 80072a4:	4413      	add	r3, r2
 80072a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072aa:	691b      	ldr	r3, [r3, #16]
 80072ac:	69ba      	ldr	r2, [r7, #24]
 80072ae:	0151      	lsls	r1, r2, #5
 80072b0:	69fa      	ldr	r2, [r7, #28]
 80072b2:	440a      	add	r2, r1
 80072b4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80072b8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80072bc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80072c0:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80072c2:	68bb      	ldr	r3, [r7, #8]
 80072c4:	695b      	ldr	r3, [r3, #20]
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d126      	bne.n	8007318 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80072ca:	69bb      	ldr	r3, [r7, #24]
 80072cc:	015a      	lsls	r2, r3, #5
 80072ce:	69fb      	ldr	r3, [r7, #28]
 80072d0:	4413      	add	r3, r2
 80072d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072d6:	691a      	ldr	r2, [r3, #16]
 80072d8:	68bb      	ldr	r3, [r7, #8]
 80072da:	689b      	ldr	r3, [r3, #8]
 80072dc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80072e0:	69b9      	ldr	r1, [r7, #24]
 80072e2:	0148      	lsls	r0, r1, #5
 80072e4:	69f9      	ldr	r1, [r7, #28]
 80072e6:	4401      	add	r1, r0
 80072e8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80072ec:	4313      	orrs	r3, r2
 80072ee:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80072f0:	69bb      	ldr	r3, [r7, #24]
 80072f2:	015a      	lsls	r2, r3, #5
 80072f4:	69fb      	ldr	r3, [r7, #28]
 80072f6:	4413      	add	r3, r2
 80072f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072fc:	691b      	ldr	r3, [r3, #16]
 80072fe:	69ba      	ldr	r2, [r7, #24]
 8007300:	0151      	lsls	r1, r2, #5
 8007302:	69fa      	ldr	r2, [r7, #28]
 8007304:	440a      	add	r2, r1
 8007306:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800730a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800730e:	6113      	str	r3, [r2, #16]
 8007310:	e036      	b.n	8007380 <USB_EPStartXfer+0x3dc>
 8007312:	bf00      	nop
 8007314:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8007318:	68bb      	ldr	r3, [r7, #8]
 800731a:	695a      	ldr	r2, [r3, #20]
 800731c:	68bb      	ldr	r3, [r7, #8]
 800731e:	689b      	ldr	r3, [r3, #8]
 8007320:	4413      	add	r3, r2
 8007322:	1e5a      	subs	r2, r3, #1
 8007324:	68bb      	ldr	r3, [r7, #8]
 8007326:	689b      	ldr	r3, [r3, #8]
 8007328:	fbb2 f3f3 	udiv	r3, r2, r3
 800732c:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800732e:	69bb      	ldr	r3, [r7, #24]
 8007330:	015a      	lsls	r2, r3, #5
 8007332:	69fb      	ldr	r3, [r7, #28]
 8007334:	4413      	add	r3, r2
 8007336:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800733a:	691a      	ldr	r2, [r3, #16]
 800733c:	8afb      	ldrh	r3, [r7, #22]
 800733e:	04d9      	lsls	r1, r3, #19
 8007340:	4b39      	ldr	r3, [pc, #228]	; (8007428 <USB_EPStartXfer+0x484>)
 8007342:	400b      	ands	r3, r1
 8007344:	69b9      	ldr	r1, [r7, #24]
 8007346:	0148      	lsls	r0, r1, #5
 8007348:	69f9      	ldr	r1, [r7, #28]
 800734a:	4401      	add	r1, r0
 800734c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007350:	4313      	orrs	r3, r2
 8007352:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8007354:	69bb      	ldr	r3, [r7, #24]
 8007356:	015a      	lsls	r2, r3, #5
 8007358:	69fb      	ldr	r3, [r7, #28]
 800735a:	4413      	add	r3, r2
 800735c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007360:	691a      	ldr	r2, [r3, #16]
 8007362:	68bb      	ldr	r3, [r7, #8]
 8007364:	689b      	ldr	r3, [r3, #8]
 8007366:	8af9      	ldrh	r1, [r7, #22]
 8007368:	fb01 f303 	mul.w	r3, r1, r3
 800736c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007370:	69b9      	ldr	r1, [r7, #24]
 8007372:	0148      	lsls	r0, r1, #5
 8007374:	69f9      	ldr	r1, [r7, #28]
 8007376:	4401      	add	r1, r0
 8007378:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800737c:	4313      	orrs	r3, r2
 800737e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8007380:	79fb      	ldrb	r3, [r7, #7]
 8007382:	2b01      	cmp	r3, #1
 8007384:	d10d      	bne.n	80073a2 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8007386:	68bb      	ldr	r3, [r7, #8]
 8007388:	68db      	ldr	r3, [r3, #12]
 800738a:	2b00      	cmp	r3, #0
 800738c:	d009      	beq.n	80073a2 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800738e:	68bb      	ldr	r3, [r7, #8]
 8007390:	68d9      	ldr	r1, [r3, #12]
 8007392:	69bb      	ldr	r3, [r7, #24]
 8007394:	015a      	lsls	r2, r3, #5
 8007396:	69fb      	ldr	r3, [r7, #28]
 8007398:	4413      	add	r3, r2
 800739a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800739e:	460a      	mov	r2, r1
 80073a0:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80073a2:	68bb      	ldr	r3, [r7, #8]
 80073a4:	78db      	ldrb	r3, [r3, #3]
 80073a6:	2b01      	cmp	r3, #1
 80073a8:	d128      	bne.n	80073fc <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80073aa:	69fb      	ldr	r3, [r7, #28]
 80073ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80073b0:	689b      	ldr	r3, [r3, #8]
 80073b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d110      	bne.n	80073dc <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80073ba:	69bb      	ldr	r3, [r7, #24]
 80073bc:	015a      	lsls	r2, r3, #5
 80073be:	69fb      	ldr	r3, [r7, #28]
 80073c0:	4413      	add	r3, r2
 80073c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	69ba      	ldr	r2, [r7, #24]
 80073ca:	0151      	lsls	r1, r2, #5
 80073cc:	69fa      	ldr	r2, [r7, #28]
 80073ce:	440a      	add	r2, r1
 80073d0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80073d4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80073d8:	6013      	str	r3, [r2, #0]
 80073da:	e00f      	b.n	80073fc <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80073dc:	69bb      	ldr	r3, [r7, #24]
 80073de:	015a      	lsls	r2, r3, #5
 80073e0:	69fb      	ldr	r3, [r7, #28]
 80073e2:	4413      	add	r3, r2
 80073e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	69ba      	ldr	r2, [r7, #24]
 80073ec:	0151      	lsls	r1, r2, #5
 80073ee:	69fa      	ldr	r2, [r7, #28]
 80073f0:	440a      	add	r2, r1
 80073f2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80073f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80073fa:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80073fc:	69bb      	ldr	r3, [r7, #24]
 80073fe:	015a      	lsls	r2, r3, #5
 8007400:	69fb      	ldr	r3, [r7, #28]
 8007402:	4413      	add	r3, r2
 8007404:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	69ba      	ldr	r2, [r7, #24]
 800740c:	0151      	lsls	r1, r2, #5
 800740e:	69fa      	ldr	r2, [r7, #28]
 8007410:	440a      	add	r2, r1
 8007412:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007416:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800741a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800741c:	2300      	movs	r3, #0
}
 800741e:	4618      	mov	r0, r3
 8007420:	3720      	adds	r7, #32
 8007422:	46bd      	mov	sp, r7
 8007424:	bd80      	pop	{r7, pc}
 8007426:	bf00      	nop
 8007428:	1ff80000 	.word	0x1ff80000

0800742c <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800742c:	b480      	push	{r7}
 800742e:	b087      	sub	sp, #28
 8007430:	af00      	add	r7, sp, #0
 8007432:	60f8      	str	r0, [r7, #12]
 8007434:	60b9      	str	r1, [r7, #8]
 8007436:	4613      	mov	r3, r2
 8007438:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800743e:	68bb      	ldr	r3, [r7, #8]
 8007440:	781b      	ldrb	r3, [r3, #0]
 8007442:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007444:	68bb      	ldr	r3, [r7, #8]
 8007446:	785b      	ldrb	r3, [r3, #1]
 8007448:	2b01      	cmp	r3, #1
 800744a:	f040 80cd 	bne.w	80075e8 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800744e:	68bb      	ldr	r3, [r7, #8]
 8007450:	695b      	ldr	r3, [r3, #20]
 8007452:	2b00      	cmp	r3, #0
 8007454:	d132      	bne.n	80074bc <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007456:	693b      	ldr	r3, [r7, #16]
 8007458:	015a      	lsls	r2, r3, #5
 800745a:	697b      	ldr	r3, [r7, #20]
 800745c:	4413      	add	r3, r2
 800745e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007462:	691b      	ldr	r3, [r3, #16]
 8007464:	693a      	ldr	r2, [r7, #16]
 8007466:	0151      	lsls	r1, r2, #5
 8007468:	697a      	ldr	r2, [r7, #20]
 800746a:	440a      	add	r2, r1
 800746c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007470:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007474:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007478:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800747a:	693b      	ldr	r3, [r7, #16]
 800747c:	015a      	lsls	r2, r3, #5
 800747e:	697b      	ldr	r3, [r7, #20]
 8007480:	4413      	add	r3, r2
 8007482:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007486:	691b      	ldr	r3, [r3, #16]
 8007488:	693a      	ldr	r2, [r7, #16]
 800748a:	0151      	lsls	r1, r2, #5
 800748c:	697a      	ldr	r2, [r7, #20]
 800748e:	440a      	add	r2, r1
 8007490:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007494:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007498:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800749a:	693b      	ldr	r3, [r7, #16]
 800749c:	015a      	lsls	r2, r3, #5
 800749e:	697b      	ldr	r3, [r7, #20]
 80074a0:	4413      	add	r3, r2
 80074a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80074a6:	691b      	ldr	r3, [r3, #16]
 80074a8:	693a      	ldr	r2, [r7, #16]
 80074aa:	0151      	lsls	r1, r2, #5
 80074ac:	697a      	ldr	r2, [r7, #20]
 80074ae:	440a      	add	r2, r1
 80074b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80074b4:	0cdb      	lsrs	r3, r3, #19
 80074b6:	04db      	lsls	r3, r3, #19
 80074b8:	6113      	str	r3, [r2, #16]
 80074ba:	e04e      	b.n	800755a <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80074bc:	693b      	ldr	r3, [r7, #16]
 80074be:	015a      	lsls	r2, r3, #5
 80074c0:	697b      	ldr	r3, [r7, #20]
 80074c2:	4413      	add	r3, r2
 80074c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80074c8:	691b      	ldr	r3, [r3, #16]
 80074ca:	693a      	ldr	r2, [r7, #16]
 80074cc:	0151      	lsls	r1, r2, #5
 80074ce:	697a      	ldr	r2, [r7, #20]
 80074d0:	440a      	add	r2, r1
 80074d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80074d6:	0cdb      	lsrs	r3, r3, #19
 80074d8:	04db      	lsls	r3, r3, #19
 80074da:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80074dc:	693b      	ldr	r3, [r7, #16]
 80074de:	015a      	lsls	r2, r3, #5
 80074e0:	697b      	ldr	r3, [r7, #20]
 80074e2:	4413      	add	r3, r2
 80074e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80074e8:	691b      	ldr	r3, [r3, #16]
 80074ea:	693a      	ldr	r2, [r7, #16]
 80074ec:	0151      	lsls	r1, r2, #5
 80074ee:	697a      	ldr	r2, [r7, #20]
 80074f0:	440a      	add	r2, r1
 80074f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80074f6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80074fa:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80074fe:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8007500:	68bb      	ldr	r3, [r7, #8]
 8007502:	695a      	ldr	r2, [r3, #20]
 8007504:	68bb      	ldr	r3, [r7, #8]
 8007506:	689b      	ldr	r3, [r3, #8]
 8007508:	429a      	cmp	r2, r3
 800750a:	d903      	bls.n	8007514 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800750c:	68bb      	ldr	r3, [r7, #8]
 800750e:	689a      	ldr	r2, [r3, #8]
 8007510:	68bb      	ldr	r3, [r7, #8]
 8007512:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007514:	693b      	ldr	r3, [r7, #16]
 8007516:	015a      	lsls	r2, r3, #5
 8007518:	697b      	ldr	r3, [r7, #20]
 800751a:	4413      	add	r3, r2
 800751c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007520:	691b      	ldr	r3, [r3, #16]
 8007522:	693a      	ldr	r2, [r7, #16]
 8007524:	0151      	lsls	r1, r2, #5
 8007526:	697a      	ldr	r2, [r7, #20]
 8007528:	440a      	add	r2, r1
 800752a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800752e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007532:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8007534:	693b      	ldr	r3, [r7, #16]
 8007536:	015a      	lsls	r2, r3, #5
 8007538:	697b      	ldr	r3, [r7, #20]
 800753a:	4413      	add	r3, r2
 800753c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007540:	691a      	ldr	r2, [r3, #16]
 8007542:	68bb      	ldr	r3, [r7, #8]
 8007544:	695b      	ldr	r3, [r3, #20]
 8007546:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800754a:	6939      	ldr	r1, [r7, #16]
 800754c:	0148      	lsls	r0, r1, #5
 800754e:	6979      	ldr	r1, [r7, #20]
 8007550:	4401      	add	r1, r0
 8007552:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007556:	4313      	orrs	r3, r2
 8007558:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800755a:	79fb      	ldrb	r3, [r7, #7]
 800755c:	2b01      	cmp	r3, #1
 800755e:	d11e      	bne.n	800759e <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8007560:	68bb      	ldr	r3, [r7, #8]
 8007562:	691b      	ldr	r3, [r3, #16]
 8007564:	2b00      	cmp	r3, #0
 8007566:	d009      	beq.n	800757c <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8007568:	693b      	ldr	r3, [r7, #16]
 800756a:	015a      	lsls	r2, r3, #5
 800756c:	697b      	ldr	r3, [r7, #20]
 800756e:	4413      	add	r3, r2
 8007570:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007574:	461a      	mov	r2, r3
 8007576:	68bb      	ldr	r3, [r7, #8]
 8007578:	691b      	ldr	r3, [r3, #16]
 800757a:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800757c:	693b      	ldr	r3, [r7, #16]
 800757e:	015a      	lsls	r2, r3, #5
 8007580:	697b      	ldr	r3, [r7, #20]
 8007582:	4413      	add	r3, r2
 8007584:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	693a      	ldr	r2, [r7, #16]
 800758c:	0151      	lsls	r1, r2, #5
 800758e:	697a      	ldr	r2, [r7, #20]
 8007590:	440a      	add	r2, r1
 8007592:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007596:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800759a:	6013      	str	r3, [r2, #0]
 800759c:	e092      	b.n	80076c4 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800759e:	693b      	ldr	r3, [r7, #16]
 80075a0:	015a      	lsls	r2, r3, #5
 80075a2:	697b      	ldr	r3, [r7, #20]
 80075a4:	4413      	add	r3, r2
 80075a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	693a      	ldr	r2, [r7, #16]
 80075ae:	0151      	lsls	r1, r2, #5
 80075b0:	697a      	ldr	r2, [r7, #20]
 80075b2:	440a      	add	r2, r1
 80075b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80075b8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80075bc:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80075be:	68bb      	ldr	r3, [r7, #8]
 80075c0:	695b      	ldr	r3, [r3, #20]
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d07e      	beq.n	80076c4 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80075c6:	697b      	ldr	r3, [r7, #20]
 80075c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80075cc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80075ce:	68bb      	ldr	r3, [r7, #8]
 80075d0:	781b      	ldrb	r3, [r3, #0]
 80075d2:	f003 030f 	and.w	r3, r3, #15
 80075d6:	2101      	movs	r1, #1
 80075d8:	fa01 f303 	lsl.w	r3, r1, r3
 80075dc:	6979      	ldr	r1, [r7, #20]
 80075de:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80075e2:	4313      	orrs	r3, r2
 80075e4:	634b      	str	r3, [r1, #52]	; 0x34
 80075e6:	e06d      	b.n	80076c4 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80075e8:	693b      	ldr	r3, [r7, #16]
 80075ea:	015a      	lsls	r2, r3, #5
 80075ec:	697b      	ldr	r3, [r7, #20]
 80075ee:	4413      	add	r3, r2
 80075f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80075f4:	691b      	ldr	r3, [r3, #16]
 80075f6:	693a      	ldr	r2, [r7, #16]
 80075f8:	0151      	lsls	r1, r2, #5
 80075fa:	697a      	ldr	r2, [r7, #20]
 80075fc:	440a      	add	r2, r1
 80075fe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007602:	0cdb      	lsrs	r3, r3, #19
 8007604:	04db      	lsls	r3, r3, #19
 8007606:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007608:	693b      	ldr	r3, [r7, #16]
 800760a:	015a      	lsls	r2, r3, #5
 800760c:	697b      	ldr	r3, [r7, #20]
 800760e:	4413      	add	r3, r2
 8007610:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007614:	691b      	ldr	r3, [r3, #16]
 8007616:	693a      	ldr	r2, [r7, #16]
 8007618:	0151      	lsls	r1, r2, #5
 800761a:	697a      	ldr	r2, [r7, #20]
 800761c:	440a      	add	r2, r1
 800761e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007622:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007626:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800762a:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800762c:	68bb      	ldr	r3, [r7, #8]
 800762e:	695b      	ldr	r3, [r3, #20]
 8007630:	2b00      	cmp	r3, #0
 8007632:	d003      	beq.n	800763c <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8007634:	68bb      	ldr	r3, [r7, #8]
 8007636:	689a      	ldr	r2, [r3, #8]
 8007638:	68bb      	ldr	r3, [r7, #8]
 800763a:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800763c:	693b      	ldr	r3, [r7, #16]
 800763e:	015a      	lsls	r2, r3, #5
 8007640:	697b      	ldr	r3, [r7, #20]
 8007642:	4413      	add	r3, r2
 8007644:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007648:	691b      	ldr	r3, [r3, #16]
 800764a:	693a      	ldr	r2, [r7, #16]
 800764c:	0151      	lsls	r1, r2, #5
 800764e:	697a      	ldr	r2, [r7, #20]
 8007650:	440a      	add	r2, r1
 8007652:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007656:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800765a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800765c:	693b      	ldr	r3, [r7, #16]
 800765e:	015a      	lsls	r2, r3, #5
 8007660:	697b      	ldr	r3, [r7, #20]
 8007662:	4413      	add	r3, r2
 8007664:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007668:	691a      	ldr	r2, [r3, #16]
 800766a:	68bb      	ldr	r3, [r7, #8]
 800766c:	689b      	ldr	r3, [r3, #8]
 800766e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007672:	6939      	ldr	r1, [r7, #16]
 8007674:	0148      	lsls	r0, r1, #5
 8007676:	6979      	ldr	r1, [r7, #20]
 8007678:	4401      	add	r1, r0
 800767a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800767e:	4313      	orrs	r3, r2
 8007680:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8007682:	79fb      	ldrb	r3, [r7, #7]
 8007684:	2b01      	cmp	r3, #1
 8007686:	d10d      	bne.n	80076a4 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8007688:	68bb      	ldr	r3, [r7, #8]
 800768a:	68db      	ldr	r3, [r3, #12]
 800768c:	2b00      	cmp	r3, #0
 800768e:	d009      	beq.n	80076a4 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8007690:	68bb      	ldr	r3, [r7, #8]
 8007692:	68d9      	ldr	r1, [r3, #12]
 8007694:	693b      	ldr	r3, [r7, #16]
 8007696:	015a      	lsls	r2, r3, #5
 8007698:	697b      	ldr	r3, [r7, #20]
 800769a:	4413      	add	r3, r2
 800769c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076a0:	460a      	mov	r2, r1
 80076a2:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80076a4:	693b      	ldr	r3, [r7, #16]
 80076a6:	015a      	lsls	r2, r3, #5
 80076a8:	697b      	ldr	r3, [r7, #20]
 80076aa:	4413      	add	r3, r2
 80076ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	693a      	ldr	r2, [r7, #16]
 80076b4:	0151      	lsls	r1, r2, #5
 80076b6:	697a      	ldr	r2, [r7, #20]
 80076b8:	440a      	add	r2, r1
 80076ba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80076be:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80076c2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80076c4:	2300      	movs	r3, #0
}
 80076c6:	4618      	mov	r0, r3
 80076c8:	371c      	adds	r7, #28
 80076ca:	46bd      	mov	sp, r7
 80076cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076d0:	4770      	bx	lr

080076d2 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80076d2:	b480      	push	{r7}
 80076d4:	b089      	sub	sp, #36	; 0x24
 80076d6:	af00      	add	r7, sp, #0
 80076d8:	60f8      	str	r0, [r7, #12]
 80076da:	60b9      	str	r1, [r7, #8]
 80076dc:	4611      	mov	r1, r2
 80076de:	461a      	mov	r2, r3
 80076e0:	460b      	mov	r3, r1
 80076e2:	71fb      	strb	r3, [r7, #7]
 80076e4:	4613      	mov	r3, r2
 80076e6:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 80076ec:	68bb      	ldr	r3, [r7, #8]
 80076ee:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 80076f0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d11a      	bne.n	800772e <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80076f8:	88bb      	ldrh	r3, [r7, #4]
 80076fa:	3303      	adds	r3, #3
 80076fc:	089b      	lsrs	r3, r3, #2
 80076fe:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8007700:	2300      	movs	r3, #0
 8007702:	61bb      	str	r3, [r7, #24]
 8007704:	e00f      	b.n	8007726 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007706:	79fb      	ldrb	r3, [r7, #7]
 8007708:	031a      	lsls	r2, r3, #12
 800770a:	697b      	ldr	r3, [r7, #20]
 800770c:	4413      	add	r3, r2
 800770e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007712:	461a      	mov	r2, r3
 8007714:	69fb      	ldr	r3, [r7, #28]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	6013      	str	r3, [r2, #0]
      pSrc++;
 800771a:	69fb      	ldr	r3, [r7, #28]
 800771c:	3304      	adds	r3, #4
 800771e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8007720:	69bb      	ldr	r3, [r7, #24]
 8007722:	3301      	adds	r3, #1
 8007724:	61bb      	str	r3, [r7, #24]
 8007726:	69ba      	ldr	r2, [r7, #24]
 8007728:	693b      	ldr	r3, [r7, #16]
 800772a:	429a      	cmp	r2, r3
 800772c:	d3eb      	bcc.n	8007706 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800772e:	2300      	movs	r3, #0
}
 8007730:	4618      	mov	r0, r3
 8007732:	3724      	adds	r7, #36	; 0x24
 8007734:	46bd      	mov	sp, r7
 8007736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800773a:	4770      	bx	lr

0800773c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800773c:	b480      	push	{r7}
 800773e:	b089      	sub	sp, #36	; 0x24
 8007740:	af00      	add	r7, sp, #0
 8007742:	60f8      	str	r0, [r7, #12]
 8007744:	60b9      	str	r1, [r7, #8]
 8007746:	4613      	mov	r3, r2
 8007748:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800774e:	68bb      	ldr	r3, [r7, #8]
 8007750:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8007752:	88fb      	ldrh	r3, [r7, #6]
 8007754:	3303      	adds	r3, #3
 8007756:	089b      	lsrs	r3, r3, #2
 8007758:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800775a:	2300      	movs	r3, #0
 800775c:	61bb      	str	r3, [r7, #24]
 800775e:	e00b      	b.n	8007778 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007760:	697b      	ldr	r3, [r7, #20]
 8007762:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007766:	681a      	ldr	r2, [r3, #0]
 8007768:	69fb      	ldr	r3, [r7, #28]
 800776a:	601a      	str	r2, [r3, #0]
    pDest++;
 800776c:	69fb      	ldr	r3, [r7, #28]
 800776e:	3304      	adds	r3, #4
 8007770:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8007772:	69bb      	ldr	r3, [r7, #24]
 8007774:	3301      	adds	r3, #1
 8007776:	61bb      	str	r3, [r7, #24]
 8007778:	69ba      	ldr	r2, [r7, #24]
 800777a:	693b      	ldr	r3, [r7, #16]
 800777c:	429a      	cmp	r2, r3
 800777e:	d3ef      	bcc.n	8007760 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8007780:	69fb      	ldr	r3, [r7, #28]
}
 8007782:	4618      	mov	r0, r3
 8007784:	3724      	adds	r7, #36	; 0x24
 8007786:	46bd      	mov	sp, r7
 8007788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800778c:	4770      	bx	lr

0800778e <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800778e:	b480      	push	{r7}
 8007790:	b085      	sub	sp, #20
 8007792:	af00      	add	r7, sp, #0
 8007794:	6078      	str	r0, [r7, #4]
 8007796:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800779c:	683b      	ldr	r3, [r7, #0]
 800779e:	781b      	ldrb	r3, [r3, #0]
 80077a0:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80077a2:	683b      	ldr	r3, [r7, #0]
 80077a4:	785b      	ldrb	r3, [r3, #1]
 80077a6:	2b01      	cmp	r3, #1
 80077a8:	d12c      	bne.n	8007804 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80077aa:	68bb      	ldr	r3, [r7, #8]
 80077ac:	015a      	lsls	r2, r3, #5
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	4413      	add	r3, r2
 80077b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	db12      	blt.n	80077e2 <USB_EPSetStall+0x54>
 80077bc:	68bb      	ldr	r3, [r7, #8]
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d00f      	beq.n	80077e2 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80077c2:	68bb      	ldr	r3, [r7, #8]
 80077c4:	015a      	lsls	r2, r3, #5
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	4413      	add	r3, r2
 80077ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	68ba      	ldr	r2, [r7, #8]
 80077d2:	0151      	lsls	r1, r2, #5
 80077d4:	68fa      	ldr	r2, [r7, #12]
 80077d6:	440a      	add	r2, r1
 80077d8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80077dc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80077e0:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80077e2:	68bb      	ldr	r3, [r7, #8]
 80077e4:	015a      	lsls	r2, r3, #5
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	4413      	add	r3, r2
 80077ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	68ba      	ldr	r2, [r7, #8]
 80077f2:	0151      	lsls	r1, r2, #5
 80077f4:	68fa      	ldr	r2, [r7, #12]
 80077f6:	440a      	add	r2, r1
 80077f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80077fc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007800:	6013      	str	r3, [r2, #0]
 8007802:	e02b      	b.n	800785c <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007804:	68bb      	ldr	r3, [r7, #8]
 8007806:	015a      	lsls	r2, r3, #5
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	4413      	add	r3, r2
 800780c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	2b00      	cmp	r3, #0
 8007814:	db12      	blt.n	800783c <USB_EPSetStall+0xae>
 8007816:	68bb      	ldr	r3, [r7, #8]
 8007818:	2b00      	cmp	r3, #0
 800781a:	d00f      	beq.n	800783c <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800781c:	68bb      	ldr	r3, [r7, #8]
 800781e:	015a      	lsls	r2, r3, #5
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	4413      	add	r3, r2
 8007824:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	68ba      	ldr	r2, [r7, #8]
 800782c:	0151      	lsls	r1, r2, #5
 800782e:	68fa      	ldr	r2, [r7, #12]
 8007830:	440a      	add	r2, r1
 8007832:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007836:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800783a:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800783c:	68bb      	ldr	r3, [r7, #8]
 800783e:	015a      	lsls	r2, r3, #5
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	4413      	add	r3, r2
 8007844:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	68ba      	ldr	r2, [r7, #8]
 800784c:	0151      	lsls	r1, r2, #5
 800784e:	68fa      	ldr	r2, [r7, #12]
 8007850:	440a      	add	r2, r1
 8007852:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007856:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800785a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800785c:	2300      	movs	r3, #0
}
 800785e:	4618      	mov	r0, r3
 8007860:	3714      	adds	r7, #20
 8007862:	46bd      	mov	sp, r7
 8007864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007868:	4770      	bx	lr

0800786a <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800786a:	b480      	push	{r7}
 800786c:	b085      	sub	sp, #20
 800786e:	af00      	add	r7, sp, #0
 8007870:	6078      	str	r0, [r7, #4]
 8007872:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007878:	683b      	ldr	r3, [r7, #0]
 800787a:	781b      	ldrb	r3, [r3, #0]
 800787c:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800787e:	683b      	ldr	r3, [r7, #0]
 8007880:	785b      	ldrb	r3, [r3, #1]
 8007882:	2b01      	cmp	r3, #1
 8007884:	d128      	bne.n	80078d8 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8007886:	68bb      	ldr	r3, [r7, #8]
 8007888:	015a      	lsls	r2, r3, #5
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	4413      	add	r3, r2
 800788e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	68ba      	ldr	r2, [r7, #8]
 8007896:	0151      	lsls	r1, r2, #5
 8007898:	68fa      	ldr	r2, [r7, #12]
 800789a:	440a      	add	r2, r1
 800789c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80078a0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80078a4:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80078a6:	683b      	ldr	r3, [r7, #0]
 80078a8:	78db      	ldrb	r3, [r3, #3]
 80078aa:	2b03      	cmp	r3, #3
 80078ac:	d003      	beq.n	80078b6 <USB_EPClearStall+0x4c>
 80078ae:	683b      	ldr	r3, [r7, #0]
 80078b0:	78db      	ldrb	r3, [r3, #3]
 80078b2:	2b02      	cmp	r3, #2
 80078b4:	d138      	bne.n	8007928 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80078b6:	68bb      	ldr	r3, [r7, #8]
 80078b8:	015a      	lsls	r2, r3, #5
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	4413      	add	r3, r2
 80078be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	68ba      	ldr	r2, [r7, #8]
 80078c6:	0151      	lsls	r1, r2, #5
 80078c8:	68fa      	ldr	r2, [r7, #12]
 80078ca:	440a      	add	r2, r1
 80078cc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80078d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80078d4:	6013      	str	r3, [r2, #0]
 80078d6:	e027      	b.n	8007928 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80078d8:	68bb      	ldr	r3, [r7, #8]
 80078da:	015a      	lsls	r2, r3, #5
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	4413      	add	r3, r2
 80078e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	68ba      	ldr	r2, [r7, #8]
 80078e8:	0151      	lsls	r1, r2, #5
 80078ea:	68fa      	ldr	r2, [r7, #12]
 80078ec:	440a      	add	r2, r1
 80078ee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80078f2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80078f6:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80078f8:	683b      	ldr	r3, [r7, #0]
 80078fa:	78db      	ldrb	r3, [r3, #3]
 80078fc:	2b03      	cmp	r3, #3
 80078fe:	d003      	beq.n	8007908 <USB_EPClearStall+0x9e>
 8007900:	683b      	ldr	r3, [r7, #0]
 8007902:	78db      	ldrb	r3, [r3, #3]
 8007904:	2b02      	cmp	r3, #2
 8007906:	d10f      	bne.n	8007928 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007908:	68bb      	ldr	r3, [r7, #8]
 800790a:	015a      	lsls	r2, r3, #5
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	4413      	add	r3, r2
 8007910:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	68ba      	ldr	r2, [r7, #8]
 8007918:	0151      	lsls	r1, r2, #5
 800791a:	68fa      	ldr	r2, [r7, #12]
 800791c:	440a      	add	r2, r1
 800791e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007922:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007926:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8007928:	2300      	movs	r3, #0
}
 800792a:	4618      	mov	r0, r3
 800792c:	3714      	adds	r7, #20
 800792e:	46bd      	mov	sp, r7
 8007930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007934:	4770      	bx	lr

08007936 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8007936:	b480      	push	{r7}
 8007938:	b085      	sub	sp, #20
 800793a:	af00      	add	r7, sp, #0
 800793c:	6078      	str	r0, [r7, #4]
 800793e:	460b      	mov	r3, r1
 8007940:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	68fa      	ldr	r2, [r7, #12]
 8007950:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007954:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8007958:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007960:	681a      	ldr	r2, [r3, #0]
 8007962:	78fb      	ldrb	r3, [r7, #3]
 8007964:	011b      	lsls	r3, r3, #4
 8007966:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800796a:	68f9      	ldr	r1, [r7, #12]
 800796c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007970:	4313      	orrs	r3, r2
 8007972:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8007974:	2300      	movs	r3, #0
}
 8007976:	4618      	mov	r0, r3
 8007978:	3714      	adds	r7, #20
 800797a:	46bd      	mov	sp, r7
 800797c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007980:	4770      	bx	lr

08007982 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007982:	b480      	push	{r7}
 8007984:	b085      	sub	sp, #20
 8007986:	af00      	add	r7, sp, #0
 8007988:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	68fa      	ldr	r2, [r7, #12]
 8007998:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800799c:	f023 0303 	bic.w	r3, r3, #3
 80079a0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80079a8:	685b      	ldr	r3, [r3, #4]
 80079aa:	68fa      	ldr	r2, [r7, #12]
 80079ac:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80079b0:	f023 0302 	bic.w	r3, r3, #2
 80079b4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80079b6:	2300      	movs	r3, #0
}
 80079b8:	4618      	mov	r0, r3
 80079ba:	3714      	adds	r7, #20
 80079bc:	46bd      	mov	sp, r7
 80079be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079c2:	4770      	bx	lr

080079c4 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80079c4:	b480      	push	{r7}
 80079c6:	b085      	sub	sp, #20
 80079c8:	af00      	add	r7, sp, #0
 80079ca:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	68fa      	ldr	r2, [r7, #12]
 80079da:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80079de:	f023 0303 	bic.w	r3, r3, #3
 80079e2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80079ea:	685b      	ldr	r3, [r3, #4]
 80079ec:	68fa      	ldr	r2, [r7, #12]
 80079ee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80079f2:	f043 0302 	orr.w	r3, r3, #2
 80079f6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80079f8:	2300      	movs	r3, #0
}
 80079fa:	4618      	mov	r0, r3
 80079fc:	3714      	adds	r7, #20
 80079fe:	46bd      	mov	sp, r7
 8007a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a04:	4770      	bx	lr

08007a06 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8007a06:	b480      	push	{r7}
 8007a08:	b085      	sub	sp, #20
 8007a0a:	af00      	add	r7, sp, #0
 8007a0c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	695b      	ldr	r3, [r3, #20]
 8007a12:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	699b      	ldr	r3, [r3, #24]
 8007a18:	68fa      	ldr	r2, [r7, #12]
 8007a1a:	4013      	ands	r3, r2
 8007a1c:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007a1e:	68fb      	ldr	r3, [r7, #12]
}
 8007a20:	4618      	mov	r0, r3
 8007a22:	3714      	adds	r7, #20
 8007a24:	46bd      	mov	sp, r7
 8007a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a2a:	4770      	bx	lr

08007a2c <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007a2c:	b480      	push	{r7}
 8007a2e:	b085      	sub	sp, #20
 8007a30:	af00      	add	r7, sp, #0
 8007a32:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a3e:	699b      	ldr	r3, [r3, #24]
 8007a40:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a48:	69db      	ldr	r3, [r3, #28]
 8007a4a:	68ba      	ldr	r2, [r7, #8]
 8007a4c:	4013      	ands	r3, r2
 8007a4e:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8007a50:	68bb      	ldr	r3, [r7, #8]
 8007a52:	0c1b      	lsrs	r3, r3, #16
}
 8007a54:	4618      	mov	r0, r3
 8007a56:	3714      	adds	r7, #20
 8007a58:	46bd      	mov	sp, r7
 8007a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a5e:	4770      	bx	lr

08007a60 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007a60:	b480      	push	{r7}
 8007a62:	b085      	sub	sp, #20
 8007a64:	af00      	add	r7, sp, #0
 8007a66:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a72:	699b      	ldr	r3, [r3, #24]
 8007a74:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a7c:	69db      	ldr	r3, [r3, #28]
 8007a7e:	68ba      	ldr	r2, [r7, #8]
 8007a80:	4013      	ands	r3, r2
 8007a82:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8007a84:	68bb      	ldr	r3, [r7, #8]
 8007a86:	b29b      	uxth	r3, r3
}
 8007a88:	4618      	mov	r0, r3
 8007a8a:	3714      	adds	r7, #20
 8007a8c:	46bd      	mov	sp, r7
 8007a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a92:	4770      	bx	lr

08007a94 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007a94:	b480      	push	{r7}
 8007a96:	b085      	sub	sp, #20
 8007a98:	af00      	add	r7, sp, #0
 8007a9a:	6078      	str	r0, [r7, #4]
 8007a9c:	460b      	mov	r3, r1
 8007a9e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8007aa4:	78fb      	ldrb	r3, [r7, #3]
 8007aa6:	015a      	lsls	r2, r3, #5
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	4413      	add	r3, r2
 8007aac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ab0:	689b      	ldr	r3, [r3, #8]
 8007ab2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007aba:	695b      	ldr	r3, [r3, #20]
 8007abc:	68ba      	ldr	r2, [r7, #8]
 8007abe:	4013      	ands	r3, r2
 8007ac0:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007ac2:	68bb      	ldr	r3, [r7, #8]
}
 8007ac4:	4618      	mov	r0, r3
 8007ac6:	3714      	adds	r7, #20
 8007ac8:	46bd      	mov	sp, r7
 8007aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ace:	4770      	bx	lr

08007ad0 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007ad0:	b480      	push	{r7}
 8007ad2:	b087      	sub	sp, #28
 8007ad4:	af00      	add	r7, sp, #0
 8007ad6:	6078      	str	r0, [r7, #4]
 8007ad8:	460b      	mov	r3, r1
 8007ada:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8007ae0:	697b      	ldr	r3, [r7, #20]
 8007ae2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ae6:	691b      	ldr	r3, [r3, #16]
 8007ae8:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8007aea:	697b      	ldr	r3, [r7, #20]
 8007aec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007af0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007af2:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8007af4:	78fb      	ldrb	r3, [r7, #3]
 8007af6:	f003 030f 	and.w	r3, r3, #15
 8007afa:	68fa      	ldr	r2, [r7, #12]
 8007afc:	fa22 f303 	lsr.w	r3, r2, r3
 8007b00:	01db      	lsls	r3, r3, #7
 8007b02:	b2db      	uxtb	r3, r3
 8007b04:	693a      	ldr	r2, [r7, #16]
 8007b06:	4313      	orrs	r3, r2
 8007b08:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8007b0a:	78fb      	ldrb	r3, [r7, #3]
 8007b0c:	015a      	lsls	r2, r3, #5
 8007b0e:	697b      	ldr	r3, [r7, #20]
 8007b10:	4413      	add	r3, r2
 8007b12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b16:	689b      	ldr	r3, [r3, #8]
 8007b18:	693a      	ldr	r2, [r7, #16]
 8007b1a:	4013      	ands	r3, r2
 8007b1c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007b1e:	68bb      	ldr	r3, [r7, #8]
}
 8007b20:	4618      	mov	r0, r3
 8007b22:	371c      	adds	r7, #28
 8007b24:	46bd      	mov	sp, r7
 8007b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b2a:	4770      	bx	lr

08007b2c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007b2c:	b480      	push	{r7}
 8007b2e:	b083      	sub	sp, #12
 8007b30:	af00      	add	r7, sp, #0
 8007b32:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	695b      	ldr	r3, [r3, #20]
 8007b38:	f003 0301 	and.w	r3, r3, #1
}
 8007b3c:	4618      	mov	r0, r3
 8007b3e:	370c      	adds	r7, #12
 8007b40:	46bd      	mov	sp, r7
 8007b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b46:	4770      	bx	lr

08007b48 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8007b48:	b480      	push	{r7}
 8007b4a:	b085      	sub	sp, #20
 8007b4c:	af00      	add	r7, sp, #0
 8007b4e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	68fa      	ldr	r2, [r7, #12]
 8007b5e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007b62:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8007b66:	f023 0307 	bic.w	r3, r3, #7
 8007b6a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b72:	685b      	ldr	r3, [r3, #4]
 8007b74:	68fa      	ldr	r2, [r7, #12]
 8007b76:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007b7a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007b7e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007b80:	2300      	movs	r3, #0
}
 8007b82:	4618      	mov	r0, r3
 8007b84:	3714      	adds	r7, #20
 8007b86:	46bd      	mov	sp, r7
 8007b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b8c:	4770      	bx	lr
	...

08007b90 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8007b90:	b480      	push	{r7}
 8007b92:	b087      	sub	sp, #28
 8007b94:	af00      	add	r7, sp, #0
 8007b96:	60f8      	str	r0, [r7, #12]
 8007b98:	460b      	mov	r3, r1
 8007b9a:	607a      	str	r2, [r7, #4]
 8007b9c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	333c      	adds	r3, #60	; 0x3c
 8007ba6:	3304      	adds	r3, #4
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8007bac:	693b      	ldr	r3, [r7, #16]
 8007bae:	4a26      	ldr	r2, [pc, #152]	; (8007c48 <USB_EP0_OutStart+0xb8>)
 8007bb0:	4293      	cmp	r3, r2
 8007bb2:	d90a      	bls.n	8007bca <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007bb4:	697b      	ldr	r3, [r7, #20]
 8007bb6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007bc0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007bc4:	d101      	bne.n	8007bca <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8007bc6:	2300      	movs	r3, #0
 8007bc8:	e037      	b.n	8007c3a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8007bca:	697b      	ldr	r3, [r7, #20]
 8007bcc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007bd0:	461a      	mov	r2, r3
 8007bd2:	2300      	movs	r3, #0
 8007bd4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007bd6:	697b      	ldr	r3, [r7, #20]
 8007bd8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007bdc:	691b      	ldr	r3, [r3, #16]
 8007bde:	697a      	ldr	r2, [r7, #20]
 8007be0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007be4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007be8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8007bea:	697b      	ldr	r3, [r7, #20]
 8007bec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007bf0:	691b      	ldr	r3, [r3, #16]
 8007bf2:	697a      	ldr	r2, [r7, #20]
 8007bf4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007bf8:	f043 0318 	orr.w	r3, r3, #24
 8007bfc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8007bfe:	697b      	ldr	r3, [r7, #20]
 8007c00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c04:	691b      	ldr	r3, [r3, #16]
 8007c06:	697a      	ldr	r2, [r7, #20]
 8007c08:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007c0c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8007c10:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8007c12:	7afb      	ldrb	r3, [r7, #11]
 8007c14:	2b01      	cmp	r3, #1
 8007c16:	d10f      	bne.n	8007c38 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8007c18:	697b      	ldr	r3, [r7, #20]
 8007c1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c1e:	461a      	mov	r2, r3
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8007c24:	697b      	ldr	r3, [r7, #20]
 8007c26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	697a      	ldr	r2, [r7, #20]
 8007c2e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007c32:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8007c36:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007c38:	2300      	movs	r3, #0
}
 8007c3a:	4618      	mov	r0, r3
 8007c3c:	371c      	adds	r7, #28
 8007c3e:	46bd      	mov	sp, r7
 8007c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c44:	4770      	bx	lr
 8007c46:	bf00      	nop
 8007c48:	4f54300a 	.word	0x4f54300a

08007c4c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007c4c:	b480      	push	{r7}
 8007c4e:	b085      	sub	sp, #20
 8007c50:	af00      	add	r7, sp, #0
 8007c52:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8007c54:	2300      	movs	r3, #0
 8007c56:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	3301      	adds	r3, #1
 8007c5c:	60fb      	str	r3, [r7, #12]
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	4a13      	ldr	r2, [pc, #76]	; (8007cb0 <USB_CoreReset+0x64>)
 8007c62:	4293      	cmp	r3, r2
 8007c64:	d901      	bls.n	8007c6a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007c66:	2303      	movs	r3, #3
 8007c68:	e01b      	b.n	8007ca2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	691b      	ldr	r3, [r3, #16]
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	daf2      	bge.n	8007c58 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007c72:	2300      	movs	r3, #0
 8007c74:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	691b      	ldr	r3, [r3, #16]
 8007c7a:	f043 0201 	orr.w	r2, r3, #1
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	3301      	adds	r3, #1
 8007c86:	60fb      	str	r3, [r7, #12]
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	4a09      	ldr	r2, [pc, #36]	; (8007cb0 <USB_CoreReset+0x64>)
 8007c8c:	4293      	cmp	r3, r2
 8007c8e:	d901      	bls.n	8007c94 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007c90:	2303      	movs	r3, #3
 8007c92:	e006      	b.n	8007ca2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	691b      	ldr	r3, [r3, #16]
 8007c98:	f003 0301 	and.w	r3, r3, #1
 8007c9c:	2b01      	cmp	r3, #1
 8007c9e:	d0f0      	beq.n	8007c82 <USB_CoreReset+0x36>

  return HAL_OK;
 8007ca0:	2300      	movs	r3, #0
}
 8007ca2:	4618      	mov	r0, r3
 8007ca4:	3714      	adds	r7, #20
 8007ca6:	46bd      	mov	sp, r7
 8007ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cac:	4770      	bx	lr
 8007cae:	bf00      	nop
 8007cb0:	00030d40 	.word	0x00030d40

08007cb4 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007cb4:	b580      	push	{r7, lr}
 8007cb6:	b084      	sub	sp, #16
 8007cb8:	af00      	add	r7, sp, #0
 8007cba:	6078      	str	r0, [r7, #4]
 8007cbc:	460b      	mov	r3, r1
 8007cbe:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8007cc0:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8007cc4:	f002 f9c4 	bl	800a050 <malloc>
 8007cc8:	4603      	mov	r3, r0
 8007cca:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d105      	bne.n	8007cde <USBD_CDC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	2200      	movs	r2, #0
 8007cd6:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8007cda:	2302      	movs	r3, #2
 8007cdc:	e066      	b.n	8007dac <USBD_CDC_Init+0xf8>
  }

  pdev->pClassData = (void *)hcdc;
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	68fa      	ldr	r2, [r7, #12]
 8007ce2:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	7c1b      	ldrb	r3, [r3, #16]
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d119      	bne.n	8007d22 <USBD_CDC_Init+0x6e>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007cee:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007cf2:	2202      	movs	r2, #2
 8007cf4:	2181      	movs	r1, #129	; 0x81
 8007cf6:	6878      	ldr	r0, [r7, #4]
 8007cf8:	f001 ffe3 	bl	8009cc2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	2201      	movs	r2, #1
 8007d00:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007d02:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007d06:	2202      	movs	r2, #2
 8007d08:	2101      	movs	r1, #1
 8007d0a:	6878      	ldr	r0, [r7, #4]
 8007d0c:	f001 ffd9 	bl	8009cc2 <USBD_LL_OpenEP>
                          CDC_DATA_HS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	2201      	movs	r2, #1
 8007d14:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CDC CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	2210      	movs	r2, #16
 8007d1c:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8007d20:	e016      	b.n	8007d50 <USBD_CDC_Init+0x9c>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007d22:	2340      	movs	r3, #64	; 0x40
 8007d24:	2202      	movs	r2, #2
 8007d26:	2181      	movs	r1, #129	; 0x81
 8007d28:	6878      	ldr	r0, [r7, #4]
 8007d2a:	f001 ffca 	bl	8009cc2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	2201      	movs	r2, #1
 8007d32:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007d34:	2340      	movs	r3, #64	; 0x40
 8007d36:	2202      	movs	r2, #2
 8007d38:	2101      	movs	r1, #1
 8007d3a:	6878      	ldr	r0, [r7, #4]
 8007d3c:	f001 ffc1 	bl	8009cc2 <USBD_LL_OpenEP>
                          CDC_DATA_FS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	2201      	movs	r2, #1
 8007d44:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	2210      	movs	r2, #16
 8007d4c:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007d50:	2308      	movs	r3, #8
 8007d52:	2203      	movs	r2, #3
 8007d54:	2182      	movs	r1, #130	; 0x82
 8007d56:	6878      	ldr	r0, [r7, #4]
 8007d58:	f001 ffb3 	bl	8009cc2 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	2201      	movs	r2, #1
 8007d60:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	2200      	movs	r2, #0
 8007d72:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	2200      	movs	r2, #0
 8007d7a:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	7c1b      	ldrb	r3, [r3, #16]
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d109      	bne.n	8007d9a <USBD_CDC_Init+0xe6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007d8c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007d90:	2101      	movs	r1, #1
 8007d92:	6878      	ldr	r0, [r7, #4]
 8007d94:	f002 f884 	bl	8009ea0 <USBD_LL_PrepareReceive>
 8007d98:	e007      	b.n	8007daa <USBD_CDC_Init+0xf6>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007da0:	2340      	movs	r3, #64	; 0x40
 8007da2:	2101      	movs	r1, #1
 8007da4:	6878      	ldr	r0, [r7, #4]
 8007da6:	f002 f87b 	bl	8009ea0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007daa:	2300      	movs	r3, #0
}
 8007dac:	4618      	mov	r0, r3
 8007dae:	3710      	adds	r7, #16
 8007db0:	46bd      	mov	sp, r7
 8007db2:	bd80      	pop	{r7, pc}

08007db4 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007db4:	b580      	push	{r7, lr}
 8007db6:	b084      	sub	sp, #16
 8007db8:	af00      	add	r7, sp, #0
 8007dba:	6078      	str	r0, [r7, #4]
 8007dbc:	460b      	mov	r3, r1
 8007dbe:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  uint8_t ret = 0U;
 8007dc0:	2300      	movs	r3, #0
 8007dc2:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8007dc4:	2181      	movs	r1, #129	; 0x81
 8007dc6:	6878      	ldr	r0, [r7, #4]
 8007dc8:	f001 ffa1 	bl	8009d0e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	2200      	movs	r2, #0
 8007dd0:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8007dd2:	2101      	movs	r1, #1
 8007dd4:	6878      	ldr	r0, [r7, #4]
 8007dd6:	f001 ff9a 	bl	8009d0e <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	2200      	movs	r2, #0
 8007dde:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8007de2:	2182      	movs	r1, #130	; 0x82
 8007de4:	6878      	ldr	r0, [r7, #4]
 8007de6:	f001 ff92 	bl	8009d0e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	2200      	movs	r2, #0
 8007dee:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	2200      	movs	r2, #0
 8007df6:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d00e      	beq.n	8007e22 <USBD_CDC_DeInit+0x6e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007e0a:	685b      	ldr	r3, [r3, #4]
 8007e0c:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007e14:	4618      	mov	r0, r3
 8007e16:	f002 f923 	bl	800a060 <free>
    pdev->pClassData = NULL;
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	2200      	movs	r2, #0
 8007e1e:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return ret;
 8007e22:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e24:	4618      	mov	r0, r3
 8007e26:	3710      	adds	r7, #16
 8007e28:	46bd      	mov	sp, r7
 8007e2a:	bd80      	pop	{r7, pc}

08007e2c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8007e2c:	b580      	push	{r7, lr}
 8007e2e:	b086      	sub	sp, #24
 8007e30:	af00      	add	r7, sp, #0
 8007e32:	6078      	str	r0, [r7, #4]
 8007e34:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007e3c:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8007e3e:	2300      	movs	r3, #0
 8007e40:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8007e42:	2300      	movs	r3, #0
 8007e44:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 8007e46:	2300      	movs	r3, #0
 8007e48:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007e4a:	683b      	ldr	r3, [r7, #0]
 8007e4c:	781b      	ldrb	r3, [r3, #0]
 8007e4e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d03a      	beq.n	8007ecc <USBD_CDC_Setup+0xa0>
 8007e56:	2b20      	cmp	r3, #32
 8007e58:	f040 8097 	bne.w	8007f8a <USBD_CDC_Setup+0x15e>
  {
  case USB_REQ_TYPE_CLASS:
    if (req->wLength != 0U)
 8007e5c:	683b      	ldr	r3, [r7, #0]
 8007e5e:	88db      	ldrh	r3, [r3, #6]
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d029      	beq.n	8007eb8 <USBD_CDC_Setup+0x8c>
    {
      if ((req->bmRequest & 0x80U) != 0U)
 8007e64:	683b      	ldr	r3, [r7, #0]
 8007e66:	781b      	ldrb	r3, [r3, #0]
 8007e68:	b25b      	sxtb	r3, r3
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	da11      	bge.n	8007e92 <USBD_CDC_Setup+0x66>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007e74:	689b      	ldr	r3, [r3, #8]
 8007e76:	683a      	ldr	r2, [r7, #0]
 8007e78:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)hcdc->data,
 8007e7a:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007e7c:	683a      	ldr	r2, [r7, #0]
 8007e7e:	88d2      	ldrh	r2, [r2, #6]
 8007e80:	4798      	blx	r3
                                                          req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 8007e82:	6939      	ldr	r1, [r7, #16]
 8007e84:	683b      	ldr	r3, [r7, #0]
 8007e86:	88db      	ldrh	r3, [r3, #6]
 8007e88:	461a      	mov	r2, r3
 8007e8a:	6878      	ldr	r0, [r7, #4]
 8007e8c:	f001 fac7 	bl	800941e <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)req, 0U);
    }
    break;
 8007e90:	e082      	b.n	8007f98 <USBD_CDC_Setup+0x16c>
        hcdc->CmdOpCode = req->bRequest;
 8007e92:	683b      	ldr	r3, [r7, #0]
 8007e94:	785a      	ldrb	r2, [r3, #1]
 8007e96:	693b      	ldr	r3, [r7, #16]
 8007e98:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 8007e9c:	683b      	ldr	r3, [r7, #0]
 8007e9e:	88db      	ldrh	r3, [r3, #6]
 8007ea0:	b2da      	uxtb	r2, r3
 8007ea2:	693b      	ldr	r3, [r7, #16]
 8007ea4:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8007ea8:	6939      	ldr	r1, [r7, #16]
 8007eaa:	683b      	ldr	r3, [r7, #0]
 8007eac:	88db      	ldrh	r3, [r3, #6]
 8007eae:	461a      	mov	r2, r3
 8007eb0:	6878      	ldr	r0, [r7, #4]
 8007eb2:	f001 fae0 	bl	8009476 <USBD_CtlPrepareRx>
    break;
 8007eb6:	e06f      	b.n	8007f98 <USBD_CDC_Setup+0x16c>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007ebe:	689b      	ldr	r3, [r3, #8]
 8007ec0:	683a      	ldr	r2, [r7, #0]
 8007ec2:	7850      	ldrb	r0, [r2, #1]
 8007ec4:	2200      	movs	r2, #0
 8007ec6:	6839      	ldr	r1, [r7, #0]
 8007ec8:	4798      	blx	r3
    break;
 8007eca:	e065      	b.n	8007f98 <USBD_CDC_Setup+0x16c>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8007ecc:	683b      	ldr	r3, [r7, #0]
 8007ece:	785b      	ldrb	r3, [r3, #1]
 8007ed0:	2b0b      	cmp	r3, #11
 8007ed2:	d84f      	bhi.n	8007f74 <USBD_CDC_Setup+0x148>
 8007ed4:	a201      	add	r2, pc, #4	; (adr r2, 8007edc <USBD_CDC_Setup+0xb0>)
 8007ed6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007eda:	bf00      	nop
 8007edc:	08007f0d 	.word	0x08007f0d
 8007ee0:	08007f83 	.word	0x08007f83
 8007ee4:	08007f75 	.word	0x08007f75
 8007ee8:	08007f75 	.word	0x08007f75
 8007eec:	08007f75 	.word	0x08007f75
 8007ef0:	08007f75 	.word	0x08007f75
 8007ef4:	08007f75 	.word	0x08007f75
 8007ef8:	08007f75 	.word	0x08007f75
 8007efc:	08007f75 	.word	0x08007f75
 8007f00:	08007f75 	.word	0x08007f75
 8007f04:	08007f35 	.word	0x08007f35
 8007f08:	08007f5d 	.word	0x08007f5d
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007f12:	2b03      	cmp	r3, #3
 8007f14:	d107      	bne.n	8007f26 <USBD_CDC_Setup+0xfa>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8007f16:	f107 030c 	add.w	r3, r7, #12
 8007f1a:	2202      	movs	r2, #2
 8007f1c:	4619      	mov	r1, r3
 8007f1e:	6878      	ldr	r0, [r7, #4]
 8007f20:	f001 fa7d 	bl	800941e <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8007f24:	e030      	b.n	8007f88 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 8007f26:	6839      	ldr	r1, [r7, #0]
 8007f28:	6878      	ldr	r0, [r7, #4]
 8007f2a:	f001 fa07 	bl	800933c <USBD_CtlError>
        ret = USBD_FAIL;
 8007f2e:	2303      	movs	r3, #3
 8007f30:	75fb      	strb	r3, [r7, #23]
      break;
 8007f32:	e029      	b.n	8007f88 <USBD_CDC_Setup+0x15c>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007f3a:	2b03      	cmp	r3, #3
 8007f3c:	d107      	bne.n	8007f4e <USBD_CDC_Setup+0x122>
      {
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8007f3e:	f107 030f 	add.w	r3, r7, #15
 8007f42:	2201      	movs	r2, #1
 8007f44:	4619      	mov	r1, r3
 8007f46:	6878      	ldr	r0, [r7, #4]
 8007f48:	f001 fa69 	bl	800941e <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8007f4c:	e01c      	b.n	8007f88 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 8007f4e:	6839      	ldr	r1, [r7, #0]
 8007f50:	6878      	ldr	r0, [r7, #4]
 8007f52:	f001 f9f3 	bl	800933c <USBD_CtlError>
        ret = USBD_FAIL;
 8007f56:	2303      	movs	r3, #3
 8007f58:	75fb      	strb	r3, [r7, #23]
      break;
 8007f5a:	e015      	b.n	8007f88 <USBD_CDC_Setup+0x15c>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007f62:	2b03      	cmp	r3, #3
 8007f64:	d00f      	beq.n	8007f86 <USBD_CDC_Setup+0x15a>
      {
        USBD_CtlError(pdev, req);
 8007f66:	6839      	ldr	r1, [r7, #0]
 8007f68:	6878      	ldr	r0, [r7, #4]
 8007f6a:	f001 f9e7 	bl	800933c <USBD_CtlError>
        ret = USBD_FAIL;
 8007f6e:	2303      	movs	r3, #3
 8007f70:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8007f72:	e008      	b.n	8007f86 <USBD_CDC_Setup+0x15a>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 8007f74:	6839      	ldr	r1, [r7, #0]
 8007f76:	6878      	ldr	r0, [r7, #4]
 8007f78:	f001 f9e0 	bl	800933c <USBD_CtlError>
      ret = USBD_FAIL;
 8007f7c:	2303      	movs	r3, #3
 8007f7e:	75fb      	strb	r3, [r7, #23]
      break;
 8007f80:	e002      	b.n	8007f88 <USBD_CDC_Setup+0x15c>
      break;
 8007f82:	bf00      	nop
 8007f84:	e008      	b.n	8007f98 <USBD_CDC_Setup+0x16c>
      break;
 8007f86:	bf00      	nop
    }
    break;
 8007f88:	e006      	b.n	8007f98 <USBD_CDC_Setup+0x16c>

  default:
    USBD_CtlError(pdev, req);
 8007f8a:	6839      	ldr	r1, [r7, #0]
 8007f8c:	6878      	ldr	r0, [r7, #4]
 8007f8e:	f001 f9d5 	bl	800933c <USBD_CtlError>
    ret = USBD_FAIL;
 8007f92:	2303      	movs	r3, #3
 8007f94:	75fb      	strb	r3, [r7, #23]
    break;
 8007f96:	bf00      	nop
  }

  return (uint8_t)ret;
 8007f98:	7dfb      	ldrb	r3, [r7, #23]
}
 8007f9a:	4618      	mov	r0, r3
 8007f9c:	3718      	adds	r7, #24
 8007f9e:	46bd      	mov	sp, r7
 8007fa0:	bd80      	pop	{r7, pc}
 8007fa2:	bf00      	nop

08007fa4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007fa4:	b580      	push	{r7, lr}
 8007fa6:	b084      	sub	sp, #16
 8007fa8:	af00      	add	r7, sp, #0
 8007faa:	6078      	str	r0, [r7, #4]
 8007fac:	460b      	mov	r3, r1
 8007fae:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007fb6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d101      	bne.n	8007fc6 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007fc2:	2303      	movs	r3, #3
 8007fc4:	e049      	b.n	800805a <USBD_CDC_DataIn+0xb6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007fcc:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8007fce:	78fa      	ldrb	r2, [r7, #3]
 8007fd0:	6879      	ldr	r1, [r7, #4]
 8007fd2:	4613      	mov	r3, r2
 8007fd4:	009b      	lsls	r3, r3, #2
 8007fd6:	4413      	add	r3, r2
 8007fd8:	009b      	lsls	r3, r3, #2
 8007fda:	440b      	add	r3, r1
 8007fdc:	3318      	adds	r3, #24
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d029      	beq.n	8008038 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8007fe4:	78fa      	ldrb	r2, [r7, #3]
 8007fe6:	6879      	ldr	r1, [r7, #4]
 8007fe8:	4613      	mov	r3, r2
 8007fea:	009b      	lsls	r3, r3, #2
 8007fec:	4413      	add	r3, r2
 8007fee:	009b      	lsls	r3, r3, #2
 8007ff0:	440b      	add	r3, r1
 8007ff2:	3318      	adds	r3, #24
 8007ff4:	681a      	ldr	r2, [r3, #0]
 8007ff6:	78f9      	ldrb	r1, [r7, #3]
 8007ff8:	68f8      	ldr	r0, [r7, #12]
 8007ffa:	460b      	mov	r3, r1
 8007ffc:	00db      	lsls	r3, r3, #3
 8007ffe:	1a5b      	subs	r3, r3, r1
 8008000:	009b      	lsls	r3, r3, #2
 8008002:	4403      	add	r3, r0
 8008004:	3344      	adds	r3, #68	; 0x44
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	fbb2 f1f3 	udiv	r1, r2, r3
 800800c:	fb03 f301 	mul.w	r3, r3, r1
 8008010:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8008012:	2b00      	cmp	r3, #0
 8008014:	d110      	bne.n	8008038 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8008016:	78fa      	ldrb	r2, [r7, #3]
 8008018:	6879      	ldr	r1, [r7, #4]
 800801a:	4613      	mov	r3, r2
 800801c:	009b      	lsls	r3, r3, #2
 800801e:	4413      	add	r3, r2
 8008020:	009b      	lsls	r3, r3, #2
 8008022:	440b      	add	r3, r1
 8008024:	3318      	adds	r3, #24
 8008026:	2200      	movs	r2, #0
 8008028:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800802a:	78f9      	ldrb	r1, [r7, #3]
 800802c:	2300      	movs	r3, #0
 800802e:	2200      	movs	r2, #0
 8008030:	6878      	ldr	r0, [r7, #4]
 8008032:	f001 ff14 	bl	8009e5e <USBD_LL_Transmit>
 8008036:	e00f      	b.n	8008058 <USBD_CDC_DataIn+0xb4>
  }
  else
  {
    hcdc->TxState = 0U;
 8008038:	68bb      	ldr	r3, [r7, #8]
 800803a:	2200      	movs	r2, #0
 800803c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008046:	691b      	ldr	r3, [r3, #16]
 8008048:	68ba      	ldr	r2, [r7, #8]
 800804a:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800804e:	68ba      	ldr	r2, [r7, #8]
 8008050:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8008054:	78fa      	ldrb	r2, [r7, #3]
 8008056:	4798      	blx	r3
  }

  return (uint8_t)USBD_OK;
 8008058:	2300      	movs	r3, #0
}
 800805a:	4618      	mov	r0, r3
 800805c:	3710      	adds	r7, #16
 800805e:	46bd      	mov	sp, r7
 8008060:	bd80      	pop	{r7, pc}

08008062 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008062:	b580      	push	{r7, lr}
 8008064:	b084      	sub	sp, #16
 8008066:	af00      	add	r7, sp, #0
 8008068:	6078      	str	r0, [r7, #4]
 800806a:	460b      	mov	r3, r1
 800806c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008074:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800807c:	2b00      	cmp	r3, #0
 800807e:	d101      	bne.n	8008084 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8008080:	2303      	movs	r3, #3
 8008082:	e015      	b.n	80080b0 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8008084:	78fb      	ldrb	r3, [r7, #3]
 8008086:	4619      	mov	r1, r3
 8008088:	6878      	ldr	r0, [r7, #4]
 800808a:	f001 ff2a 	bl	8009ee2 <USBD_LL_GetRxDataSize>
 800808e:	4602      	mov	r2, r0
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800809c:	68db      	ldr	r3, [r3, #12]
 800809e:	68fa      	ldr	r2, [r7, #12]
 80080a0:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80080a4:	68fa      	ldr	r2, [r7, #12]
 80080a6:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80080aa:	4611      	mov	r1, r2
 80080ac:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80080ae:	2300      	movs	r3, #0
}
 80080b0:	4618      	mov	r0, r3
 80080b2:	3710      	adds	r7, #16
 80080b4:	46bd      	mov	sp, r7
 80080b6:	bd80      	pop	{r7, pc}

080080b8 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80080b8:	b580      	push	{r7, lr}
 80080ba:	b084      	sub	sp, #16
 80080bc:	af00      	add	r7, sp, #0
 80080be:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80080c6:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d015      	beq.n	80080fe <USBD_CDC_EP0_RxReady+0x46>
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80080d8:	2bff      	cmp	r3, #255	; 0xff
 80080da:	d010      	beq.n	80080fe <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80080e2:	689b      	ldr	r3, [r3, #8]
 80080e4:	68fa      	ldr	r2, [r7, #12]
 80080e6:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 80080ea:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80080ec:	68fa      	ldr	r2, [r7, #12]
 80080ee:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80080f2:	b292      	uxth	r2, r2
 80080f4:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	22ff      	movs	r2, #255	; 0xff
 80080fa:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }

  return (uint8_t)USBD_OK;
 80080fe:	2300      	movs	r3, #0
}
 8008100:	4618      	mov	r0, r3
 8008102:	3710      	adds	r7, #16
 8008104:	46bd      	mov	sp, r7
 8008106:	bd80      	pop	{r7, pc}

08008108 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8008108:	b480      	push	{r7}
 800810a:	b083      	sub	sp, #12
 800810c:	af00      	add	r7, sp, #0
 800810e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	2243      	movs	r2, #67	; 0x43
 8008114:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8008116:	4b03      	ldr	r3, [pc, #12]	; (8008124 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8008118:	4618      	mov	r0, r3
 800811a:	370c      	adds	r7, #12
 800811c:	46bd      	mov	sp, r7
 800811e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008122:	4770      	bx	lr
 8008124:	200000a4 	.word	0x200000a4

08008128 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8008128:	b480      	push	{r7}
 800812a:	b083      	sub	sp, #12
 800812c:	af00      	add	r7, sp, #0
 800812e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	2243      	movs	r2, #67	; 0x43
 8008134:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8008136:	4b03      	ldr	r3, [pc, #12]	; (8008144 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8008138:	4618      	mov	r0, r3
 800813a:	370c      	adds	r7, #12
 800813c:	46bd      	mov	sp, r7
 800813e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008142:	4770      	bx	lr
 8008144:	20000060 	.word	0x20000060

08008148 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008148:	b480      	push	{r7}
 800814a:	b083      	sub	sp, #12
 800814c:	af00      	add	r7, sp, #0
 800814e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	2243      	movs	r2, #67	; 0x43
 8008154:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8008156:	4b03      	ldr	r3, [pc, #12]	; (8008164 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8008158:	4618      	mov	r0, r3
 800815a:	370c      	adds	r7, #12
 800815c:	46bd      	mov	sp, r7
 800815e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008162:	4770      	bx	lr
 8008164:	200000e8 	.word	0x200000e8

08008168 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8008168:	b480      	push	{r7}
 800816a:	b083      	sub	sp, #12
 800816c:	af00      	add	r7, sp, #0
 800816e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	220a      	movs	r2, #10
 8008174:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8008176:	4b03      	ldr	r3, [pc, #12]	; (8008184 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8008178:	4618      	mov	r0, r3
 800817a:	370c      	adds	r7, #12
 800817c:	46bd      	mov	sp, r7
 800817e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008182:	4770      	bx	lr
 8008184:	2000001c 	.word	0x2000001c

08008188 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8008188:	b480      	push	{r7}
 800818a:	b083      	sub	sp, #12
 800818c:	af00      	add	r7, sp, #0
 800818e:	6078      	str	r0, [r7, #4]
 8008190:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8008192:	683b      	ldr	r3, [r7, #0]
 8008194:	2b00      	cmp	r3, #0
 8008196:	d101      	bne.n	800819c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8008198:	2303      	movs	r3, #3
 800819a:	e004      	b.n	80081a6 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	683a      	ldr	r2, [r7, #0]
 80081a0:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 80081a4:	2300      	movs	r3, #0
}
 80081a6:	4618      	mov	r0, r3
 80081a8:	370c      	adds	r7, #12
 80081aa:	46bd      	mov	sp, r7
 80081ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081b0:	4770      	bx	lr

080081b2 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80081b2:	b480      	push	{r7}
 80081b4:	b087      	sub	sp, #28
 80081b6:	af00      	add	r7, sp, #0
 80081b8:	60f8      	str	r0, [r7, #12]
 80081ba:	60b9      	str	r1, [r7, #8]
 80081bc:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80081c4:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 80081c6:	697b      	ldr	r3, [r7, #20]
 80081c8:	68ba      	ldr	r2, [r7, #8]
 80081ca:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80081ce:	697b      	ldr	r3, [r7, #20]
 80081d0:	687a      	ldr	r2, [r7, #4]
 80081d2:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80081d6:	2300      	movs	r3, #0
}
 80081d8:	4618      	mov	r0, r3
 80081da:	371c      	adds	r7, #28
 80081dc:	46bd      	mov	sp, r7
 80081de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081e2:	4770      	bx	lr

080081e4 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80081e4:	b480      	push	{r7}
 80081e6:	b085      	sub	sp, #20
 80081e8:	af00      	add	r7, sp, #0
 80081ea:	6078      	str	r0, [r7, #4]
 80081ec:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80081f4:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	683a      	ldr	r2, [r7, #0]
 80081fa:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 80081fe:	2300      	movs	r3, #0
}
 8008200:	4618      	mov	r0, r3
 8008202:	3714      	adds	r7, #20
 8008204:	46bd      	mov	sp, r7
 8008206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800820a:	4770      	bx	lr

0800820c <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800820c:	b580      	push	{r7, lr}
 800820e:	b084      	sub	sp, #16
 8008210:	af00      	add	r7, sp, #0
 8008212:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800821a:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800821c:	2301      	movs	r3, #1
 800821e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008226:	2b00      	cmp	r3, #0
 8008228:	d101      	bne.n	800822e <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800822a:	2303      	movs	r3, #3
 800822c:	e01a      	b.n	8008264 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 800822e:	68bb      	ldr	r3, [r7, #8]
 8008230:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008234:	2b00      	cmp	r3, #0
 8008236:	d114      	bne.n	8008262 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8008238:	68bb      	ldr	r3, [r7, #8]
 800823a:	2201      	movs	r2, #1
 800823c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8008240:	68bb      	ldr	r3, [r7, #8]
 8008242:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800824a:	68bb      	ldr	r3, [r7, #8]
 800824c:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8008250:	68bb      	ldr	r3, [r7, #8]
 8008252:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8008256:	2181      	movs	r1, #129	; 0x81
 8008258:	6878      	ldr	r0, [r7, #4]
 800825a:	f001 fe00 	bl	8009e5e <USBD_LL_Transmit>

    ret = USBD_OK;
 800825e:	2300      	movs	r3, #0
 8008260:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8008262:	7bfb      	ldrb	r3, [r7, #15]
}
 8008264:	4618      	mov	r0, r3
 8008266:	3710      	adds	r7, #16
 8008268:	46bd      	mov	sp, r7
 800826a:	bd80      	pop	{r7, pc}

0800826c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800826c:	b580      	push	{r7, lr}
 800826e:	b084      	sub	sp, #16
 8008270:	af00      	add	r7, sp, #0
 8008272:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800827a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008282:	2b00      	cmp	r3, #0
 8008284:	d101      	bne.n	800828a <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8008286:	2303      	movs	r3, #3
 8008288:	e016      	b.n	80082b8 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	7c1b      	ldrb	r3, [r3, #16]
 800828e:	2b00      	cmp	r3, #0
 8008290:	d109      	bne.n	80082a6 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008298:	f44f 7300 	mov.w	r3, #512	; 0x200
 800829c:	2101      	movs	r1, #1
 800829e:	6878      	ldr	r0, [r7, #4]
 80082a0:	f001 fdfe 	bl	8009ea0 <USBD_LL_PrepareReceive>
 80082a4:	e007      	b.n	80082b6 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80082ac:	2340      	movs	r3, #64	; 0x40
 80082ae:	2101      	movs	r1, #1
 80082b0:	6878      	ldr	r0, [r7, #4]
 80082b2:	f001 fdf5 	bl	8009ea0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80082b6:	2300      	movs	r3, #0
}
 80082b8:	4618      	mov	r0, r3
 80082ba:	3710      	adds	r7, #16
 80082bc:	46bd      	mov	sp, r7
 80082be:	bd80      	pop	{r7, pc}

080082c0 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80082c0:	b580      	push	{r7, lr}
 80082c2:	b086      	sub	sp, #24
 80082c4:	af00      	add	r7, sp, #0
 80082c6:	60f8      	str	r0, [r7, #12]
 80082c8:	60b9      	str	r1, [r7, #8]
 80082ca:	4613      	mov	r3, r2
 80082cc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d101      	bne.n	80082d8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80082d4:	2303      	movs	r3, #3
 80082d6:	e025      	b.n	8008324 <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d003      	beq.n	80082ea <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	2200      	movs	r2, #0
 80082e6:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d003      	beq.n	80082fc <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	2200      	movs	r2, #0
 80082f8:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80082fc:	68bb      	ldr	r3, [r7, #8]
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d003      	beq.n	800830a <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	68ba      	ldr	r2, [r7, #8]
 8008306:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	2201      	movs	r2, #1
 800830e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	79fa      	ldrb	r2, [r7, #7]
 8008316:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8008318:	68f8      	ldr	r0, [r7, #12]
 800831a:	f001 fc6b 	bl	8009bf4 <USBD_LL_Init>
 800831e:	4603      	mov	r3, r0
 8008320:	75fb      	strb	r3, [r7, #23]

  return ret;
 8008322:	7dfb      	ldrb	r3, [r7, #23]
}
 8008324:	4618      	mov	r0, r3
 8008326:	3718      	adds	r7, #24
 8008328:	46bd      	mov	sp, r7
 800832a:	bd80      	pop	{r7, pc}

0800832c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800832c:	b580      	push	{r7, lr}
 800832e:	b084      	sub	sp, #16
 8008330:	af00      	add	r7, sp, #0
 8008332:	6078      	str	r0, [r7, #4]
 8008334:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008336:	2300      	movs	r3, #0
 8008338:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800833a:	683b      	ldr	r3, [r7, #0]
 800833c:	2b00      	cmp	r3, #0
 800833e:	d101      	bne.n	8008344 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8008340:	2303      	movs	r3, #3
 8008342:	e010      	b.n	8008366 <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	683a      	ldr	r2, [r7, #0]
 8008348:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008352:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008354:	f107 020e 	add.w	r2, r7, #14
 8008358:	4610      	mov	r0, r2
 800835a:	4798      	blx	r3
 800835c:	4602      	mov	r2, r0
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 8008364:	2300      	movs	r3, #0
}
 8008366:	4618      	mov	r0, r3
 8008368:	3710      	adds	r7, #16
 800836a:	46bd      	mov	sp, r7
 800836c:	bd80      	pop	{r7, pc}

0800836e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800836e:	b580      	push	{r7, lr}
 8008370:	b082      	sub	sp, #8
 8008372:	af00      	add	r7, sp, #0
 8008374:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8008376:	6878      	ldr	r0, [r7, #4]
 8008378:	f001 fc88 	bl	8009c8c <USBD_LL_Start>
 800837c:	4603      	mov	r3, r0
}
 800837e:	4618      	mov	r0, r3
 8008380:	3708      	adds	r7, #8
 8008382:	46bd      	mov	sp, r7
 8008384:	bd80      	pop	{r7, pc}

08008386 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8008386:	b480      	push	{r7}
 8008388:	b083      	sub	sp, #12
 800838a:	af00      	add	r7, sp, #0
 800838c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800838e:	2300      	movs	r3, #0
}
 8008390:	4618      	mov	r0, r3
 8008392:	370c      	adds	r7, #12
 8008394:	46bd      	mov	sp, r7
 8008396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800839a:	4770      	bx	lr

0800839c <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800839c:	b580      	push	{r7, lr}
 800839e:	b084      	sub	sp, #16
 80083a0:	af00      	add	r7, sp, #0
 80083a2:	6078      	str	r0, [r7, #4]
 80083a4:	460b      	mov	r3, r1
 80083a6:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80083a8:	2303      	movs	r3, #3
 80083aa:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d009      	beq.n	80083ca <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	78fa      	ldrb	r2, [r7, #3]
 80083c0:	4611      	mov	r1, r2
 80083c2:	6878      	ldr	r0, [r7, #4]
 80083c4:	4798      	blx	r3
 80083c6:	4603      	mov	r3, r0
 80083c8:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80083ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80083cc:	4618      	mov	r0, r3
 80083ce:	3710      	adds	r7, #16
 80083d0:	46bd      	mov	sp, r7
 80083d2:	bd80      	pop	{r7, pc}

080083d4 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80083d4:	b580      	push	{r7, lr}
 80083d6:	b082      	sub	sp, #8
 80083d8:	af00      	add	r7, sp, #0
 80083da:	6078      	str	r0, [r7, #4]
 80083dc:	460b      	mov	r3, r1
 80083de:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d007      	beq.n	80083fa <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80083f0:	685b      	ldr	r3, [r3, #4]
 80083f2:	78fa      	ldrb	r2, [r7, #3]
 80083f4:	4611      	mov	r1, r2
 80083f6:	6878      	ldr	r0, [r7, #4]
 80083f8:	4798      	blx	r3
  }

  return USBD_OK;
 80083fa:	2300      	movs	r3, #0
}
 80083fc:	4618      	mov	r0, r3
 80083fe:	3708      	adds	r7, #8
 8008400:	46bd      	mov	sp, r7
 8008402:	bd80      	pop	{r7, pc}

08008404 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008404:	b580      	push	{r7, lr}
 8008406:	b084      	sub	sp, #16
 8008408:	af00      	add	r7, sp, #0
 800840a:	6078      	str	r0, [r7, #4]
 800840c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008414:	6839      	ldr	r1, [r7, #0]
 8008416:	4618      	mov	r0, r3
 8008418:	f000 ff56 	bl	80092c8 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	2201      	movs	r2, #1
 8008420:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800842a:	461a      	mov	r2, r3
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008438:	f003 031f 	and.w	r3, r3, #31
 800843c:	2b01      	cmp	r3, #1
 800843e:	d00e      	beq.n	800845e <USBD_LL_SetupStage+0x5a>
 8008440:	2b01      	cmp	r3, #1
 8008442:	d302      	bcc.n	800844a <USBD_LL_SetupStage+0x46>
 8008444:	2b02      	cmp	r3, #2
 8008446:	d014      	beq.n	8008472 <USBD_LL_SetupStage+0x6e>
 8008448:	e01d      	b.n	8008486 <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008450:	4619      	mov	r1, r3
 8008452:	6878      	ldr	r0, [r7, #4]
 8008454:	f000 fa18 	bl	8008888 <USBD_StdDevReq>
 8008458:	4603      	mov	r3, r0
 800845a:	73fb      	strb	r3, [r7, #15]
      break;
 800845c:	e020      	b.n	80084a0 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008464:	4619      	mov	r1, r3
 8008466:	6878      	ldr	r0, [r7, #4]
 8008468:	f000 fa7c 	bl	8008964 <USBD_StdItfReq>
 800846c:	4603      	mov	r3, r0
 800846e:	73fb      	strb	r3, [r7, #15]
      break;
 8008470:	e016      	b.n	80084a0 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008478:	4619      	mov	r1, r3
 800847a:	6878      	ldr	r0, [r7, #4]
 800847c:	f000 fab8 	bl	80089f0 <USBD_StdEPReq>
 8008480:	4603      	mov	r3, r0
 8008482:	73fb      	strb	r3, [r7, #15]
      break;
 8008484:	e00c      	b.n	80084a0 <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800848c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008490:	b2db      	uxtb	r3, r3
 8008492:	4619      	mov	r1, r3
 8008494:	6878      	ldr	r0, [r7, #4]
 8008496:	f001 fc59 	bl	8009d4c <USBD_LL_StallEP>
 800849a:	4603      	mov	r3, r0
 800849c:	73fb      	strb	r3, [r7, #15]
      break;
 800849e:	bf00      	nop
  }

  return ret;
 80084a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80084a2:	4618      	mov	r0, r3
 80084a4:	3710      	adds	r7, #16
 80084a6:	46bd      	mov	sp, r7
 80084a8:	bd80      	pop	{r7, pc}

080084aa <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80084aa:	b580      	push	{r7, lr}
 80084ac:	b086      	sub	sp, #24
 80084ae:	af00      	add	r7, sp, #0
 80084b0:	60f8      	str	r0, [r7, #12]
 80084b2:	460b      	mov	r3, r1
 80084b4:	607a      	str	r2, [r7, #4]
 80084b6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80084b8:	7afb      	ldrb	r3, [r7, #11]
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d137      	bne.n	800852e <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80084c4:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80084cc:	2b03      	cmp	r3, #3
 80084ce:	d14a      	bne.n	8008566 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 80084d0:	693b      	ldr	r3, [r7, #16]
 80084d2:	689a      	ldr	r2, [r3, #8]
 80084d4:	693b      	ldr	r3, [r7, #16]
 80084d6:	68db      	ldr	r3, [r3, #12]
 80084d8:	429a      	cmp	r2, r3
 80084da:	d913      	bls.n	8008504 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80084dc:	693b      	ldr	r3, [r7, #16]
 80084de:	689a      	ldr	r2, [r3, #8]
 80084e0:	693b      	ldr	r3, [r7, #16]
 80084e2:	68db      	ldr	r3, [r3, #12]
 80084e4:	1ad2      	subs	r2, r2, r3
 80084e6:	693b      	ldr	r3, [r7, #16]
 80084e8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80084ea:	693b      	ldr	r3, [r7, #16]
 80084ec:	68da      	ldr	r2, [r3, #12]
 80084ee:	693b      	ldr	r3, [r7, #16]
 80084f0:	689b      	ldr	r3, [r3, #8]
 80084f2:	4293      	cmp	r3, r2
 80084f4:	bf28      	it	cs
 80084f6:	4613      	movcs	r3, r2
 80084f8:	461a      	mov	r2, r3
 80084fa:	6879      	ldr	r1, [r7, #4]
 80084fc:	68f8      	ldr	r0, [r7, #12]
 80084fe:	f000 ffd7 	bl	80094b0 <USBD_CtlContinueRx>
 8008502:	e030      	b.n	8008566 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800850a:	691b      	ldr	r3, [r3, #16]
 800850c:	2b00      	cmp	r3, #0
 800850e:	d00a      	beq.n	8008526 <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8008516:	2b03      	cmp	r3, #3
 8008518:	d105      	bne.n	8008526 <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008520:	691b      	ldr	r3, [r3, #16]
 8008522:	68f8      	ldr	r0, [r7, #12]
 8008524:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 8008526:	68f8      	ldr	r0, [r7, #12]
 8008528:	f000 ffd3 	bl	80094d2 <USBD_CtlSendStatus>
 800852c:	e01b      	b.n	8008566 <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008534:	699b      	ldr	r3, [r3, #24]
 8008536:	2b00      	cmp	r3, #0
 8008538:	d013      	beq.n	8008562 <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8008540:	2b03      	cmp	r3, #3
 8008542:	d10e      	bne.n	8008562 <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800854a:	699b      	ldr	r3, [r3, #24]
 800854c:	7afa      	ldrb	r2, [r7, #11]
 800854e:	4611      	mov	r1, r2
 8008550:	68f8      	ldr	r0, [r7, #12]
 8008552:	4798      	blx	r3
 8008554:	4603      	mov	r3, r0
 8008556:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8008558:	7dfb      	ldrb	r3, [r7, #23]
 800855a:	2b00      	cmp	r3, #0
 800855c:	d003      	beq.n	8008566 <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 800855e:	7dfb      	ldrb	r3, [r7, #23]
 8008560:	e002      	b.n	8008568 <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8008562:	2303      	movs	r3, #3
 8008564:	e000      	b.n	8008568 <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 8008566:	2300      	movs	r3, #0
}
 8008568:	4618      	mov	r0, r3
 800856a:	3718      	adds	r7, #24
 800856c:	46bd      	mov	sp, r7
 800856e:	bd80      	pop	{r7, pc}

08008570 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008570:	b580      	push	{r7, lr}
 8008572:	b086      	sub	sp, #24
 8008574:	af00      	add	r7, sp, #0
 8008576:	60f8      	str	r0, [r7, #12]
 8008578:	460b      	mov	r3, r1
 800857a:	607a      	str	r2, [r7, #4]
 800857c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800857e:	7afb      	ldrb	r3, [r7, #11]
 8008580:	2b00      	cmp	r3, #0
 8008582:	d16a      	bne.n	800865a <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	3314      	adds	r3, #20
 8008588:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008590:	2b02      	cmp	r3, #2
 8008592:	d155      	bne.n	8008640 <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 8008594:	693b      	ldr	r3, [r7, #16]
 8008596:	689a      	ldr	r2, [r3, #8]
 8008598:	693b      	ldr	r3, [r7, #16]
 800859a:	68db      	ldr	r3, [r3, #12]
 800859c:	429a      	cmp	r2, r3
 800859e:	d914      	bls.n	80085ca <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80085a0:	693b      	ldr	r3, [r7, #16]
 80085a2:	689a      	ldr	r2, [r3, #8]
 80085a4:	693b      	ldr	r3, [r7, #16]
 80085a6:	68db      	ldr	r3, [r3, #12]
 80085a8:	1ad2      	subs	r2, r2, r3
 80085aa:	693b      	ldr	r3, [r7, #16]
 80085ac:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80085ae:	693b      	ldr	r3, [r7, #16]
 80085b0:	689b      	ldr	r3, [r3, #8]
 80085b2:	461a      	mov	r2, r3
 80085b4:	6879      	ldr	r1, [r7, #4]
 80085b6:	68f8      	ldr	r0, [r7, #12]
 80085b8:	f000 ff4c 	bl	8009454 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80085bc:	2300      	movs	r3, #0
 80085be:	2200      	movs	r2, #0
 80085c0:	2100      	movs	r1, #0
 80085c2:	68f8      	ldr	r0, [r7, #12]
 80085c4:	f001 fc6c 	bl	8009ea0 <USBD_LL_PrepareReceive>
 80085c8:	e03a      	b.n	8008640 <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80085ca:	693b      	ldr	r3, [r7, #16]
 80085cc:	68da      	ldr	r2, [r3, #12]
 80085ce:	693b      	ldr	r3, [r7, #16]
 80085d0:	689b      	ldr	r3, [r3, #8]
 80085d2:	429a      	cmp	r2, r3
 80085d4:	d11c      	bne.n	8008610 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80085d6:	693b      	ldr	r3, [r7, #16]
 80085d8:	685a      	ldr	r2, [r3, #4]
 80085da:	693b      	ldr	r3, [r7, #16]
 80085dc:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80085de:	429a      	cmp	r2, r3
 80085e0:	d316      	bcc.n	8008610 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80085e2:	693b      	ldr	r3, [r7, #16]
 80085e4:	685a      	ldr	r2, [r3, #4]
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80085ec:	429a      	cmp	r2, r3
 80085ee:	d20f      	bcs.n	8008610 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80085f0:	2200      	movs	r2, #0
 80085f2:	2100      	movs	r1, #0
 80085f4:	68f8      	ldr	r0, [r7, #12]
 80085f6:	f000 ff2d 	bl	8009454 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	2200      	movs	r2, #0
 80085fe:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008602:	2300      	movs	r3, #0
 8008604:	2200      	movs	r2, #0
 8008606:	2100      	movs	r1, #0
 8008608:	68f8      	ldr	r0, [r7, #12]
 800860a:	f001 fc49 	bl	8009ea0 <USBD_LL_PrepareReceive>
 800860e:	e017      	b.n	8008640 <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008616:	68db      	ldr	r3, [r3, #12]
 8008618:	2b00      	cmp	r3, #0
 800861a:	d00a      	beq.n	8008632 <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8008622:	2b03      	cmp	r3, #3
 8008624:	d105      	bne.n	8008632 <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800862c:	68db      	ldr	r3, [r3, #12]
 800862e:	68f8      	ldr	r0, [r7, #12]
 8008630:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8008632:	2180      	movs	r1, #128	; 0x80
 8008634:	68f8      	ldr	r0, [r7, #12]
 8008636:	f001 fb89 	bl	8009d4c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800863a:	68f8      	ldr	r0, [r7, #12]
 800863c:	f000 ff5c 	bl	80094f8 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8008646:	2b01      	cmp	r3, #1
 8008648:	d123      	bne.n	8008692 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800864a:	68f8      	ldr	r0, [r7, #12]
 800864c:	f7ff fe9b 	bl	8008386 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	2200      	movs	r2, #0
 8008654:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8008658:	e01b      	b.n	8008692 <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008660:	695b      	ldr	r3, [r3, #20]
 8008662:	2b00      	cmp	r3, #0
 8008664:	d013      	beq.n	800868e <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800866c:	2b03      	cmp	r3, #3
 800866e:	d10e      	bne.n	800868e <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008676:	695b      	ldr	r3, [r3, #20]
 8008678:	7afa      	ldrb	r2, [r7, #11]
 800867a:	4611      	mov	r1, r2
 800867c:	68f8      	ldr	r0, [r7, #12]
 800867e:	4798      	blx	r3
 8008680:	4603      	mov	r3, r0
 8008682:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8008684:	7dfb      	ldrb	r3, [r7, #23]
 8008686:	2b00      	cmp	r3, #0
 8008688:	d003      	beq.n	8008692 <USBD_LL_DataInStage+0x122>
    {
      return ret;
 800868a:	7dfb      	ldrb	r3, [r7, #23]
 800868c:	e002      	b.n	8008694 <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800868e:	2303      	movs	r3, #3
 8008690:	e000      	b.n	8008694 <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 8008692:	2300      	movs	r3, #0
}
 8008694:	4618      	mov	r0, r3
 8008696:	3718      	adds	r7, #24
 8008698:	46bd      	mov	sp, r7
 800869a:	bd80      	pop	{r7, pc}

0800869c <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800869c:	b580      	push	{r7, lr}
 800869e:	b082      	sub	sp, #8
 80086a0:	af00      	add	r7, sp, #0
 80086a2:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	2201      	movs	r2, #1
 80086a8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	2200      	movs	r2, #0
 80086b0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	2200      	movs	r2, #0
 80086b8:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	2200      	movs	r2, #0
 80086be:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d009      	beq.n	80086e0 <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80086d2:	685b      	ldr	r3, [r3, #4]
 80086d4:	687a      	ldr	r2, [r7, #4]
 80086d6:	6852      	ldr	r2, [r2, #4]
 80086d8:	b2d2      	uxtb	r2, r2
 80086da:	4611      	mov	r1, r2
 80086dc:	6878      	ldr	r0, [r7, #4]
 80086de:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80086e0:	2340      	movs	r3, #64	; 0x40
 80086e2:	2200      	movs	r2, #0
 80086e4:	2100      	movs	r1, #0
 80086e6:	6878      	ldr	r0, [r7, #4]
 80086e8:	f001 faeb 	bl	8009cc2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	2201      	movs	r2, #1
 80086f0:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	2240      	movs	r2, #64	; 0x40
 80086f8:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80086fc:	2340      	movs	r3, #64	; 0x40
 80086fe:	2200      	movs	r2, #0
 8008700:	2180      	movs	r1, #128	; 0x80
 8008702:	6878      	ldr	r0, [r7, #4]
 8008704:	f001 fadd 	bl	8009cc2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	2201      	movs	r2, #1
 800870c:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	2240      	movs	r2, #64	; 0x40
 8008712:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8008714:	2300      	movs	r3, #0
}
 8008716:	4618      	mov	r0, r3
 8008718:	3708      	adds	r7, #8
 800871a:	46bd      	mov	sp, r7
 800871c:	bd80      	pop	{r7, pc}

0800871e <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800871e:	b480      	push	{r7}
 8008720:	b083      	sub	sp, #12
 8008722:	af00      	add	r7, sp, #0
 8008724:	6078      	str	r0, [r7, #4]
 8008726:	460b      	mov	r3, r1
 8008728:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	78fa      	ldrb	r2, [r7, #3]
 800872e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008730:	2300      	movs	r3, #0
}
 8008732:	4618      	mov	r0, r3
 8008734:	370c      	adds	r7, #12
 8008736:	46bd      	mov	sp, r7
 8008738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800873c:	4770      	bx	lr

0800873e <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800873e:	b480      	push	{r7}
 8008740:	b083      	sub	sp, #12
 8008742:	af00      	add	r7, sp, #0
 8008744:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	2204      	movs	r2, #4
 8008756:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800875a:	2300      	movs	r3, #0
}
 800875c:	4618      	mov	r0, r3
 800875e:	370c      	adds	r7, #12
 8008760:	46bd      	mov	sp, r7
 8008762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008766:	4770      	bx	lr

08008768 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008768:	b480      	push	{r7}
 800876a:	b083      	sub	sp, #12
 800876c:	af00      	add	r7, sp, #0
 800876e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008776:	2b04      	cmp	r3, #4
 8008778:	d105      	bne.n	8008786 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8008786:	2300      	movs	r3, #0
}
 8008788:	4618      	mov	r0, r3
 800878a:	370c      	adds	r7, #12
 800878c:	46bd      	mov	sp, r7
 800878e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008792:	4770      	bx	lr

08008794 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008794:	b580      	push	{r7, lr}
 8008796:	b082      	sub	sp, #8
 8008798:	af00      	add	r7, sp, #0
 800879a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80087a2:	2b03      	cmp	r3, #3
 80087a4:	d10b      	bne.n	80087be <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80087ac:	69db      	ldr	r3, [r3, #28]
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d005      	beq.n	80087be <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80087b8:	69db      	ldr	r3, [r3, #28]
 80087ba:	6878      	ldr	r0, [r7, #4]
 80087bc:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80087be:	2300      	movs	r3, #0
}
 80087c0:	4618      	mov	r0, r3
 80087c2:	3708      	adds	r7, #8
 80087c4:	46bd      	mov	sp, r7
 80087c6:	bd80      	pop	{r7, pc}

080087c8 <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80087c8:	b480      	push	{r7}
 80087ca:	b083      	sub	sp, #12
 80087cc:	af00      	add	r7, sp, #0
 80087ce:	6078      	str	r0, [r7, #4]
 80087d0:	460b      	mov	r3, r1
 80087d2:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 80087d4:	2300      	movs	r3, #0
}
 80087d6:	4618      	mov	r0, r3
 80087d8:	370c      	adds	r7, #12
 80087da:	46bd      	mov	sp, r7
 80087dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087e0:	4770      	bx	lr

080087e2 <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80087e2:	b480      	push	{r7}
 80087e4:	b083      	sub	sp, #12
 80087e6:	af00      	add	r7, sp, #0
 80087e8:	6078      	str	r0, [r7, #4]
 80087ea:	460b      	mov	r3, r1
 80087ec:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 80087ee:	2300      	movs	r3, #0
}
 80087f0:	4618      	mov	r0, r3
 80087f2:	370c      	adds	r7, #12
 80087f4:	46bd      	mov	sp, r7
 80087f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087fa:	4770      	bx	lr

080087fc <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80087fc:	b480      	push	{r7}
 80087fe:	b083      	sub	sp, #12
 8008800:	af00      	add	r7, sp, #0
 8008802:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008804:	2300      	movs	r3, #0
}
 8008806:	4618      	mov	r0, r3
 8008808:	370c      	adds	r7, #12
 800880a:	46bd      	mov	sp, r7
 800880c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008810:	4770      	bx	lr

08008812 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8008812:	b580      	push	{r7, lr}
 8008814:	b082      	sub	sp, #8
 8008816:	af00      	add	r7, sp, #0
 8008818:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	2201      	movs	r2, #1
 800881e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008828:	2b00      	cmp	r3, #0
 800882a:	d009      	beq.n	8008840 <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008832:	685b      	ldr	r3, [r3, #4]
 8008834:	687a      	ldr	r2, [r7, #4]
 8008836:	6852      	ldr	r2, [r2, #4]
 8008838:	b2d2      	uxtb	r2, r2
 800883a:	4611      	mov	r1, r2
 800883c:	6878      	ldr	r0, [r7, #4]
 800883e:	4798      	blx	r3
  }

  return USBD_OK;
 8008840:	2300      	movs	r3, #0
}
 8008842:	4618      	mov	r0, r3
 8008844:	3708      	adds	r7, #8
 8008846:	46bd      	mov	sp, r7
 8008848:	bd80      	pop	{r7, pc}

0800884a <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800884a:	b480      	push	{r7}
 800884c:	b087      	sub	sp, #28
 800884e:	af00      	add	r7, sp, #0
 8008850:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8008856:	697b      	ldr	r3, [r7, #20]
 8008858:	781b      	ldrb	r3, [r3, #0]
 800885a:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800885c:	697b      	ldr	r3, [r7, #20]
 800885e:	3301      	adds	r3, #1
 8008860:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8008862:	697b      	ldr	r3, [r7, #20]
 8008864:	781b      	ldrb	r3, [r3, #0]
 8008866:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8008868:	8a3b      	ldrh	r3, [r7, #16]
 800886a:	021b      	lsls	r3, r3, #8
 800886c:	b21a      	sxth	r2, r3
 800886e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008872:	4313      	orrs	r3, r2
 8008874:	b21b      	sxth	r3, r3
 8008876:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8008878:	89fb      	ldrh	r3, [r7, #14]
}
 800887a:	4618      	mov	r0, r3
 800887c:	371c      	adds	r7, #28
 800887e:	46bd      	mov	sp, r7
 8008880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008884:	4770      	bx	lr
	...

08008888 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008888:	b580      	push	{r7, lr}
 800888a:	b084      	sub	sp, #16
 800888c:	af00      	add	r7, sp, #0
 800888e:	6078      	str	r0, [r7, #4]
 8008890:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008892:	2300      	movs	r3, #0
 8008894:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008896:	683b      	ldr	r3, [r7, #0]
 8008898:	781b      	ldrb	r3, [r3, #0]
 800889a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800889e:	2b20      	cmp	r3, #32
 80088a0:	d004      	beq.n	80088ac <USBD_StdDevReq+0x24>
 80088a2:	2b40      	cmp	r3, #64	; 0x40
 80088a4:	d002      	beq.n	80088ac <USBD_StdDevReq+0x24>
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d00a      	beq.n	80088c0 <USBD_StdDevReq+0x38>
 80088aa:	e050      	b.n	800894e <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80088b2:	689b      	ldr	r3, [r3, #8]
 80088b4:	6839      	ldr	r1, [r7, #0]
 80088b6:	6878      	ldr	r0, [r7, #4]
 80088b8:	4798      	blx	r3
 80088ba:	4603      	mov	r3, r0
 80088bc:	73fb      	strb	r3, [r7, #15]
    break;
 80088be:	e04b      	b.n	8008958 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 80088c0:	683b      	ldr	r3, [r7, #0]
 80088c2:	785b      	ldrb	r3, [r3, #1]
 80088c4:	2b09      	cmp	r3, #9
 80088c6:	d83c      	bhi.n	8008942 <USBD_StdDevReq+0xba>
 80088c8:	a201      	add	r2, pc, #4	; (adr r2, 80088d0 <USBD_StdDevReq+0x48>)
 80088ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088ce:	bf00      	nop
 80088d0:	08008925 	.word	0x08008925
 80088d4:	08008939 	.word	0x08008939
 80088d8:	08008943 	.word	0x08008943
 80088dc:	0800892f 	.word	0x0800892f
 80088e0:	08008943 	.word	0x08008943
 80088e4:	08008903 	.word	0x08008903
 80088e8:	080088f9 	.word	0x080088f9
 80088ec:	08008943 	.word	0x08008943
 80088f0:	0800891b 	.word	0x0800891b
 80088f4:	0800890d 	.word	0x0800890d
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 80088f8:	6839      	ldr	r1, [r7, #0]
 80088fa:	6878      	ldr	r0, [r7, #4]
 80088fc:	f000 f9ce 	bl	8008c9c <USBD_GetDescriptor>
      break;
 8008900:	e024      	b.n	800894c <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 8008902:	6839      	ldr	r1, [r7, #0]
 8008904:	6878      	ldr	r0, [r7, #4]
 8008906:	f000 fb5d 	bl	8008fc4 <USBD_SetAddress>
      break;
 800890a:	e01f      	b.n	800894c <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 800890c:	6839      	ldr	r1, [r7, #0]
 800890e:	6878      	ldr	r0, [r7, #4]
 8008910:	f000 fb9a 	bl	8009048 <USBD_SetConfig>
 8008914:	4603      	mov	r3, r0
 8008916:	73fb      	strb	r3, [r7, #15]
      break;
 8008918:	e018      	b.n	800894c <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 800891a:	6839      	ldr	r1, [r7, #0]
 800891c:	6878      	ldr	r0, [r7, #4]
 800891e:	f000 fc37 	bl	8009190 <USBD_GetConfig>
      break;
 8008922:	e013      	b.n	800894c <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 8008924:	6839      	ldr	r1, [r7, #0]
 8008926:	6878      	ldr	r0, [r7, #4]
 8008928:	f000 fc66 	bl	80091f8 <USBD_GetStatus>
      break;
 800892c:	e00e      	b.n	800894c <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 800892e:	6839      	ldr	r1, [r7, #0]
 8008930:	6878      	ldr	r0, [r7, #4]
 8008932:	f000 fc94 	bl	800925e <USBD_SetFeature>
      break;
 8008936:	e009      	b.n	800894c <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 8008938:	6839      	ldr	r1, [r7, #0]
 800893a:	6878      	ldr	r0, [r7, #4]
 800893c:	f000 fca3 	bl	8009286 <USBD_ClrFeature>
      break;
 8008940:	e004      	b.n	800894c <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 8008942:	6839      	ldr	r1, [r7, #0]
 8008944:	6878      	ldr	r0, [r7, #4]
 8008946:	f000 fcf9 	bl	800933c <USBD_CtlError>
      break;
 800894a:	bf00      	nop
    }
    break;
 800894c:	e004      	b.n	8008958 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 800894e:	6839      	ldr	r1, [r7, #0]
 8008950:	6878      	ldr	r0, [r7, #4]
 8008952:	f000 fcf3 	bl	800933c <USBD_CtlError>
    break;
 8008956:	bf00      	nop
  }

  return ret;
 8008958:	7bfb      	ldrb	r3, [r7, #15]
}
 800895a:	4618      	mov	r0, r3
 800895c:	3710      	adds	r7, #16
 800895e:	46bd      	mov	sp, r7
 8008960:	bd80      	pop	{r7, pc}
 8008962:	bf00      	nop

08008964 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008964:	b580      	push	{r7, lr}
 8008966:	b084      	sub	sp, #16
 8008968:	af00      	add	r7, sp, #0
 800896a:	6078      	str	r0, [r7, #4]
 800896c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800896e:	2300      	movs	r3, #0
 8008970:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008972:	683b      	ldr	r3, [r7, #0]
 8008974:	781b      	ldrb	r3, [r3, #0]
 8008976:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800897a:	2b20      	cmp	r3, #32
 800897c:	d003      	beq.n	8008986 <USBD_StdItfReq+0x22>
 800897e:	2b40      	cmp	r3, #64	; 0x40
 8008980:	d001      	beq.n	8008986 <USBD_StdItfReq+0x22>
 8008982:	2b00      	cmp	r3, #0
 8008984:	d12a      	bne.n	80089dc <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800898c:	3b01      	subs	r3, #1
 800898e:	2b02      	cmp	r3, #2
 8008990:	d81d      	bhi.n	80089ce <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008992:	683b      	ldr	r3, [r7, #0]
 8008994:	889b      	ldrh	r3, [r3, #4]
 8008996:	b2db      	uxtb	r3, r3
 8008998:	2b01      	cmp	r3, #1
 800899a:	d813      	bhi.n	80089c4 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80089a2:	689b      	ldr	r3, [r3, #8]
 80089a4:	6839      	ldr	r1, [r7, #0]
 80089a6:	6878      	ldr	r0, [r7, #4]
 80089a8:	4798      	blx	r3
 80089aa:	4603      	mov	r3, r0
 80089ac:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 80089ae:	683b      	ldr	r3, [r7, #0]
 80089b0:	88db      	ldrh	r3, [r3, #6]
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d110      	bne.n	80089d8 <USBD_StdItfReq+0x74>
 80089b6:	7bfb      	ldrb	r3, [r7, #15]
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d10d      	bne.n	80089d8 <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 80089bc:	6878      	ldr	r0, [r7, #4]
 80089be:	f000 fd88 	bl	80094d2 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 80089c2:	e009      	b.n	80089d8 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 80089c4:	6839      	ldr	r1, [r7, #0]
 80089c6:	6878      	ldr	r0, [r7, #4]
 80089c8:	f000 fcb8 	bl	800933c <USBD_CtlError>
      break;
 80089cc:	e004      	b.n	80089d8 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 80089ce:	6839      	ldr	r1, [r7, #0]
 80089d0:	6878      	ldr	r0, [r7, #4]
 80089d2:	f000 fcb3 	bl	800933c <USBD_CtlError>
      break;
 80089d6:	e000      	b.n	80089da <USBD_StdItfReq+0x76>
      break;
 80089d8:	bf00      	nop
    }
    break;
 80089da:	e004      	b.n	80089e6 <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 80089dc:	6839      	ldr	r1, [r7, #0]
 80089de:	6878      	ldr	r0, [r7, #4]
 80089e0:	f000 fcac 	bl	800933c <USBD_CtlError>
    break;
 80089e4:	bf00      	nop
  }

  return ret;
 80089e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80089e8:	4618      	mov	r0, r3
 80089ea:	3710      	adds	r7, #16
 80089ec:	46bd      	mov	sp, r7
 80089ee:	bd80      	pop	{r7, pc}

080089f0 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80089f0:	b580      	push	{r7, lr}
 80089f2:	b084      	sub	sp, #16
 80089f4:	af00      	add	r7, sp, #0
 80089f6:	6078      	str	r0, [r7, #4]
 80089f8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80089fa:	2300      	movs	r3, #0
 80089fc:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 80089fe:	683b      	ldr	r3, [r7, #0]
 8008a00:	889b      	ldrh	r3, [r3, #4]
 8008a02:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008a04:	683b      	ldr	r3, [r7, #0]
 8008a06:	781b      	ldrb	r3, [r3, #0]
 8008a08:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008a0c:	2b20      	cmp	r3, #32
 8008a0e:	d004      	beq.n	8008a1a <USBD_StdEPReq+0x2a>
 8008a10:	2b40      	cmp	r3, #64	; 0x40
 8008a12:	d002      	beq.n	8008a1a <USBD_StdEPReq+0x2a>
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d00a      	beq.n	8008a2e <USBD_StdEPReq+0x3e>
 8008a18:	e135      	b.n	8008c86 <USBD_StdEPReq+0x296>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a20:	689b      	ldr	r3, [r3, #8]
 8008a22:	6839      	ldr	r1, [r7, #0]
 8008a24:	6878      	ldr	r0, [r7, #4]
 8008a26:	4798      	blx	r3
 8008a28:	4603      	mov	r3, r0
 8008a2a:	73fb      	strb	r3, [r7, #15]
    break;
 8008a2c:	e130      	b.n	8008c90 <USBD_StdEPReq+0x2a0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8008a2e:	683b      	ldr	r3, [r7, #0]
 8008a30:	785b      	ldrb	r3, [r3, #1]
 8008a32:	2b01      	cmp	r3, #1
 8008a34:	d03e      	beq.n	8008ab4 <USBD_StdEPReq+0xc4>
 8008a36:	2b03      	cmp	r3, #3
 8008a38:	d002      	beq.n	8008a40 <USBD_StdEPReq+0x50>
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d077      	beq.n	8008b2e <USBD_StdEPReq+0x13e>
 8008a3e:	e11c      	b.n	8008c7a <USBD_StdEPReq+0x28a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008a46:	2b02      	cmp	r3, #2
 8008a48:	d002      	beq.n	8008a50 <USBD_StdEPReq+0x60>
 8008a4a:	2b03      	cmp	r3, #3
 8008a4c:	d015      	beq.n	8008a7a <USBD_StdEPReq+0x8a>
 8008a4e:	e02b      	b.n	8008aa8 <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008a50:	7bbb      	ldrb	r3, [r7, #14]
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d00c      	beq.n	8008a70 <USBD_StdEPReq+0x80>
 8008a56:	7bbb      	ldrb	r3, [r7, #14]
 8008a58:	2b80      	cmp	r3, #128	; 0x80
 8008a5a:	d009      	beq.n	8008a70 <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8008a5c:	7bbb      	ldrb	r3, [r7, #14]
 8008a5e:	4619      	mov	r1, r3
 8008a60:	6878      	ldr	r0, [r7, #4]
 8008a62:	f001 f973 	bl	8009d4c <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8008a66:	2180      	movs	r1, #128	; 0x80
 8008a68:	6878      	ldr	r0, [r7, #4]
 8008a6a:	f001 f96f 	bl	8009d4c <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8008a6e:	e020      	b.n	8008ab2 <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 8008a70:	6839      	ldr	r1, [r7, #0]
 8008a72:	6878      	ldr	r0, [r7, #4]
 8008a74:	f000 fc62 	bl	800933c <USBD_CtlError>
        break;
 8008a78:	e01b      	b.n	8008ab2 <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8008a7a:	683b      	ldr	r3, [r7, #0]
 8008a7c:	885b      	ldrh	r3, [r3, #2]
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d10e      	bne.n	8008aa0 <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008a82:	7bbb      	ldrb	r3, [r7, #14]
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	d00b      	beq.n	8008aa0 <USBD_StdEPReq+0xb0>
 8008a88:	7bbb      	ldrb	r3, [r7, #14]
 8008a8a:	2b80      	cmp	r3, #128	; 0x80
 8008a8c:	d008      	beq.n	8008aa0 <USBD_StdEPReq+0xb0>
 8008a8e:	683b      	ldr	r3, [r7, #0]
 8008a90:	88db      	ldrh	r3, [r3, #6]
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d104      	bne.n	8008aa0 <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 8008a96:	7bbb      	ldrb	r3, [r7, #14]
 8008a98:	4619      	mov	r1, r3
 8008a9a:	6878      	ldr	r0, [r7, #4]
 8008a9c:	f001 f956 	bl	8009d4c <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 8008aa0:	6878      	ldr	r0, [r7, #4]
 8008aa2:	f000 fd16 	bl	80094d2 <USBD_CtlSendStatus>

        break;
 8008aa6:	e004      	b.n	8008ab2 <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 8008aa8:	6839      	ldr	r1, [r7, #0]
 8008aaa:	6878      	ldr	r0, [r7, #4]
 8008aac:	f000 fc46 	bl	800933c <USBD_CtlError>
        break;
 8008ab0:	bf00      	nop
      }
      break;
 8008ab2:	e0e7      	b.n	8008c84 <USBD_StdEPReq+0x294>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008aba:	2b02      	cmp	r3, #2
 8008abc:	d002      	beq.n	8008ac4 <USBD_StdEPReq+0xd4>
 8008abe:	2b03      	cmp	r3, #3
 8008ac0:	d015      	beq.n	8008aee <USBD_StdEPReq+0xfe>
 8008ac2:	e02d      	b.n	8008b20 <USBD_StdEPReq+0x130>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008ac4:	7bbb      	ldrb	r3, [r7, #14]
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d00c      	beq.n	8008ae4 <USBD_StdEPReq+0xf4>
 8008aca:	7bbb      	ldrb	r3, [r7, #14]
 8008acc:	2b80      	cmp	r3, #128	; 0x80
 8008ace:	d009      	beq.n	8008ae4 <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8008ad0:	7bbb      	ldrb	r3, [r7, #14]
 8008ad2:	4619      	mov	r1, r3
 8008ad4:	6878      	ldr	r0, [r7, #4]
 8008ad6:	f001 f939 	bl	8009d4c <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8008ada:	2180      	movs	r1, #128	; 0x80
 8008adc:	6878      	ldr	r0, [r7, #4]
 8008ade:	f001 f935 	bl	8009d4c <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8008ae2:	e023      	b.n	8008b2c <USBD_StdEPReq+0x13c>
          USBD_CtlError(pdev, req);
 8008ae4:	6839      	ldr	r1, [r7, #0]
 8008ae6:	6878      	ldr	r0, [r7, #4]
 8008ae8:	f000 fc28 	bl	800933c <USBD_CtlError>
        break;
 8008aec:	e01e      	b.n	8008b2c <USBD_StdEPReq+0x13c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8008aee:	683b      	ldr	r3, [r7, #0]
 8008af0:	885b      	ldrh	r3, [r3, #2]
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d119      	bne.n	8008b2a <USBD_StdEPReq+0x13a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 8008af6:	7bbb      	ldrb	r3, [r7, #14]
 8008af8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	d004      	beq.n	8008b0a <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8008b00:	7bbb      	ldrb	r3, [r7, #14]
 8008b02:	4619      	mov	r1, r3
 8008b04:	6878      	ldr	r0, [r7, #4]
 8008b06:	f001 f940 	bl	8009d8a <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 8008b0a:	6878      	ldr	r0, [r7, #4]
 8008b0c:	f000 fce1 	bl	80094d2 <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008b16:	689b      	ldr	r3, [r3, #8]
 8008b18:	6839      	ldr	r1, [r7, #0]
 8008b1a:	6878      	ldr	r0, [r7, #4]
 8008b1c:	4798      	blx	r3
        }
        break;
 8008b1e:	e004      	b.n	8008b2a <USBD_StdEPReq+0x13a>

      default:
        USBD_CtlError(pdev, req);
 8008b20:	6839      	ldr	r1, [r7, #0]
 8008b22:	6878      	ldr	r0, [r7, #4]
 8008b24:	f000 fc0a 	bl	800933c <USBD_CtlError>
        break;
 8008b28:	e000      	b.n	8008b2c <USBD_StdEPReq+0x13c>
        break;
 8008b2a:	bf00      	nop
      }
      break;
 8008b2c:	e0aa      	b.n	8008c84 <USBD_StdEPReq+0x294>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008b34:	2b02      	cmp	r3, #2
 8008b36:	d002      	beq.n	8008b3e <USBD_StdEPReq+0x14e>
 8008b38:	2b03      	cmp	r3, #3
 8008b3a:	d032      	beq.n	8008ba2 <USBD_StdEPReq+0x1b2>
 8008b3c:	e097      	b.n	8008c6e <USBD_StdEPReq+0x27e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008b3e:	7bbb      	ldrb	r3, [r7, #14]
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d007      	beq.n	8008b54 <USBD_StdEPReq+0x164>
 8008b44:	7bbb      	ldrb	r3, [r7, #14]
 8008b46:	2b80      	cmp	r3, #128	; 0x80
 8008b48:	d004      	beq.n	8008b54 <USBD_StdEPReq+0x164>
        {
          USBD_CtlError(pdev, req);
 8008b4a:	6839      	ldr	r1, [r7, #0]
 8008b4c:	6878      	ldr	r0, [r7, #4]
 8008b4e:	f000 fbf5 	bl	800933c <USBD_CtlError>
          break;
 8008b52:	e091      	b.n	8008c78 <USBD_StdEPReq+0x288>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008b54:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	da0b      	bge.n	8008b74 <USBD_StdEPReq+0x184>
 8008b5c:	7bbb      	ldrb	r3, [r7, #14]
 8008b5e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008b62:	4613      	mov	r3, r2
 8008b64:	009b      	lsls	r3, r3, #2
 8008b66:	4413      	add	r3, r2
 8008b68:	009b      	lsls	r3, r3, #2
 8008b6a:	3310      	adds	r3, #16
 8008b6c:	687a      	ldr	r2, [r7, #4]
 8008b6e:	4413      	add	r3, r2
 8008b70:	3304      	adds	r3, #4
 8008b72:	e00b      	b.n	8008b8c <USBD_StdEPReq+0x19c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8008b74:	7bbb      	ldrb	r3, [r7, #14]
 8008b76:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008b7a:	4613      	mov	r3, r2
 8008b7c:	009b      	lsls	r3, r3, #2
 8008b7e:	4413      	add	r3, r2
 8008b80:	009b      	lsls	r3, r3, #2
 8008b82:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008b86:	687a      	ldr	r2, [r7, #4]
 8008b88:	4413      	add	r3, r2
 8008b8a:	3304      	adds	r3, #4
 8008b8c:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 8008b8e:	68bb      	ldr	r3, [r7, #8]
 8008b90:	2200      	movs	r2, #0
 8008b92:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008b94:	68bb      	ldr	r3, [r7, #8]
 8008b96:	2202      	movs	r2, #2
 8008b98:	4619      	mov	r1, r3
 8008b9a:	6878      	ldr	r0, [r7, #4]
 8008b9c:	f000 fc3f 	bl	800941e <USBD_CtlSendData>
        break;
 8008ba0:	e06a      	b.n	8008c78 <USBD_StdEPReq+0x288>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 8008ba2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	da11      	bge.n	8008bce <USBD_StdEPReq+0x1de>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008baa:	7bbb      	ldrb	r3, [r7, #14]
 8008bac:	f003 020f 	and.w	r2, r3, #15
 8008bb0:	6879      	ldr	r1, [r7, #4]
 8008bb2:	4613      	mov	r3, r2
 8008bb4:	009b      	lsls	r3, r3, #2
 8008bb6:	4413      	add	r3, r2
 8008bb8:	009b      	lsls	r3, r3, #2
 8008bba:	440b      	add	r3, r1
 8008bbc:	3324      	adds	r3, #36	; 0x24
 8008bbe:	881b      	ldrh	r3, [r3, #0]
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d117      	bne.n	8008bf4 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 8008bc4:	6839      	ldr	r1, [r7, #0]
 8008bc6:	6878      	ldr	r0, [r7, #4]
 8008bc8:	f000 fbb8 	bl	800933c <USBD_CtlError>
            break;
 8008bcc:	e054      	b.n	8008c78 <USBD_StdEPReq+0x288>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008bce:	7bbb      	ldrb	r3, [r7, #14]
 8008bd0:	f003 020f 	and.w	r2, r3, #15
 8008bd4:	6879      	ldr	r1, [r7, #4]
 8008bd6:	4613      	mov	r3, r2
 8008bd8:	009b      	lsls	r3, r3, #2
 8008bda:	4413      	add	r3, r2
 8008bdc:	009b      	lsls	r3, r3, #2
 8008bde:	440b      	add	r3, r1
 8008be0:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008be4:	881b      	ldrh	r3, [r3, #0]
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d104      	bne.n	8008bf4 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 8008bea:	6839      	ldr	r1, [r7, #0]
 8008bec:	6878      	ldr	r0, [r7, #4]
 8008bee:	f000 fba5 	bl	800933c <USBD_CtlError>
            break;
 8008bf2:	e041      	b.n	8008c78 <USBD_StdEPReq+0x288>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008bf4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	da0b      	bge.n	8008c14 <USBD_StdEPReq+0x224>
 8008bfc:	7bbb      	ldrb	r3, [r7, #14]
 8008bfe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008c02:	4613      	mov	r3, r2
 8008c04:	009b      	lsls	r3, r3, #2
 8008c06:	4413      	add	r3, r2
 8008c08:	009b      	lsls	r3, r3, #2
 8008c0a:	3310      	adds	r3, #16
 8008c0c:	687a      	ldr	r2, [r7, #4]
 8008c0e:	4413      	add	r3, r2
 8008c10:	3304      	adds	r3, #4
 8008c12:	e00b      	b.n	8008c2c <USBD_StdEPReq+0x23c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8008c14:	7bbb      	ldrb	r3, [r7, #14]
 8008c16:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008c1a:	4613      	mov	r3, r2
 8008c1c:	009b      	lsls	r3, r3, #2
 8008c1e:	4413      	add	r3, r2
 8008c20:	009b      	lsls	r3, r3, #2
 8008c22:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008c26:	687a      	ldr	r2, [r7, #4]
 8008c28:	4413      	add	r3, r2
 8008c2a:	3304      	adds	r3, #4
 8008c2c:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008c2e:	7bbb      	ldrb	r3, [r7, #14]
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d002      	beq.n	8008c3a <USBD_StdEPReq+0x24a>
 8008c34:	7bbb      	ldrb	r3, [r7, #14]
 8008c36:	2b80      	cmp	r3, #128	; 0x80
 8008c38:	d103      	bne.n	8008c42 <USBD_StdEPReq+0x252>
          {
            pep->status = 0x0000U;
 8008c3a:	68bb      	ldr	r3, [r7, #8]
 8008c3c:	2200      	movs	r2, #0
 8008c3e:	601a      	str	r2, [r3, #0]
 8008c40:	e00e      	b.n	8008c60 <USBD_StdEPReq+0x270>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8008c42:	7bbb      	ldrb	r3, [r7, #14]
 8008c44:	4619      	mov	r1, r3
 8008c46:	6878      	ldr	r0, [r7, #4]
 8008c48:	f001 f8be 	bl	8009dc8 <USBD_LL_IsStallEP>
 8008c4c:	4603      	mov	r3, r0
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d003      	beq.n	8008c5a <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0001U;
 8008c52:	68bb      	ldr	r3, [r7, #8]
 8008c54:	2201      	movs	r2, #1
 8008c56:	601a      	str	r2, [r3, #0]
 8008c58:	e002      	b.n	8008c60 <USBD_StdEPReq+0x270>
          }
          else
          {
            pep->status = 0x0000U;
 8008c5a:	68bb      	ldr	r3, [r7, #8]
 8008c5c:	2200      	movs	r2, #0
 8008c5e:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008c60:	68bb      	ldr	r3, [r7, #8]
 8008c62:	2202      	movs	r2, #2
 8008c64:	4619      	mov	r1, r3
 8008c66:	6878      	ldr	r0, [r7, #4]
 8008c68:	f000 fbd9 	bl	800941e <USBD_CtlSendData>
          break;
 8008c6c:	e004      	b.n	8008c78 <USBD_StdEPReq+0x288>

      default:
        USBD_CtlError(pdev, req);
 8008c6e:	6839      	ldr	r1, [r7, #0]
 8008c70:	6878      	ldr	r0, [r7, #4]
 8008c72:	f000 fb63 	bl	800933c <USBD_CtlError>
        break;
 8008c76:	bf00      	nop
      }
      break;
 8008c78:	e004      	b.n	8008c84 <USBD_StdEPReq+0x294>

    default:
      USBD_CtlError(pdev, req);
 8008c7a:	6839      	ldr	r1, [r7, #0]
 8008c7c:	6878      	ldr	r0, [r7, #4]
 8008c7e:	f000 fb5d 	bl	800933c <USBD_CtlError>
      break;
 8008c82:	bf00      	nop
    }
    break;
 8008c84:	e004      	b.n	8008c90 <USBD_StdEPReq+0x2a0>

  default:
    USBD_CtlError(pdev, req);
 8008c86:	6839      	ldr	r1, [r7, #0]
 8008c88:	6878      	ldr	r0, [r7, #4]
 8008c8a:	f000 fb57 	bl	800933c <USBD_CtlError>
    break;
 8008c8e:	bf00      	nop
  }

  return ret;
 8008c90:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c92:	4618      	mov	r0, r3
 8008c94:	3710      	adds	r7, #16
 8008c96:	46bd      	mov	sp, r7
 8008c98:	bd80      	pop	{r7, pc}
	...

08008c9c <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008c9c:	b580      	push	{r7, lr}
 8008c9e:	b084      	sub	sp, #16
 8008ca0:	af00      	add	r7, sp, #0
 8008ca2:	6078      	str	r0, [r7, #4]
 8008ca4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008ca6:	2300      	movs	r3, #0
 8008ca8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008caa:	2300      	movs	r3, #0
 8008cac:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008cae:	2300      	movs	r3, #0
 8008cb0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008cb2:	683b      	ldr	r3, [r7, #0]
 8008cb4:	885b      	ldrh	r3, [r3, #2]
 8008cb6:	0a1b      	lsrs	r3, r3, #8
 8008cb8:	b29b      	uxth	r3, r3
 8008cba:	3b01      	subs	r3, #1
 8008cbc:	2b0e      	cmp	r3, #14
 8008cbe:	f200 8152 	bhi.w	8008f66 <USBD_GetDescriptor+0x2ca>
 8008cc2:	a201      	add	r2, pc, #4	; (adr r2, 8008cc8 <USBD_GetDescriptor+0x2c>)
 8008cc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008cc8:	08008d39 	.word	0x08008d39
 8008ccc:	08008d51 	.word	0x08008d51
 8008cd0:	08008d91 	.word	0x08008d91
 8008cd4:	08008f67 	.word	0x08008f67
 8008cd8:	08008f67 	.word	0x08008f67
 8008cdc:	08008f07 	.word	0x08008f07
 8008ce0:	08008f33 	.word	0x08008f33
 8008ce4:	08008f67 	.word	0x08008f67
 8008ce8:	08008f67 	.word	0x08008f67
 8008cec:	08008f67 	.word	0x08008f67
 8008cf0:	08008f67 	.word	0x08008f67
 8008cf4:	08008f67 	.word	0x08008f67
 8008cf8:	08008f67 	.word	0x08008f67
 8008cfc:	08008f67 	.word	0x08008f67
 8008d00:	08008d05 	.word	0x08008d05
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
  case USB_DESC_TYPE_BOS:
    if (pdev->pDesc->GetBOSDescriptor != NULL)
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008d0a:	69db      	ldr	r3, [r3, #28]
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d00b      	beq.n	8008d28 <USBD_GetDescriptor+0x8c>
    {
      pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008d16:	69db      	ldr	r3, [r3, #28]
 8008d18:	687a      	ldr	r2, [r7, #4]
 8008d1a:	7c12      	ldrb	r2, [r2, #16]
 8008d1c:	f107 0108 	add.w	r1, r7, #8
 8008d20:	4610      	mov	r0, r2
 8008d22:	4798      	blx	r3
 8008d24:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8008d26:	e126      	b.n	8008f76 <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 8008d28:	6839      	ldr	r1, [r7, #0]
 8008d2a:	6878      	ldr	r0, [r7, #4]
 8008d2c:	f000 fb06 	bl	800933c <USBD_CtlError>
      err++;
 8008d30:	7afb      	ldrb	r3, [r7, #11]
 8008d32:	3301      	adds	r3, #1
 8008d34:	72fb      	strb	r3, [r7, #11]
    break;
 8008d36:	e11e      	b.n	8008f76 <USBD_GetDescriptor+0x2da>
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	687a      	ldr	r2, [r7, #4]
 8008d42:	7c12      	ldrb	r2, [r2, #16]
 8008d44:	f107 0108 	add.w	r1, r7, #8
 8008d48:	4610      	mov	r0, r2
 8008d4a:	4798      	blx	r3
 8008d4c:	60f8      	str	r0, [r7, #12]
    break;
 8008d4e:	e112      	b.n	8008f76 <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	7c1b      	ldrb	r3, [r3, #16]
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	d10d      	bne.n	8008d74 <USBD_GetDescriptor+0xd8>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008d5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d60:	f107 0208 	add.w	r2, r7, #8
 8008d64:	4610      	mov	r0, r2
 8008d66:	4798      	blx	r3
 8008d68:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008d6a:	68fb      	ldr	r3, [r7, #12]
 8008d6c:	3301      	adds	r3, #1
 8008d6e:	2202      	movs	r2, #2
 8008d70:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 8008d72:	e100      	b.n	8008f76 <USBD_GetDescriptor+0x2da>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008d7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d7c:	f107 0208 	add.w	r2, r7, #8
 8008d80:	4610      	mov	r0, r2
 8008d82:	4798      	blx	r3
 8008d84:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	3301      	adds	r3, #1
 8008d8a:	2202      	movs	r2, #2
 8008d8c:	701a      	strb	r2, [r3, #0]
    break;
 8008d8e:	e0f2      	b.n	8008f76 <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8008d90:	683b      	ldr	r3, [r7, #0]
 8008d92:	885b      	ldrh	r3, [r3, #2]
 8008d94:	b2db      	uxtb	r3, r3
 8008d96:	2b05      	cmp	r3, #5
 8008d98:	f200 80ac 	bhi.w	8008ef4 <USBD_GetDescriptor+0x258>
 8008d9c:	a201      	add	r2, pc, #4	; (adr r2, 8008da4 <USBD_GetDescriptor+0x108>)
 8008d9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008da2:	bf00      	nop
 8008da4:	08008dbd 	.word	0x08008dbd
 8008da8:	08008df1 	.word	0x08008df1
 8008dac:	08008e25 	.word	0x08008e25
 8008db0:	08008e59 	.word	0x08008e59
 8008db4:	08008e8d 	.word	0x08008e8d
 8008db8:	08008ec1 	.word	0x08008ec1
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008dc2:	685b      	ldr	r3, [r3, #4]
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	d00b      	beq.n	8008de0 <USBD_GetDescriptor+0x144>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008dce:	685b      	ldr	r3, [r3, #4]
 8008dd0:	687a      	ldr	r2, [r7, #4]
 8008dd2:	7c12      	ldrb	r2, [r2, #16]
 8008dd4:	f107 0108 	add.w	r1, r7, #8
 8008dd8:	4610      	mov	r0, r2
 8008dda:	4798      	blx	r3
 8008ddc:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008dde:	e091      	b.n	8008f04 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8008de0:	6839      	ldr	r1, [r7, #0]
 8008de2:	6878      	ldr	r0, [r7, #4]
 8008de4:	f000 faaa 	bl	800933c <USBD_CtlError>
        err++;
 8008de8:	7afb      	ldrb	r3, [r7, #11]
 8008dea:	3301      	adds	r3, #1
 8008dec:	72fb      	strb	r3, [r7, #11]
      break;
 8008dee:	e089      	b.n	8008f04 <USBD_GetDescriptor+0x268>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008df6:	689b      	ldr	r3, [r3, #8]
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	d00b      	beq.n	8008e14 <USBD_GetDescriptor+0x178>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008e02:	689b      	ldr	r3, [r3, #8]
 8008e04:	687a      	ldr	r2, [r7, #4]
 8008e06:	7c12      	ldrb	r2, [r2, #16]
 8008e08:	f107 0108 	add.w	r1, r7, #8
 8008e0c:	4610      	mov	r0, r2
 8008e0e:	4798      	blx	r3
 8008e10:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008e12:	e077      	b.n	8008f04 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8008e14:	6839      	ldr	r1, [r7, #0]
 8008e16:	6878      	ldr	r0, [r7, #4]
 8008e18:	f000 fa90 	bl	800933c <USBD_CtlError>
        err++;
 8008e1c:	7afb      	ldrb	r3, [r7, #11]
 8008e1e:	3301      	adds	r3, #1
 8008e20:	72fb      	strb	r3, [r7, #11]
      break;
 8008e22:	e06f      	b.n	8008f04 <USBD_GetDescriptor+0x268>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008e2a:	68db      	ldr	r3, [r3, #12]
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	d00b      	beq.n	8008e48 <USBD_GetDescriptor+0x1ac>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008e36:	68db      	ldr	r3, [r3, #12]
 8008e38:	687a      	ldr	r2, [r7, #4]
 8008e3a:	7c12      	ldrb	r2, [r2, #16]
 8008e3c:	f107 0108 	add.w	r1, r7, #8
 8008e40:	4610      	mov	r0, r2
 8008e42:	4798      	blx	r3
 8008e44:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008e46:	e05d      	b.n	8008f04 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8008e48:	6839      	ldr	r1, [r7, #0]
 8008e4a:	6878      	ldr	r0, [r7, #4]
 8008e4c:	f000 fa76 	bl	800933c <USBD_CtlError>
        err++;
 8008e50:	7afb      	ldrb	r3, [r7, #11]
 8008e52:	3301      	adds	r3, #1
 8008e54:	72fb      	strb	r3, [r7, #11]
      break;
 8008e56:	e055      	b.n	8008f04 <USBD_GetDescriptor+0x268>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008e5e:	691b      	ldr	r3, [r3, #16]
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	d00b      	beq.n	8008e7c <USBD_GetDescriptor+0x1e0>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008e6a:	691b      	ldr	r3, [r3, #16]
 8008e6c:	687a      	ldr	r2, [r7, #4]
 8008e6e:	7c12      	ldrb	r2, [r2, #16]
 8008e70:	f107 0108 	add.w	r1, r7, #8
 8008e74:	4610      	mov	r0, r2
 8008e76:	4798      	blx	r3
 8008e78:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008e7a:	e043      	b.n	8008f04 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8008e7c:	6839      	ldr	r1, [r7, #0]
 8008e7e:	6878      	ldr	r0, [r7, #4]
 8008e80:	f000 fa5c 	bl	800933c <USBD_CtlError>
        err++;
 8008e84:	7afb      	ldrb	r3, [r7, #11]
 8008e86:	3301      	adds	r3, #1
 8008e88:	72fb      	strb	r3, [r7, #11]
      break;
 8008e8a:	e03b      	b.n	8008f04 <USBD_GetDescriptor+0x268>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008e92:	695b      	ldr	r3, [r3, #20]
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	d00b      	beq.n	8008eb0 <USBD_GetDescriptor+0x214>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008e9e:	695b      	ldr	r3, [r3, #20]
 8008ea0:	687a      	ldr	r2, [r7, #4]
 8008ea2:	7c12      	ldrb	r2, [r2, #16]
 8008ea4:	f107 0108 	add.w	r1, r7, #8
 8008ea8:	4610      	mov	r0, r2
 8008eaa:	4798      	blx	r3
 8008eac:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008eae:	e029      	b.n	8008f04 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8008eb0:	6839      	ldr	r1, [r7, #0]
 8008eb2:	6878      	ldr	r0, [r7, #4]
 8008eb4:	f000 fa42 	bl	800933c <USBD_CtlError>
        err++;
 8008eb8:	7afb      	ldrb	r3, [r7, #11]
 8008eba:	3301      	adds	r3, #1
 8008ebc:	72fb      	strb	r3, [r7, #11]
      break;
 8008ebe:	e021      	b.n	8008f04 <USBD_GetDescriptor+0x268>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008ec6:	699b      	ldr	r3, [r3, #24]
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d00b      	beq.n	8008ee4 <USBD_GetDescriptor+0x248>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008ed2:	699b      	ldr	r3, [r3, #24]
 8008ed4:	687a      	ldr	r2, [r7, #4]
 8008ed6:	7c12      	ldrb	r2, [r2, #16]
 8008ed8:	f107 0108 	add.w	r1, r7, #8
 8008edc:	4610      	mov	r0, r2
 8008ede:	4798      	blx	r3
 8008ee0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008ee2:	e00f      	b.n	8008f04 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8008ee4:	6839      	ldr	r1, [r7, #0]
 8008ee6:	6878      	ldr	r0, [r7, #4]
 8008ee8:	f000 fa28 	bl	800933c <USBD_CtlError>
        err++;
 8008eec:	7afb      	ldrb	r3, [r7, #11]
 8008eee:	3301      	adds	r3, #1
 8008ef0:	72fb      	strb	r3, [r7, #11]
      break;
 8008ef2:	e007      	b.n	8008f04 <USBD_GetDescriptor+0x268>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 8008ef4:	6839      	ldr	r1, [r7, #0]
 8008ef6:	6878      	ldr	r0, [r7, #4]
 8008ef8:	f000 fa20 	bl	800933c <USBD_CtlError>
      err++;
 8008efc:	7afb      	ldrb	r3, [r7, #11]
 8008efe:	3301      	adds	r3, #1
 8008f00:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 8008f02:	bf00      	nop
    }
    break;
 8008f04:	e037      	b.n	8008f76 <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	7c1b      	ldrb	r3, [r3, #16]
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	d109      	bne.n	8008f22 <USBD_GetDescriptor+0x286>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f16:	f107 0208 	add.w	r2, r7, #8
 8008f1a:	4610      	mov	r0, r2
 8008f1c:	4798      	blx	r3
 8008f1e:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8008f20:	e029      	b.n	8008f76 <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 8008f22:	6839      	ldr	r1, [r7, #0]
 8008f24:	6878      	ldr	r0, [r7, #4]
 8008f26:	f000 fa09 	bl	800933c <USBD_CtlError>
      err++;
 8008f2a:	7afb      	ldrb	r3, [r7, #11]
 8008f2c:	3301      	adds	r3, #1
 8008f2e:	72fb      	strb	r3, [r7, #11]
    break;
 8008f30:	e021      	b.n	8008f76 <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	7c1b      	ldrb	r3, [r3, #16]
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d10d      	bne.n	8008f56 <USBD_GetDescriptor+0x2ba>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f42:	f107 0208 	add.w	r2, r7, #8
 8008f46:	4610      	mov	r0, r2
 8008f48:	4798      	blx	r3
 8008f4a:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	3301      	adds	r3, #1
 8008f50:	2207      	movs	r2, #7
 8008f52:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8008f54:	e00f      	b.n	8008f76 <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 8008f56:	6839      	ldr	r1, [r7, #0]
 8008f58:	6878      	ldr	r0, [r7, #4]
 8008f5a:	f000 f9ef 	bl	800933c <USBD_CtlError>
      err++;
 8008f5e:	7afb      	ldrb	r3, [r7, #11]
 8008f60:	3301      	adds	r3, #1
 8008f62:	72fb      	strb	r3, [r7, #11]
    break;
 8008f64:	e007      	b.n	8008f76 <USBD_GetDescriptor+0x2da>

  default:
    USBD_CtlError(pdev, req);
 8008f66:	6839      	ldr	r1, [r7, #0]
 8008f68:	6878      	ldr	r0, [r7, #4]
 8008f6a:	f000 f9e7 	bl	800933c <USBD_CtlError>
    err++;
 8008f6e:	7afb      	ldrb	r3, [r7, #11]
 8008f70:	3301      	adds	r3, #1
 8008f72:	72fb      	strb	r3, [r7, #11]
    break;
 8008f74:	bf00      	nop
  }

  if (err != 0U)
 8008f76:	7afb      	ldrb	r3, [r7, #11]
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	d11e      	bne.n	8008fba <USBD_GetDescriptor+0x31e>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 8008f7c:	683b      	ldr	r3, [r7, #0]
 8008f7e:	88db      	ldrh	r3, [r3, #6]
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	d016      	beq.n	8008fb2 <USBD_GetDescriptor+0x316>
    {
      if (len != 0U)
 8008f84:	893b      	ldrh	r3, [r7, #8]
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d00e      	beq.n	8008fa8 <USBD_GetDescriptor+0x30c>
      {
        len = MIN(len, req->wLength);
 8008f8a:	683b      	ldr	r3, [r7, #0]
 8008f8c:	88da      	ldrh	r2, [r3, #6]
 8008f8e:	893b      	ldrh	r3, [r7, #8]
 8008f90:	4293      	cmp	r3, r2
 8008f92:	bf28      	it	cs
 8008f94:	4613      	movcs	r3, r2
 8008f96:	b29b      	uxth	r3, r3
 8008f98:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 8008f9a:	893b      	ldrh	r3, [r7, #8]
 8008f9c:	461a      	mov	r2, r3
 8008f9e:	68f9      	ldr	r1, [r7, #12]
 8008fa0:	6878      	ldr	r0, [r7, #4]
 8008fa2:	f000 fa3c 	bl	800941e <USBD_CtlSendData>
 8008fa6:	e009      	b.n	8008fbc <USBD_GetDescriptor+0x320>
      }
      else
      {
        USBD_CtlError(pdev, req);
 8008fa8:	6839      	ldr	r1, [r7, #0]
 8008faa:	6878      	ldr	r0, [r7, #4]
 8008fac:	f000 f9c6 	bl	800933c <USBD_CtlError>
 8008fb0:	e004      	b.n	8008fbc <USBD_GetDescriptor+0x320>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 8008fb2:	6878      	ldr	r0, [r7, #4]
 8008fb4:	f000 fa8d 	bl	80094d2 <USBD_CtlSendStatus>
 8008fb8:	e000      	b.n	8008fbc <USBD_GetDescriptor+0x320>
    return;
 8008fba:	bf00      	nop
    }
  }
}
 8008fbc:	3710      	adds	r7, #16
 8008fbe:	46bd      	mov	sp, r7
 8008fc0:	bd80      	pop	{r7, pc}
 8008fc2:	bf00      	nop

08008fc4 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008fc4:	b580      	push	{r7, lr}
 8008fc6:	b084      	sub	sp, #16
 8008fc8:	af00      	add	r7, sp, #0
 8008fca:	6078      	str	r0, [r7, #4]
 8008fcc:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008fce:	683b      	ldr	r3, [r7, #0]
 8008fd0:	889b      	ldrh	r3, [r3, #4]
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	d130      	bne.n	8009038 <USBD_SetAddress+0x74>
 8008fd6:	683b      	ldr	r3, [r7, #0]
 8008fd8:	88db      	ldrh	r3, [r3, #6]
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	d12c      	bne.n	8009038 <USBD_SetAddress+0x74>
 8008fde:	683b      	ldr	r3, [r7, #0]
 8008fe0:	885b      	ldrh	r3, [r3, #2]
 8008fe2:	2b7f      	cmp	r3, #127	; 0x7f
 8008fe4:	d828      	bhi.n	8009038 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008fe6:	683b      	ldr	r3, [r7, #0]
 8008fe8:	885b      	ldrh	r3, [r3, #2]
 8008fea:	b2db      	uxtb	r3, r3
 8008fec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008ff0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008ff8:	2b03      	cmp	r3, #3
 8008ffa:	d104      	bne.n	8009006 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8008ffc:	6839      	ldr	r1, [r7, #0]
 8008ffe:	6878      	ldr	r0, [r7, #4]
 8009000:	f000 f99c 	bl	800933c <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009004:	e01c      	b.n	8009040 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	7bfa      	ldrb	r2, [r7, #15]
 800900a:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800900e:	7bfb      	ldrb	r3, [r7, #15]
 8009010:	4619      	mov	r1, r3
 8009012:	6878      	ldr	r0, [r7, #4]
 8009014:	f000 ff04 	bl	8009e20 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8009018:	6878      	ldr	r0, [r7, #4]
 800901a:	f000 fa5a 	bl	80094d2 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800901e:	7bfb      	ldrb	r3, [r7, #15]
 8009020:	2b00      	cmp	r3, #0
 8009022:	d004      	beq.n	800902e <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	2202      	movs	r2, #2
 8009028:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800902c:	e008      	b.n	8009040 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	2201      	movs	r2, #1
 8009032:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009036:	e003      	b.n	8009040 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009038:	6839      	ldr	r1, [r7, #0]
 800903a:	6878      	ldr	r0, [r7, #4]
 800903c:	f000 f97e 	bl	800933c <USBD_CtlError>
  }
}
 8009040:	bf00      	nop
 8009042:	3710      	adds	r7, #16
 8009044:	46bd      	mov	sp, r7
 8009046:	bd80      	pop	{r7, pc}

08009048 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009048:	b580      	push	{r7, lr}
 800904a:	b084      	sub	sp, #16
 800904c:	af00      	add	r7, sp, #0
 800904e:	6078      	str	r0, [r7, #4]
 8009050:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009052:	2300      	movs	r3, #0
 8009054:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8009056:	683b      	ldr	r3, [r7, #0]
 8009058:	885b      	ldrh	r3, [r3, #2]
 800905a:	b2da      	uxtb	r2, r3
 800905c:	4b4b      	ldr	r3, [pc, #300]	; (800918c <USBD_SetConfig+0x144>)
 800905e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009060:	4b4a      	ldr	r3, [pc, #296]	; (800918c <USBD_SetConfig+0x144>)
 8009062:	781b      	ldrb	r3, [r3, #0]
 8009064:	2b01      	cmp	r3, #1
 8009066:	d905      	bls.n	8009074 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8009068:	6839      	ldr	r1, [r7, #0]
 800906a:	6878      	ldr	r0, [r7, #4]
 800906c:	f000 f966 	bl	800933c <USBD_CtlError>
    return USBD_FAIL;
 8009070:	2303      	movs	r3, #3
 8009072:	e087      	b.n	8009184 <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800907a:	2b02      	cmp	r3, #2
 800907c:	d002      	beq.n	8009084 <USBD_SetConfig+0x3c>
 800907e:	2b03      	cmp	r3, #3
 8009080:	d025      	beq.n	80090ce <USBD_SetConfig+0x86>
 8009082:	e071      	b.n	8009168 <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 8009084:	4b41      	ldr	r3, [pc, #260]	; (800918c <USBD_SetConfig+0x144>)
 8009086:	781b      	ldrb	r3, [r3, #0]
 8009088:	2b00      	cmp	r3, #0
 800908a:	d01c      	beq.n	80090c6 <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 800908c:	4b3f      	ldr	r3, [pc, #252]	; (800918c <USBD_SetConfig+0x144>)
 800908e:	781b      	ldrb	r3, [r3, #0]
 8009090:	461a      	mov	r2, r3
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 8009096:	4b3d      	ldr	r3, [pc, #244]	; (800918c <USBD_SetConfig+0x144>)
 8009098:	781b      	ldrb	r3, [r3, #0]
 800909a:	4619      	mov	r1, r3
 800909c:	6878      	ldr	r0, [r7, #4]
 800909e:	f7ff f97d 	bl	800839c <USBD_SetClassConfig>
 80090a2:	4603      	mov	r3, r0
 80090a4:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 80090a6:	7bfb      	ldrb	r3, [r7, #15]
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	d004      	beq.n	80090b6 <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 80090ac:	6839      	ldr	r1, [r7, #0]
 80090ae:	6878      	ldr	r0, [r7, #4]
 80090b0:	f000 f944 	bl	800933c <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 80090b4:	e065      	b.n	8009182 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 80090b6:	6878      	ldr	r0, [r7, #4]
 80090b8:	f000 fa0b 	bl	80094d2 <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	2203      	movs	r2, #3
 80090c0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 80090c4:	e05d      	b.n	8009182 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 80090c6:	6878      	ldr	r0, [r7, #4]
 80090c8:	f000 fa03 	bl	80094d2 <USBD_CtlSendStatus>
    break;
 80090cc:	e059      	b.n	8009182 <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 80090ce:	4b2f      	ldr	r3, [pc, #188]	; (800918c <USBD_SetConfig+0x144>)
 80090d0:	781b      	ldrb	r3, [r3, #0]
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d112      	bne.n	80090fc <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	2202      	movs	r2, #2
 80090da:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 80090de:	4b2b      	ldr	r3, [pc, #172]	; (800918c <USBD_SetConfig+0x144>)
 80090e0:	781b      	ldrb	r3, [r3, #0]
 80090e2:	461a      	mov	r2, r3
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80090e8:	4b28      	ldr	r3, [pc, #160]	; (800918c <USBD_SetConfig+0x144>)
 80090ea:	781b      	ldrb	r3, [r3, #0]
 80090ec:	4619      	mov	r1, r3
 80090ee:	6878      	ldr	r0, [r7, #4]
 80090f0:	f7ff f970 	bl	80083d4 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 80090f4:	6878      	ldr	r0, [r7, #4]
 80090f6:	f000 f9ec 	bl	80094d2 <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 80090fa:	e042      	b.n	8009182 <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 80090fc:	4b23      	ldr	r3, [pc, #140]	; (800918c <USBD_SetConfig+0x144>)
 80090fe:	781b      	ldrb	r3, [r3, #0]
 8009100:	461a      	mov	r2, r3
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	685b      	ldr	r3, [r3, #4]
 8009106:	429a      	cmp	r2, r3
 8009108:	d02a      	beq.n	8009160 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	685b      	ldr	r3, [r3, #4]
 800910e:	b2db      	uxtb	r3, r3
 8009110:	4619      	mov	r1, r3
 8009112:	6878      	ldr	r0, [r7, #4]
 8009114:	f7ff f95e 	bl	80083d4 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 8009118:	4b1c      	ldr	r3, [pc, #112]	; (800918c <USBD_SetConfig+0x144>)
 800911a:	781b      	ldrb	r3, [r3, #0]
 800911c:	461a      	mov	r2, r3
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 8009122:	4b1a      	ldr	r3, [pc, #104]	; (800918c <USBD_SetConfig+0x144>)
 8009124:	781b      	ldrb	r3, [r3, #0]
 8009126:	4619      	mov	r1, r3
 8009128:	6878      	ldr	r0, [r7, #4]
 800912a:	f7ff f937 	bl	800839c <USBD_SetClassConfig>
 800912e:	4603      	mov	r3, r0
 8009130:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 8009132:	7bfb      	ldrb	r3, [r7, #15]
 8009134:	2b00      	cmp	r3, #0
 8009136:	d00f      	beq.n	8009158 <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 8009138:	6839      	ldr	r1, [r7, #0]
 800913a:	6878      	ldr	r0, [r7, #4]
 800913c:	f000 f8fe 	bl	800933c <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	685b      	ldr	r3, [r3, #4]
 8009144:	b2db      	uxtb	r3, r3
 8009146:	4619      	mov	r1, r3
 8009148:	6878      	ldr	r0, [r7, #4]
 800914a:	f7ff f943 	bl	80083d4 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	2202      	movs	r2, #2
 8009152:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8009156:	e014      	b.n	8009182 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8009158:	6878      	ldr	r0, [r7, #4]
 800915a:	f000 f9ba 	bl	80094d2 <USBD_CtlSendStatus>
    break;
 800915e:	e010      	b.n	8009182 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8009160:	6878      	ldr	r0, [r7, #4]
 8009162:	f000 f9b6 	bl	80094d2 <USBD_CtlSendStatus>
    break;
 8009166:	e00c      	b.n	8009182 <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 8009168:	6839      	ldr	r1, [r7, #0]
 800916a:	6878      	ldr	r0, [r7, #4]
 800916c:	f000 f8e6 	bl	800933c <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009170:	4b06      	ldr	r3, [pc, #24]	; (800918c <USBD_SetConfig+0x144>)
 8009172:	781b      	ldrb	r3, [r3, #0]
 8009174:	4619      	mov	r1, r3
 8009176:	6878      	ldr	r0, [r7, #4]
 8009178:	f7ff f92c 	bl	80083d4 <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 800917c:	2303      	movs	r3, #3
 800917e:	73fb      	strb	r3, [r7, #15]
    break;
 8009180:	bf00      	nop
  }

  return ret;
 8009182:	7bfb      	ldrb	r3, [r7, #15]
}
 8009184:	4618      	mov	r0, r3
 8009186:	3710      	adds	r7, #16
 8009188:	46bd      	mov	sp, r7
 800918a:	bd80      	pop	{r7, pc}
 800918c:	200007a4 	.word	0x200007a4

08009190 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009190:	b580      	push	{r7, lr}
 8009192:	b082      	sub	sp, #8
 8009194:	af00      	add	r7, sp, #0
 8009196:	6078      	str	r0, [r7, #4]
 8009198:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800919a:	683b      	ldr	r3, [r7, #0]
 800919c:	88db      	ldrh	r3, [r3, #6]
 800919e:	2b01      	cmp	r3, #1
 80091a0:	d004      	beq.n	80091ac <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80091a2:	6839      	ldr	r1, [r7, #0]
 80091a4:	6878      	ldr	r0, [r7, #4]
 80091a6:	f000 f8c9 	bl	800933c <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 80091aa:	e021      	b.n	80091f0 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80091b2:	2b01      	cmp	r3, #1
 80091b4:	db17      	blt.n	80091e6 <USBD_GetConfig+0x56>
 80091b6:	2b02      	cmp	r3, #2
 80091b8:	dd02      	ble.n	80091c0 <USBD_GetConfig+0x30>
 80091ba:	2b03      	cmp	r3, #3
 80091bc:	d00b      	beq.n	80091d6 <USBD_GetConfig+0x46>
 80091be:	e012      	b.n	80091e6 <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	2200      	movs	r2, #0
 80091c4:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	3308      	adds	r3, #8
 80091ca:	2201      	movs	r2, #1
 80091cc:	4619      	mov	r1, r3
 80091ce:	6878      	ldr	r0, [r7, #4]
 80091d0:	f000 f925 	bl	800941e <USBD_CtlSendData>
      break;
 80091d4:	e00c      	b.n	80091f0 <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	3304      	adds	r3, #4
 80091da:	2201      	movs	r2, #1
 80091dc:	4619      	mov	r1, r3
 80091de:	6878      	ldr	r0, [r7, #4]
 80091e0:	f000 f91d 	bl	800941e <USBD_CtlSendData>
      break;
 80091e4:	e004      	b.n	80091f0 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 80091e6:	6839      	ldr	r1, [r7, #0]
 80091e8:	6878      	ldr	r0, [r7, #4]
 80091ea:	f000 f8a7 	bl	800933c <USBD_CtlError>
      break;
 80091ee:	bf00      	nop
}
 80091f0:	bf00      	nop
 80091f2:	3708      	adds	r7, #8
 80091f4:	46bd      	mov	sp, r7
 80091f6:	bd80      	pop	{r7, pc}

080091f8 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80091f8:	b580      	push	{r7, lr}
 80091fa:	b082      	sub	sp, #8
 80091fc:	af00      	add	r7, sp, #0
 80091fe:	6078      	str	r0, [r7, #4]
 8009200:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009208:	3b01      	subs	r3, #1
 800920a:	2b02      	cmp	r3, #2
 800920c:	d81e      	bhi.n	800924c <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 800920e:	683b      	ldr	r3, [r7, #0]
 8009210:	88db      	ldrh	r3, [r3, #6]
 8009212:	2b02      	cmp	r3, #2
 8009214:	d004      	beq.n	8009220 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 8009216:	6839      	ldr	r1, [r7, #0]
 8009218:	6878      	ldr	r0, [r7, #4]
 800921a:	f000 f88f 	bl	800933c <USBD_CtlError>
      break;
 800921e:	e01a      	b.n	8009256 <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	2201      	movs	r2, #1
 8009224:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800922c:	2b00      	cmp	r3, #0
 800922e:	d005      	beq.n	800923c <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	68db      	ldr	r3, [r3, #12]
 8009234:	f043 0202 	orr.w	r2, r3, #2
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	330c      	adds	r3, #12
 8009240:	2202      	movs	r2, #2
 8009242:	4619      	mov	r1, r3
 8009244:	6878      	ldr	r0, [r7, #4]
 8009246:	f000 f8ea 	bl	800941e <USBD_CtlSendData>
    break;
 800924a:	e004      	b.n	8009256 <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 800924c:	6839      	ldr	r1, [r7, #0]
 800924e:	6878      	ldr	r0, [r7, #4]
 8009250:	f000 f874 	bl	800933c <USBD_CtlError>
    break;
 8009254:	bf00      	nop
  }
}
 8009256:	bf00      	nop
 8009258:	3708      	adds	r7, #8
 800925a:	46bd      	mov	sp, r7
 800925c:	bd80      	pop	{r7, pc}

0800925e <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800925e:	b580      	push	{r7, lr}
 8009260:	b082      	sub	sp, #8
 8009262:	af00      	add	r7, sp, #0
 8009264:	6078      	str	r0, [r7, #4]
 8009266:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009268:	683b      	ldr	r3, [r7, #0]
 800926a:	885b      	ldrh	r3, [r3, #2]
 800926c:	2b01      	cmp	r3, #1
 800926e:	d106      	bne.n	800927e <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	2201      	movs	r2, #1
 8009274:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8009278:	6878      	ldr	r0, [r7, #4]
 800927a:	f000 f92a 	bl	80094d2 <USBD_CtlSendStatus>
  }
}
 800927e:	bf00      	nop
 8009280:	3708      	adds	r7, #8
 8009282:	46bd      	mov	sp, r7
 8009284:	bd80      	pop	{r7, pc}

08009286 <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009286:	b580      	push	{r7, lr}
 8009288:	b082      	sub	sp, #8
 800928a:	af00      	add	r7, sp, #0
 800928c:	6078      	str	r0, [r7, #4]
 800928e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009296:	3b01      	subs	r3, #1
 8009298:	2b02      	cmp	r3, #2
 800929a:	d80b      	bhi.n	80092b4 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800929c:	683b      	ldr	r3, [r7, #0]
 800929e:	885b      	ldrh	r3, [r3, #2]
 80092a0:	2b01      	cmp	r3, #1
 80092a2:	d10c      	bne.n	80092be <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	2200      	movs	r2, #0
 80092a8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80092ac:	6878      	ldr	r0, [r7, #4]
 80092ae:	f000 f910 	bl	80094d2 <USBD_CtlSendStatus>
      }
      break;
 80092b2:	e004      	b.n	80092be <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 80092b4:	6839      	ldr	r1, [r7, #0]
 80092b6:	6878      	ldr	r0, [r7, #4]
 80092b8:	f000 f840 	bl	800933c <USBD_CtlError>
      break;
 80092bc:	e000      	b.n	80092c0 <USBD_ClrFeature+0x3a>
      break;
 80092be:	bf00      	nop
  }
}
 80092c0:	bf00      	nop
 80092c2:	3708      	adds	r7, #8
 80092c4:	46bd      	mov	sp, r7
 80092c6:	bd80      	pop	{r7, pc}

080092c8 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80092c8:	b580      	push	{r7, lr}
 80092ca:	b084      	sub	sp, #16
 80092cc:	af00      	add	r7, sp, #0
 80092ce:	6078      	str	r0, [r7, #4]
 80092d0:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80092d2:	683b      	ldr	r3, [r7, #0]
 80092d4:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	781a      	ldrb	r2, [r3, #0]
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80092de:	68fb      	ldr	r3, [r7, #12]
 80092e0:	3301      	adds	r3, #1
 80092e2:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	781a      	ldrb	r2, [r3, #0]
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	3301      	adds	r3, #1
 80092f0:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80092f2:	68f8      	ldr	r0, [r7, #12]
 80092f4:	f7ff faa9 	bl	800884a <SWAPBYTE>
 80092f8:	4603      	mov	r3, r0
 80092fa:	461a      	mov	r2, r3
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	3301      	adds	r3, #1
 8009304:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	3301      	adds	r3, #1
 800930a:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800930c:	68f8      	ldr	r0, [r7, #12]
 800930e:	f7ff fa9c 	bl	800884a <SWAPBYTE>
 8009312:	4603      	mov	r3, r0
 8009314:	461a      	mov	r2, r3
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	3301      	adds	r3, #1
 800931e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	3301      	adds	r3, #1
 8009324:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8009326:	68f8      	ldr	r0, [r7, #12]
 8009328:	f7ff fa8f 	bl	800884a <SWAPBYTE>
 800932c:	4603      	mov	r3, r0
 800932e:	461a      	mov	r2, r3
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	80da      	strh	r2, [r3, #6]
}
 8009334:	bf00      	nop
 8009336:	3710      	adds	r7, #16
 8009338:	46bd      	mov	sp, r7
 800933a:	bd80      	pop	{r7, pc}

0800933c <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800933c:	b580      	push	{r7, lr}
 800933e:	b082      	sub	sp, #8
 8009340:	af00      	add	r7, sp, #0
 8009342:	6078      	str	r0, [r7, #4]
 8009344:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8009346:	2180      	movs	r1, #128	; 0x80
 8009348:	6878      	ldr	r0, [r7, #4]
 800934a:	f000 fcff 	bl	8009d4c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800934e:	2100      	movs	r1, #0
 8009350:	6878      	ldr	r0, [r7, #4]
 8009352:	f000 fcfb 	bl	8009d4c <USBD_LL_StallEP>
}
 8009356:	bf00      	nop
 8009358:	3708      	adds	r7, #8
 800935a:	46bd      	mov	sp, r7
 800935c:	bd80      	pop	{r7, pc}

0800935e <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800935e:	b580      	push	{r7, lr}
 8009360:	b086      	sub	sp, #24
 8009362:	af00      	add	r7, sp, #0
 8009364:	60f8      	str	r0, [r7, #12]
 8009366:	60b9      	str	r1, [r7, #8]
 8009368:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800936a:	2300      	movs	r3, #0
 800936c:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800936e:	68fb      	ldr	r3, [r7, #12]
 8009370:	2b00      	cmp	r3, #0
 8009372:	d036      	beq.n	80093e2 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8009374:	68fb      	ldr	r3, [r7, #12]
 8009376:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8009378:	6938      	ldr	r0, [r7, #16]
 800937a:	f000 f836 	bl	80093ea <USBD_GetLen>
 800937e:	4603      	mov	r3, r0
 8009380:	3301      	adds	r3, #1
 8009382:	b29b      	uxth	r3, r3
 8009384:	005b      	lsls	r3, r3, #1
 8009386:	b29a      	uxth	r2, r3
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800938c:	7dfb      	ldrb	r3, [r7, #23]
 800938e:	68ba      	ldr	r2, [r7, #8]
 8009390:	4413      	add	r3, r2
 8009392:	687a      	ldr	r2, [r7, #4]
 8009394:	7812      	ldrb	r2, [r2, #0]
 8009396:	701a      	strb	r2, [r3, #0]
  idx++;
 8009398:	7dfb      	ldrb	r3, [r7, #23]
 800939a:	3301      	adds	r3, #1
 800939c:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800939e:	7dfb      	ldrb	r3, [r7, #23]
 80093a0:	68ba      	ldr	r2, [r7, #8]
 80093a2:	4413      	add	r3, r2
 80093a4:	2203      	movs	r2, #3
 80093a6:	701a      	strb	r2, [r3, #0]
  idx++;
 80093a8:	7dfb      	ldrb	r3, [r7, #23]
 80093aa:	3301      	adds	r3, #1
 80093ac:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80093ae:	e013      	b.n	80093d8 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80093b0:	7dfb      	ldrb	r3, [r7, #23]
 80093b2:	68ba      	ldr	r2, [r7, #8]
 80093b4:	4413      	add	r3, r2
 80093b6:	693a      	ldr	r2, [r7, #16]
 80093b8:	7812      	ldrb	r2, [r2, #0]
 80093ba:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80093bc:	693b      	ldr	r3, [r7, #16]
 80093be:	3301      	adds	r3, #1
 80093c0:	613b      	str	r3, [r7, #16]
    idx++;
 80093c2:	7dfb      	ldrb	r3, [r7, #23]
 80093c4:	3301      	adds	r3, #1
 80093c6:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80093c8:	7dfb      	ldrb	r3, [r7, #23]
 80093ca:	68ba      	ldr	r2, [r7, #8]
 80093cc:	4413      	add	r3, r2
 80093ce:	2200      	movs	r2, #0
 80093d0:	701a      	strb	r2, [r3, #0]
    idx++;
 80093d2:	7dfb      	ldrb	r3, [r7, #23]
 80093d4:	3301      	adds	r3, #1
 80093d6:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80093d8:	693b      	ldr	r3, [r7, #16]
 80093da:	781b      	ldrb	r3, [r3, #0]
 80093dc:	2b00      	cmp	r3, #0
 80093de:	d1e7      	bne.n	80093b0 <USBD_GetString+0x52>
 80093e0:	e000      	b.n	80093e4 <USBD_GetString+0x86>
    return;
 80093e2:	bf00      	nop
  }
}
 80093e4:	3718      	adds	r7, #24
 80093e6:	46bd      	mov	sp, r7
 80093e8:	bd80      	pop	{r7, pc}

080093ea <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80093ea:	b480      	push	{r7}
 80093ec:	b085      	sub	sp, #20
 80093ee:	af00      	add	r7, sp, #0
 80093f0:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80093f2:	2300      	movs	r3, #0
 80093f4:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80093fa:	e005      	b.n	8009408 <USBD_GetLen+0x1e>
  {
    len++;
 80093fc:	7bfb      	ldrb	r3, [r7, #15]
 80093fe:	3301      	adds	r3, #1
 8009400:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8009402:	68bb      	ldr	r3, [r7, #8]
 8009404:	3301      	adds	r3, #1
 8009406:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8009408:	68bb      	ldr	r3, [r7, #8]
 800940a:	781b      	ldrb	r3, [r3, #0]
 800940c:	2b00      	cmp	r3, #0
 800940e:	d1f5      	bne.n	80093fc <USBD_GetLen+0x12>
  }

  return len;
 8009410:	7bfb      	ldrb	r3, [r7, #15]
}
 8009412:	4618      	mov	r0, r3
 8009414:	3714      	adds	r7, #20
 8009416:	46bd      	mov	sp, r7
 8009418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800941c:	4770      	bx	lr

0800941e <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800941e:	b580      	push	{r7, lr}
 8009420:	b084      	sub	sp, #16
 8009422:	af00      	add	r7, sp, #0
 8009424:	60f8      	str	r0, [r7, #12]
 8009426:	60b9      	str	r1, [r7, #8]
 8009428:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800942a:	68fb      	ldr	r3, [r7, #12]
 800942c:	2202      	movs	r2, #2
 800942e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8009432:	68fb      	ldr	r3, [r7, #12]
 8009434:	687a      	ldr	r2, [r7, #4]
 8009436:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 8009438:	68fb      	ldr	r3, [r7, #12]
 800943a:	687a      	ldr	r2, [r7, #4]
 800943c:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	68ba      	ldr	r2, [r7, #8]
 8009442:	2100      	movs	r1, #0
 8009444:	68f8      	ldr	r0, [r7, #12]
 8009446:	f000 fd0a 	bl	8009e5e <USBD_LL_Transmit>

  return USBD_OK;
 800944a:	2300      	movs	r3, #0
}
 800944c:	4618      	mov	r0, r3
 800944e:	3710      	adds	r7, #16
 8009450:	46bd      	mov	sp, r7
 8009452:	bd80      	pop	{r7, pc}

08009454 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8009454:	b580      	push	{r7, lr}
 8009456:	b084      	sub	sp, #16
 8009458:	af00      	add	r7, sp, #0
 800945a:	60f8      	str	r0, [r7, #12]
 800945c:	60b9      	str	r1, [r7, #8]
 800945e:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	68ba      	ldr	r2, [r7, #8]
 8009464:	2100      	movs	r1, #0
 8009466:	68f8      	ldr	r0, [r7, #12]
 8009468:	f000 fcf9 	bl	8009e5e <USBD_LL_Transmit>

  return USBD_OK;
 800946c:	2300      	movs	r3, #0
}
 800946e:	4618      	mov	r0, r3
 8009470:	3710      	adds	r7, #16
 8009472:	46bd      	mov	sp, r7
 8009474:	bd80      	pop	{r7, pc}

08009476 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8009476:	b580      	push	{r7, lr}
 8009478:	b084      	sub	sp, #16
 800947a:	af00      	add	r7, sp, #0
 800947c:	60f8      	str	r0, [r7, #12]
 800947e:	60b9      	str	r1, [r7, #8]
 8009480:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	2203      	movs	r2, #3
 8009486:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	687a      	ldr	r2, [r7, #4]
 800948e:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 8009492:	68fb      	ldr	r3, [r7, #12]
 8009494:	687a      	ldr	r2, [r7, #4]
 8009496:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	68ba      	ldr	r2, [r7, #8]
 800949e:	2100      	movs	r1, #0
 80094a0:	68f8      	ldr	r0, [r7, #12]
 80094a2:	f000 fcfd 	bl	8009ea0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80094a6:	2300      	movs	r3, #0
}
 80094a8:	4618      	mov	r0, r3
 80094aa:	3710      	adds	r7, #16
 80094ac:	46bd      	mov	sp, r7
 80094ae:	bd80      	pop	{r7, pc}

080094b0 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80094b0:	b580      	push	{r7, lr}
 80094b2:	b084      	sub	sp, #16
 80094b4:	af00      	add	r7, sp, #0
 80094b6:	60f8      	str	r0, [r7, #12]
 80094b8:	60b9      	str	r1, [r7, #8]
 80094ba:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	68ba      	ldr	r2, [r7, #8]
 80094c0:	2100      	movs	r1, #0
 80094c2:	68f8      	ldr	r0, [r7, #12]
 80094c4:	f000 fcec 	bl	8009ea0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80094c8:	2300      	movs	r3, #0
}
 80094ca:	4618      	mov	r0, r3
 80094cc:	3710      	adds	r7, #16
 80094ce:	46bd      	mov	sp, r7
 80094d0:	bd80      	pop	{r7, pc}

080094d2 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80094d2:	b580      	push	{r7, lr}
 80094d4:	b082      	sub	sp, #8
 80094d6:	af00      	add	r7, sp, #0
 80094d8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	2204      	movs	r2, #4
 80094de:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80094e2:	2300      	movs	r3, #0
 80094e4:	2200      	movs	r2, #0
 80094e6:	2100      	movs	r1, #0
 80094e8:	6878      	ldr	r0, [r7, #4]
 80094ea:	f000 fcb8 	bl	8009e5e <USBD_LL_Transmit>

  return USBD_OK;
 80094ee:	2300      	movs	r3, #0
}
 80094f0:	4618      	mov	r0, r3
 80094f2:	3708      	adds	r7, #8
 80094f4:	46bd      	mov	sp, r7
 80094f6:	bd80      	pop	{r7, pc}

080094f8 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80094f8:	b580      	push	{r7, lr}
 80094fa:	b082      	sub	sp, #8
 80094fc:	af00      	add	r7, sp, #0
 80094fe:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	2205      	movs	r2, #5
 8009504:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009508:	2300      	movs	r3, #0
 800950a:	2200      	movs	r2, #0
 800950c:	2100      	movs	r1, #0
 800950e:	6878      	ldr	r0, [r7, #4]
 8009510:	f000 fcc6 	bl	8009ea0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009514:	2300      	movs	r3, #0
}
 8009516:	4618      	mov	r0, r3
 8009518:	3708      	adds	r7, #8
 800951a:	46bd      	mov	sp, r7
 800951c:	bd80      	pop	{r7, pc}
	...

08009520 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8009520:	b580      	push	{r7, lr}
 8009522:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8009524:	2200      	movs	r2, #0
 8009526:	4912      	ldr	r1, [pc, #72]	; (8009570 <MX_USB_DEVICE_Init+0x50>)
 8009528:	4812      	ldr	r0, [pc, #72]	; (8009574 <MX_USB_DEVICE_Init+0x54>)
 800952a:	f7fe fec9 	bl	80082c0 <USBD_Init>
 800952e:	4603      	mov	r3, r0
 8009530:	2b00      	cmp	r3, #0
 8009532:	d001      	beq.n	8009538 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8009534:	f7f8 f928 	bl	8001788 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8009538:	490f      	ldr	r1, [pc, #60]	; (8009578 <MX_USB_DEVICE_Init+0x58>)
 800953a:	480e      	ldr	r0, [pc, #56]	; (8009574 <MX_USB_DEVICE_Init+0x54>)
 800953c:	f7fe fef6 	bl	800832c <USBD_RegisterClass>
 8009540:	4603      	mov	r3, r0
 8009542:	2b00      	cmp	r3, #0
 8009544:	d001      	beq.n	800954a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8009546:	f7f8 f91f 	bl	8001788 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800954a:	490c      	ldr	r1, [pc, #48]	; (800957c <MX_USB_DEVICE_Init+0x5c>)
 800954c:	4809      	ldr	r0, [pc, #36]	; (8009574 <MX_USB_DEVICE_Init+0x54>)
 800954e:	f7fe fe1b 	bl	8008188 <USBD_CDC_RegisterInterface>
 8009552:	4603      	mov	r3, r0
 8009554:	2b00      	cmp	r3, #0
 8009556:	d001      	beq.n	800955c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8009558:	f7f8 f916 	bl	8001788 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800955c:	4805      	ldr	r0, [pc, #20]	; (8009574 <MX_USB_DEVICE_Init+0x54>)
 800955e:	f7fe ff06 	bl	800836e <USBD_Start>
 8009562:	4603      	mov	r3, r0
 8009564:	2b00      	cmp	r3, #0
 8009566:	d001      	beq.n	800956c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8009568:	f7f8 f90e 	bl	8001788 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800956c:	bf00      	nop
 800956e:	bd80      	pop	{r7, pc}
 8009570:	20000140 	.word	0x20000140
 8009574:	200008a4 	.word	0x200008a4
 8009578:	20000028 	.word	0x20000028
 800957c:	2000012c 	.word	0x2000012c

08009580 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8009580:	b580      	push	{r7, lr}
 8009582:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8009584:	2200      	movs	r2, #0
 8009586:	4905      	ldr	r1, [pc, #20]	; (800959c <CDC_Init_FS+0x1c>)
 8009588:	4805      	ldr	r0, [pc, #20]	; (80095a0 <CDC_Init_FS+0x20>)
 800958a:	f7fe fe12 	bl	80081b2 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800958e:	4905      	ldr	r1, [pc, #20]	; (80095a4 <CDC_Init_FS+0x24>)
 8009590:	4803      	ldr	r0, [pc, #12]	; (80095a0 <CDC_Init_FS+0x20>)
 8009592:	f7fe fe27 	bl	80081e4 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8009596:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8009598:	4618      	mov	r0, r3
 800959a:	bd80      	pop	{r7, pc}
 800959c:	20001374 	.word	0x20001374
 80095a0:	200008a4 	.word	0x200008a4
 80095a4:	20000b74 	.word	0x20000b74

080095a8 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80095a8:	b480      	push	{r7}
 80095aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80095ac:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80095ae:	4618      	mov	r0, r3
 80095b0:	46bd      	mov	sp, r7
 80095b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095b6:	4770      	bx	lr

080095b8 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80095b8:	b480      	push	{r7}
 80095ba:	b083      	sub	sp, #12
 80095bc:	af00      	add	r7, sp, #0
 80095be:	4603      	mov	r3, r0
 80095c0:	6039      	str	r1, [r7, #0]
 80095c2:	71fb      	strb	r3, [r7, #7]
 80095c4:	4613      	mov	r3, r2
 80095c6:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80095c8:	79fb      	ldrb	r3, [r7, #7]
 80095ca:	2b23      	cmp	r3, #35	; 0x23
 80095cc:	d84a      	bhi.n	8009664 <CDC_Control_FS+0xac>
 80095ce:	a201      	add	r2, pc, #4	; (adr r2, 80095d4 <CDC_Control_FS+0x1c>)
 80095d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095d4:	08009665 	.word	0x08009665
 80095d8:	08009665 	.word	0x08009665
 80095dc:	08009665 	.word	0x08009665
 80095e0:	08009665 	.word	0x08009665
 80095e4:	08009665 	.word	0x08009665
 80095e8:	08009665 	.word	0x08009665
 80095ec:	08009665 	.word	0x08009665
 80095f0:	08009665 	.word	0x08009665
 80095f4:	08009665 	.word	0x08009665
 80095f8:	08009665 	.word	0x08009665
 80095fc:	08009665 	.word	0x08009665
 8009600:	08009665 	.word	0x08009665
 8009604:	08009665 	.word	0x08009665
 8009608:	08009665 	.word	0x08009665
 800960c:	08009665 	.word	0x08009665
 8009610:	08009665 	.word	0x08009665
 8009614:	08009665 	.word	0x08009665
 8009618:	08009665 	.word	0x08009665
 800961c:	08009665 	.word	0x08009665
 8009620:	08009665 	.word	0x08009665
 8009624:	08009665 	.word	0x08009665
 8009628:	08009665 	.word	0x08009665
 800962c:	08009665 	.word	0x08009665
 8009630:	08009665 	.word	0x08009665
 8009634:	08009665 	.word	0x08009665
 8009638:	08009665 	.word	0x08009665
 800963c:	08009665 	.word	0x08009665
 8009640:	08009665 	.word	0x08009665
 8009644:	08009665 	.word	0x08009665
 8009648:	08009665 	.word	0x08009665
 800964c:	08009665 	.word	0x08009665
 8009650:	08009665 	.word	0x08009665
 8009654:	08009665 	.word	0x08009665
 8009658:	08009665 	.word	0x08009665
 800965c:	08009665 	.word	0x08009665
 8009660:	08009665 	.word	0x08009665
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8009664:	bf00      	nop
  }

  return (USBD_OK);
 8009666:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8009668:	4618      	mov	r0, r3
 800966a:	370c      	adds	r7, #12
 800966c:	46bd      	mov	sp, r7
 800966e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009672:	4770      	bx	lr

08009674 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8009674:	b580      	push	{r7, lr}
 8009676:	b082      	sub	sp, #8
 8009678:	af00      	add	r7, sp, #0
 800967a:	6078      	str	r0, [r7, #4]
 800967c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800967e:	6879      	ldr	r1, [r7, #4]
 8009680:	4805      	ldr	r0, [pc, #20]	; (8009698 <CDC_Receive_FS+0x24>)
 8009682:	f7fe fdaf 	bl	80081e4 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8009686:	4804      	ldr	r0, [pc, #16]	; (8009698 <CDC_Receive_FS+0x24>)
 8009688:	f7fe fdf0 	bl	800826c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800968c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800968e:	4618      	mov	r0, r3
 8009690:	3708      	adds	r7, #8
 8009692:	46bd      	mov	sp, r7
 8009694:	bd80      	pop	{r7, pc}
 8009696:	bf00      	nop
 8009698:	200008a4 	.word	0x200008a4

0800969c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800969c:	b580      	push	{r7, lr}
 800969e:	b084      	sub	sp, #16
 80096a0:	af00      	add	r7, sp, #0
 80096a2:	6078      	str	r0, [r7, #4]
 80096a4:	460b      	mov	r3, r1
 80096a6:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80096a8:	2300      	movs	r3, #0
 80096aa:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80096ac:	4b0d      	ldr	r3, [pc, #52]	; (80096e4 <CDC_Transmit_FS+0x48>)
 80096ae:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80096b2:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80096b4:	68bb      	ldr	r3, [r7, #8]
 80096b6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	d001      	beq.n	80096c2 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80096be:	2301      	movs	r3, #1
 80096c0:	e00b      	b.n	80096da <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80096c2:	887b      	ldrh	r3, [r7, #2]
 80096c4:	461a      	mov	r2, r3
 80096c6:	6879      	ldr	r1, [r7, #4]
 80096c8:	4806      	ldr	r0, [pc, #24]	; (80096e4 <CDC_Transmit_FS+0x48>)
 80096ca:	f7fe fd72 	bl	80081b2 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80096ce:	4805      	ldr	r0, [pc, #20]	; (80096e4 <CDC_Transmit_FS+0x48>)
 80096d0:	f7fe fd9c 	bl	800820c <USBD_CDC_TransmitPacket>
 80096d4:	4603      	mov	r3, r0
 80096d6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80096d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80096da:	4618      	mov	r0, r3
 80096dc:	3710      	adds	r7, #16
 80096de:	46bd      	mov	sp, r7
 80096e0:	bd80      	pop	{r7, pc}
 80096e2:	bf00      	nop
 80096e4:	200008a4 	.word	0x200008a4

080096e8 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80096e8:	b480      	push	{r7}
 80096ea:	b087      	sub	sp, #28
 80096ec:	af00      	add	r7, sp, #0
 80096ee:	60f8      	str	r0, [r7, #12]
 80096f0:	60b9      	str	r1, [r7, #8]
 80096f2:	4613      	mov	r3, r2
 80096f4:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80096f6:	2300      	movs	r3, #0
 80096f8:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80096fa:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80096fe:	4618      	mov	r0, r3
 8009700:	371c      	adds	r7, #28
 8009702:	46bd      	mov	sp, r7
 8009704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009708:	4770      	bx	lr
	...

0800970c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800970c:	b480      	push	{r7}
 800970e:	b083      	sub	sp, #12
 8009710:	af00      	add	r7, sp, #0
 8009712:	4603      	mov	r3, r0
 8009714:	6039      	str	r1, [r7, #0]
 8009716:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8009718:	683b      	ldr	r3, [r7, #0]
 800971a:	2212      	movs	r2, #18
 800971c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800971e:	4b03      	ldr	r3, [pc, #12]	; (800972c <USBD_FS_DeviceDescriptor+0x20>)
}
 8009720:	4618      	mov	r0, r3
 8009722:	370c      	adds	r7, #12
 8009724:	46bd      	mov	sp, r7
 8009726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800972a:	4770      	bx	lr
 800972c:	20000160 	.word	0x20000160

08009730 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009730:	b480      	push	{r7}
 8009732:	b083      	sub	sp, #12
 8009734:	af00      	add	r7, sp, #0
 8009736:	4603      	mov	r3, r0
 8009738:	6039      	str	r1, [r7, #0]
 800973a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800973c:	683b      	ldr	r3, [r7, #0]
 800973e:	2204      	movs	r2, #4
 8009740:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8009742:	4b03      	ldr	r3, [pc, #12]	; (8009750 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8009744:	4618      	mov	r0, r3
 8009746:	370c      	adds	r7, #12
 8009748:	46bd      	mov	sp, r7
 800974a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800974e:	4770      	bx	lr
 8009750:	20000180 	.word	0x20000180

08009754 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009754:	b580      	push	{r7, lr}
 8009756:	b082      	sub	sp, #8
 8009758:	af00      	add	r7, sp, #0
 800975a:	4603      	mov	r3, r0
 800975c:	6039      	str	r1, [r7, #0]
 800975e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009760:	79fb      	ldrb	r3, [r7, #7]
 8009762:	2b00      	cmp	r3, #0
 8009764:	d105      	bne.n	8009772 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009766:	683a      	ldr	r2, [r7, #0]
 8009768:	4907      	ldr	r1, [pc, #28]	; (8009788 <USBD_FS_ProductStrDescriptor+0x34>)
 800976a:	4808      	ldr	r0, [pc, #32]	; (800978c <USBD_FS_ProductStrDescriptor+0x38>)
 800976c:	f7ff fdf7 	bl	800935e <USBD_GetString>
 8009770:	e004      	b.n	800977c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009772:	683a      	ldr	r2, [r7, #0]
 8009774:	4904      	ldr	r1, [pc, #16]	; (8009788 <USBD_FS_ProductStrDescriptor+0x34>)
 8009776:	4805      	ldr	r0, [pc, #20]	; (800978c <USBD_FS_ProductStrDescriptor+0x38>)
 8009778:	f7ff fdf1 	bl	800935e <USBD_GetString>
  }
  return USBD_StrDesc;
 800977c:	4b02      	ldr	r3, [pc, #8]	; (8009788 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800977e:	4618      	mov	r0, r3
 8009780:	3708      	adds	r7, #8
 8009782:	46bd      	mov	sp, r7
 8009784:	bd80      	pop	{r7, pc}
 8009786:	bf00      	nop
 8009788:	20001b74 	.word	0x20001b74
 800978c:	0800db50 	.word	0x0800db50

08009790 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009790:	b580      	push	{r7, lr}
 8009792:	b082      	sub	sp, #8
 8009794:	af00      	add	r7, sp, #0
 8009796:	4603      	mov	r3, r0
 8009798:	6039      	str	r1, [r7, #0]
 800979a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800979c:	683a      	ldr	r2, [r7, #0]
 800979e:	4904      	ldr	r1, [pc, #16]	; (80097b0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80097a0:	4804      	ldr	r0, [pc, #16]	; (80097b4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80097a2:	f7ff fddc 	bl	800935e <USBD_GetString>
  return USBD_StrDesc;
 80097a6:	4b02      	ldr	r3, [pc, #8]	; (80097b0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80097a8:	4618      	mov	r0, r3
 80097aa:	3708      	adds	r7, #8
 80097ac:	46bd      	mov	sp, r7
 80097ae:	bd80      	pop	{r7, pc}
 80097b0:	20001b74 	.word	0x20001b74
 80097b4:	0800db68 	.word	0x0800db68

080097b8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80097b8:	b580      	push	{r7, lr}
 80097ba:	b082      	sub	sp, #8
 80097bc:	af00      	add	r7, sp, #0
 80097be:	4603      	mov	r3, r0
 80097c0:	6039      	str	r1, [r7, #0]
 80097c2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80097c4:	683b      	ldr	r3, [r7, #0]
 80097c6:	221a      	movs	r2, #26
 80097c8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80097ca:	f000 f855 	bl	8009878 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80097ce:	4b02      	ldr	r3, [pc, #8]	; (80097d8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80097d0:	4618      	mov	r0, r3
 80097d2:	3708      	adds	r7, #8
 80097d4:	46bd      	mov	sp, r7
 80097d6:	bd80      	pop	{r7, pc}
 80097d8:	20000184 	.word	0x20000184

080097dc <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80097dc:	b580      	push	{r7, lr}
 80097de:	b082      	sub	sp, #8
 80097e0:	af00      	add	r7, sp, #0
 80097e2:	4603      	mov	r3, r0
 80097e4:	6039      	str	r1, [r7, #0]
 80097e6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80097e8:	79fb      	ldrb	r3, [r7, #7]
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	d105      	bne.n	80097fa <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80097ee:	683a      	ldr	r2, [r7, #0]
 80097f0:	4907      	ldr	r1, [pc, #28]	; (8009810 <USBD_FS_ConfigStrDescriptor+0x34>)
 80097f2:	4808      	ldr	r0, [pc, #32]	; (8009814 <USBD_FS_ConfigStrDescriptor+0x38>)
 80097f4:	f7ff fdb3 	bl	800935e <USBD_GetString>
 80097f8:	e004      	b.n	8009804 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80097fa:	683a      	ldr	r2, [r7, #0]
 80097fc:	4904      	ldr	r1, [pc, #16]	; (8009810 <USBD_FS_ConfigStrDescriptor+0x34>)
 80097fe:	4805      	ldr	r0, [pc, #20]	; (8009814 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009800:	f7ff fdad 	bl	800935e <USBD_GetString>
  }
  return USBD_StrDesc;
 8009804:	4b02      	ldr	r3, [pc, #8]	; (8009810 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8009806:	4618      	mov	r0, r3
 8009808:	3708      	adds	r7, #8
 800980a:	46bd      	mov	sp, r7
 800980c:	bd80      	pop	{r7, pc}
 800980e:	bf00      	nop
 8009810:	20001b74 	.word	0x20001b74
 8009814:	0800db7c 	.word	0x0800db7c

08009818 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009818:	b580      	push	{r7, lr}
 800981a:	b082      	sub	sp, #8
 800981c:	af00      	add	r7, sp, #0
 800981e:	4603      	mov	r3, r0
 8009820:	6039      	str	r1, [r7, #0]
 8009822:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009824:	79fb      	ldrb	r3, [r7, #7]
 8009826:	2b00      	cmp	r3, #0
 8009828:	d105      	bne.n	8009836 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800982a:	683a      	ldr	r2, [r7, #0]
 800982c:	4907      	ldr	r1, [pc, #28]	; (800984c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800982e:	4808      	ldr	r0, [pc, #32]	; (8009850 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009830:	f7ff fd95 	bl	800935e <USBD_GetString>
 8009834:	e004      	b.n	8009840 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009836:	683a      	ldr	r2, [r7, #0]
 8009838:	4904      	ldr	r1, [pc, #16]	; (800984c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800983a:	4805      	ldr	r0, [pc, #20]	; (8009850 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800983c:	f7ff fd8f 	bl	800935e <USBD_GetString>
  }
  return USBD_StrDesc;
 8009840:	4b02      	ldr	r3, [pc, #8]	; (800984c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8009842:	4618      	mov	r0, r3
 8009844:	3708      	adds	r7, #8
 8009846:	46bd      	mov	sp, r7
 8009848:	bd80      	pop	{r7, pc}
 800984a:	bf00      	nop
 800984c:	20001b74 	.word	0x20001b74
 8009850:	0800db88 	.word	0x0800db88

08009854 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009854:	b480      	push	{r7}
 8009856:	b083      	sub	sp, #12
 8009858:	af00      	add	r7, sp, #0
 800985a:	4603      	mov	r3, r0
 800985c:	6039      	str	r1, [r7, #0]
 800985e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 8009860:	683b      	ldr	r3, [r7, #0]
 8009862:	220c      	movs	r2, #12
 8009864:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 8009866:	4b03      	ldr	r3, [pc, #12]	; (8009874 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 8009868:	4618      	mov	r0, r3
 800986a:	370c      	adds	r7, #12
 800986c:	46bd      	mov	sp, r7
 800986e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009872:	4770      	bx	lr
 8009874:	20000174 	.word	0x20000174

08009878 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009878:	b580      	push	{r7, lr}
 800987a:	b084      	sub	sp, #16
 800987c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800987e:	4b0f      	ldr	r3, [pc, #60]	; (80098bc <Get_SerialNum+0x44>)
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009884:	4b0e      	ldr	r3, [pc, #56]	; (80098c0 <Get_SerialNum+0x48>)
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800988a:	4b0e      	ldr	r3, [pc, #56]	; (80098c4 <Get_SerialNum+0x4c>)
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009890:	68fa      	ldr	r2, [r7, #12]
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	4413      	add	r3, r2
 8009896:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009898:	68fb      	ldr	r3, [r7, #12]
 800989a:	2b00      	cmp	r3, #0
 800989c:	d009      	beq.n	80098b2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800989e:	2208      	movs	r2, #8
 80098a0:	4909      	ldr	r1, [pc, #36]	; (80098c8 <Get_SerialNum+0x50>)
 80098a2:	68f8      	ldr	r0, [r7, #12]
 80098a4:	f000 f814 	bl	80098d0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80098a8:	2204      	movs	r2, #4
 80098aa:	4908      	ldr	r1, [pc, #32]	; (80098cc <Get_SerialNum+0x54>)
 80098ac:	68b8      	ldr	r0, [r7, #8]
 80098ae:	f000 f80f 	bl	80098d0 <IntToUnicode>
  }
}
 80098b2:	bf00      	nop
 80098b4:	3710      	adds	r7, #16
 80098b6:	46bd      	mov	sp, r7
 80098b8:	bd80      	pop	{r7, pc}
 80098ba:	bf00      	nop
 80098bc:	1fff7a10 	.word	0x1fff7a10
 80098c0:	1fff7a14 	.word	0x1fff7a14
 80098c4:	1fff7a18 	.word	0x1fff7a18
 80098c8:	20000186 	.word	0x20000186
 80098cc:	20000196 	.word	0x20000196

080098d0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80098d0:	b480      	push	{r7}
 80098d2:	b087      	sub	sp, #28
 80098d4:	af00      	add	r7, sp, #0
 80098d6:	60f8      	str	r0, [r7, #12]
 80098d8:	60b9      	str	r1, [r7, #8]
 80098da:	4613      	mov	r3, r2
 80098dc:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80098de:	2300      	movs	r3, #0
 80098e0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80098e2:	2300      	movs	r3, #0
 80098e4:	75fb      	strb	r3, [r7, #23]
 80098e6:	e027      	b.n	8009938 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80098e8:	68fb      	ldr	r3, [r7, #12]
 80098ea:	0f1b      	lsrs	r3, r3, #28
 80098ec:	2b09      	cmp	r3, #9
 80098ee:	d80b      	bhi.n	8009908 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80098f0:	68fb      	ldr	r3, [r7, #12]
 80098f2:	0f1b      	lsrs	r3, r3, #28
 80098f4:	b2da      	uxtb	r2, r3
 80098f6:	7dfb      	ldrb	r3, [r7, #23]
 80098f8:	005b      	lsls	r3, r3, #1
 80098fa:	4619      	mov	r1, r3
 80098fc:	68bb      	ldr	r3, [r7, #8]
 80098fe:	440b      	add	r3, r1
 8009900:	3230      	adds	r2, #48	; 0x30
 8009902:	b2d2      	uxtb	r2, r2
 8009904:	701a      	strb	r2, [r3, #0]
 8009906:	e00a      	b.n	800991e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009908:	68fb      	ldr	r3, [r7, #12]
 800990a:	0f1b      	lsrs	r3, r3, #28
 800990c:	b2da      	uxtb	r2, r3
 800990e:	7dfb      	ldrb	r3, [r7, #23]
 8009910:	005b      	lsls	r3, r3, #1
 8009912:	4619      	mov	r1, r3
 8009914:	68bb      	ldr	r3, [r7, #8]
 8009916:	440b      	add	r3, r1
 8009918:	3237      	adds	r2, #55	; 0x37
 800991a:	b2d2      	uxtb	r2, r2
 800991c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800991e:	68fb      	ldr	r3, [r7, #12]
 8009920:	011b      	lsls	r3, r3, #4
 8009922:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009924:	7dfb      	ldrb	r3, [r7, #23]
 8009926:	005b      	lsls	r3, r3, #1
 8009928:	3301      	adds	r3, #1
 800992a:	68ba      	ldr	r2, [r7, #8]
 800992c:	4413      	add	r3, r2
 800992e:	2200      	movs	r2, #0
 8009930:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8009932:	7dfb      	ldrb	r3, [r7, #23]
 8009934:	3301      	adds	r3, #1
 8009936:	75fb      	strb	r3, [r7, #23]
 8009938:	7dfa      	ldrb	r2, [r7, #23]
 800993a:	79fb      	ldrb	r3, [r7, #7]
 800993c:	429a      	cmp	r2, r3
 800993e:	d3d3      	bcc.n	80098e8 <IntToUnicode+0x18>
  }
}
 8009940:	bf00      	nop
 8009942:	371c      	adds	r7, #28
 8009944:	46bd      	mov	sp, r7
 8009946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800994a:	4770      	bx	lr

0800994c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800994c:	b580      	push	{r7, lr}
 800994e:	b08a      	sub	sp, #40	; 0x28
 8009950:	af00      	add	r7, sp, #0
 8009952:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009954:	f107 0314 	add.w	r3, r7, #20
 8009958:	2200      	movs	r2, #0
 800995a:	601a      	str	r2, [r3, #0]
 800995c:	605a      	str	r2, [r3, #4]
 800995e:	609a      	str	r2, [r3, #8]
 8009960:	60da      	str	r2, [r3, #12]
 8009962:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800996c:	d147      	bne.n	80099fe <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800996e:	2300      	movs	r3, #0
 8009970:	613b      	str	r3, [r7, #16]
 8009972:	4b25      	ldr	r3, [pc, #148]	; (8009a08 <HAL_PCD_MspInit+0xbc>)
 8009974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009976:	4a24      	ldr	r2, [pc, #144]	; (8009a08 <HAL_PCD_MspInit+0xbc>)
 8009978:	f043 0301 	orr.w	r3, r3, #1
 800997c:	6313      	str	r3, [r2, #48]	; 0x30
 800997e:	4b22      	ldr	r3, [pc, #136]	; (8009a08 <HAL_PCD_MspInit+0xbc>)
 8009980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009982:	f003 0301 	and.w	r3, r3, #1
 8009986:	613b      	str	r3, [r7, #16]
 8009988:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration    
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800998a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800998e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8009990:	2300      	movs	r3, #0
 8009992:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009994:	2300      	movs	r3, #0
 8009996:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009998:	f107 0314 	add.w	r3, r7, #20
 800999c:	4619      	mov	r1, r3
 800999e:	481b      	ldr	r0, [pc, #108]	; (8009a0c <HAL_PCD_MspInit+0xc0>)
 80099a0:	f7f9 facc 	bl	8002f3c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80099a4:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80099a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80099aa:	2302      	movs	r3, #2
 80099ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80099ae:	2300      	movs	r3, #0
 80099b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80099b2:	2303      	movs	r3, #3
 80099b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80099b6:	230a      	movs	r3, #10
 80099b8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80099ba:	f107 0314 	add.w	r3, r7, #20
 80099be:	4619      	mov	r1, r3
 80099c0:	4812      	ldr	r0, [pc, #72]	; (8009a0c <HAL_PCD_MspInit+0xc0>)
 80099c2:	f7f9 fabb 	bl	8002f3c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80099c6:	4b10      	ldr	r3, [pc, #64]	; (8009a08 <HAL_PCD_MspInit+0xbc>)
 80099c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80099ca:	4a0f      	ldr	r2, [pc, #60]	; (8009a08 <HAL_PCD_MspInit+0xbc>)
 80099cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80099d0:	6353      	str	r3, [r2, #52]	; 0x34
 80099d2:	2300      	movs	r3, #0
 80099d4:	60fb      	str	r3, [r7, #12]
 80099d6:	4b0c      	ldr	r3, [pc, #48]	; (8009a08 <HAL_PCD_MspInit+0xbc>)
 80099d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80099da:	4a0b      	ldr	r2, [pc, #44]	; (8009a08 <HAL_PCD_MspInit+0xbc>)
 80099dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80099e0:	6453      	str	r3, [r2, #68]	; 0x44
 80099e2:	4b09      	ldr	r3, [pc, #36]	; (8009a08 <HAL_PCD_MspInit+0xbc>)
 80099e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80099e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80099ea:	60fb      	str	r3, [r7, #12]
 80099ec:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80099ee:	2200      	movs	r2, #0
 80099f0:	2100      	movs	r1, #0
 80099f2:	2043      	movs	r0, #67	; 0x43
 80099f4:	f7f9 fa6b 	bl	8002ece <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80099f8:	2043      	movs	r0, #67	; 0x43
 80099fa:	f7f9 fa84 	bl	8002f06 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80099fe:	bf00      	nop
 8009a00:	3728      	adds	r7, #40	; 0x28
 8009a02:	46bd      	mov	sp, r7
 8009a04:	bd80      	pop	{r7, pc}
 8009a06:	bf00      	nop
 8009a08:	40023800 	.word	0x40023800
 8009a0c:	40020000 	.word	0x40020000

08009a10 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009a10:	b580      	push	{r7, lr}
 8009a12:	b082      	sub	sp, #8
 8009a14:	af00      	add	r7, sp, #0
 8009a16:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8009a24:	4619      	mov	r1, r3
 8009a26:	4610      	mov	r0, r2
 8009a28:	f7fe fcec 	bl	8008404 <USBD_LL_SetupStage>
}
 8009a2c:	bf00      	nop
 8009a2e:	3708      	adds	r7, #8
 8009a30:	46bd      	mov	sp, r7
 8009a32:	bd80      	pop	{r7, pc}

08009a34 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009a34:	b580      	push	{r7, lr}
 8009a36:	b082      	sub	sp, #8
 8009a38:	af00      	add	r7, sp, #0
 8009a3a:	6078      	str	r0, [r7, #4]
 8009a3c:	460b      	mov	r3, r1
 8009a3e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8009a46:	78fa      	ldrb	r2, [r7, #3]
 8009a48:	6879      	ldr	r1, [r7, #4]
 8009a4a:	4613      	mov	r3, r2
 8009a4c:	00db      	lsls	r3, r3, #3
 8009a4e:	1a9b      	subs	r3, r3, r2
 8009a50:	009b      	lsls	r3, r3, #2
 8009a52:	440b      	add	r3, r1
 8009a54:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8009a58:	681a      	ldr	r2, [r3, #0]
 8009a5a:	78fb      	ldrb	r3, [r7, #3]
 8009a5c:	4619      	mov	r1, r3
 8009a5e:	f7fe fd24 	bl	80084aa <USBD_LL_DataOutStage>
}
 8009a62:	bf00      	nop
 8009a64:	3708      	adds	r7, #8
 8009a66:	46bd      	mov	sp, r7
 8009a68:	bd80      	pop	{r7, pc}

08009a6a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009a6a:	b580      	push	{r7, lr}
 8009a6c:	b082      	sub	sp, #8
 8009a6e:	af00      	add	r7, sp, #0
 8009a70:	6078      	str	r0, [r7, #4]
 8009a72:	460b      	mov	r3, r1
 8009a74:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8009a7c:	78fa      	ldrb	r2, [r7, #3]
 8009a7e:	6879      	ldr	r1, [r7, #4]
 8009a80:	4613      	mov	r3, r2
 8009a82:	00db      	lsls	r3, r3, #3
 8009a84:	1a9b      	subs	r3, r3, r2
 8009a86:	009b      	lsls	r3, r3, #2
 8009a88:	440b      	add	r3, r1
 8009a8a:	3348      	adds	r3, #72	; 0x48
 8009a8c:	681a      	ldr	r2, [r3, #0]
 8009a8e:	78fb      	ldrb	r3, [r7, #3]
 8009a90:	4619      	mov	r1, r3
 8009a92:	f7fe fd6d 	bl	8008570 <USBD_LL_DataInStage>
}
 8009a96:	bf00      	nop
 8009a98:	3708      	adds	r7, #8
 8009a9a:	46bd      	mov	sp, r7
 8009a9c:	bd80      	pop	{r7, pc}

08009a9e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009a9e:	b580      	push	{r7, lr}
 8009aa0:	b082      	sub	sp, #8
 8009aa2:	af00      	add	r7, sp, #0
 8009aa4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009aac:	4618      	mov	r0, r3
 8009aae:	f7fe fe71 	bl	8008794 <USBD_LL_SOF>
}
 8009ab2:	bf00      	nop
 8009ab4:	3708      	adds	r7, #8
 8009ab6:	46bd      	mov	sp, r7
 8009ab8:	bd80      	pop	{r7, pc}

08009aba <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 8009aba:	b580      	push	{r7, lr}
 8009abc:	b084      	sub	sp, #16
 8009abe:	af00      	add	r7, sp, #0
 8009ac0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009ac2:	2301      	movs	r3, #1
 8009ac4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	68db      	ldr	r3, [r3, #12]
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	d102      	bne.n	8009ad4 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8009ace:	2300      	movs	r3, #0
 8009ad0:	73fb      	strb	r3, [r7, #15]
 8009ad2:	e008      	b.n	8009ae6 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	68db      	ldr	r3, [r3, #12]
 8009ad8:	2b02      	cmp	r3, #2
 8009ada:	d102      	bne.n	8009ae2 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8009adc:	2301      	movs	r3, #1
 8009ade:	73fb      	strb	r3, [r7, #15]
 8009ae0:	e001      	b.n	8009ae6 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8009ae2:	f7f7 fe51 	bl	8001788 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009aec:	7bfa      	ldrb	r2, [r7, #15]
 8009aee:	4611      	mov	r1, r2
 8009af0:	4618      	mov	r0, r3
 8009af2:	f7fe fe14 	bl	800871e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009afc:	4618      	mov	r0, r3
 8009afe:	f7fe fdcd 	bl	800869c <USBD_LL_Reset>
}
 8009b02:	bf00      	nop
 8009b04:	3710      	adds	r7, #16
 8009b06:	46bd      	mov	sp, r7
 8009b08:	bd80      	pop	{r7, pc}
	...

08009b0c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009b0c:	b580      	push	{r7, lr}
 8009b0e:	b082      	sub	sp, #8
 8009b10:	af00      	add	r7, sp, #0
 8009b12:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009b1a:	4618      	mov	r0, r3
 8009b1c:	f7fe fe0f 	bl	800873e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009b28:	681b      	ldr	r3, [r3, #0]
 8009b2a:	687a      	ldr	r2, [r7, #4]
 8009b2c:	6812      	ldr	r2, [r2, #0]
 8009b2e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009b32:	f043 0301 	orr.w	r3, r3, #1
 8009b36:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	6a1b      	ldr	r3, [r3, #32]
 8009b3c:	2b00      	cmp	r3, #0
 8009b3e:	d005      	beq.n	8009b4c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009b40:	4b04      	ldr	r3, [pc, #16]	; (8009b54 <HAL_PCD_SuspendCallback+0x48>)
 8009b42:	691b      	ldr	r3, [r3, #16]
 8009b44:	4a03      	ldr	r2, [pc, #12]	; (8009b54 <HAL_PCD_SuspendCallback+0x48>)
 8009b46:	f043 0306 	orr.w	r3, r3, #6
 8009b4a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009b4c:	bf00      	nop
 8009b4e:	3708      	adds	r7, #8
 8009b50:	46bd      	mov	sp, r7
 8009b52:	bd80      	pop	{r7, pc}
 8009b54:	e000ed00 	.word	0xe000ed00

08009b58 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009b58:	b580      	push	{r7, lr}
 8009b5a:	b082      	sub	sp, #8
 8009b5c:	af00      	add	r7, sp, #0
 8009b5e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009b66:	4618      	mov	r0, r3
 8009b68:	f7fe fdfe 	bl	8008768 <USBD_LL_Resume>
}
 8009b6c:	bf00      	nop
 8009b6e:	3708      	adds	r7, #8
 8009b70:	46bd      	mov	sp, r7
 8009b72:	bd80      	pop	{r7, pc}

08009b74 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009b74:	b580      	push	{r7, lr}
 8009b76:	b082      	sub	sp, #8
 8009b78:	af00      	add	r7, sp, #0
 8009b7a:	6078      	str	r0, [r7, #4]
 8009b7c:	460b      	mov	r3, r1
 8009b7e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009b86:	78fa      	ldrb	r2, [r7, #3]
 8009b88:	4611      	mov	r1, r2
 8009b8a:	4618      	mov	r0, r3
 8009b8c:	f7fe fe29 	bl	80087e2 <USBD_LL_IsoOUTIncomplete>
}
 8009b90:	bf00      	nop
 8009b92:	3708      	adds	r7, #8
 8009b94:	46bd      	mov	sp, r7
 8009b96:	bd80      	pop	{r7, pc}

08009b98 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009b98:	b580      	push	{r7, lr}
 8009b9a:	b082      	sub	sp, #8
 8009b9c:	af00      	add	r7, sp, #0
 8009b9e:	6078      	str	r0, [r7, #4]
 8009ba0:	460b      	mov	r3, r1
 8009ba2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009baa:	78fa      	ldrb	r2, [r7, #3]
 8009bac:	4611      	mov	r1, r2
 8009bae:	4618      	mov	r0, r3
 8009bb0:	f7fe fe0a 	bl	80087c8 <USBD_LL_IsoINIncomplete>
}
 8009bb4:	bf00      	nop
 8009bb6:	3708      	adds	r7, #8
 8009bb8:	46bd      	mov	sp, r7
 8009bba:	bd80      	pop	{r7, pc}

08009bbc <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009bbc:	b580      	push	{r7, lr}
 8009bbe:	b082      	sub	sp, #8
 8009bc0:	af00      	add	r7, sp, #0
 8009bc2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009bca:	4618      	mov	r0, r3
 8009bcc:	f7fe fe16 	bl	80087fc <USBD_LL_DevConnected>
}
 8009bd0:	bf00      	nop
 8009bd2:	3708      	adds	r7, #8
 8009bd4:	46bd      	mov	sp, r7
 8009bd6:	bd80      	pop	{r7, pc}

08009bd8 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009bd8:	b580      	push	{r7, lr}
 8009bda:	b082      	sub	sp, #8
 8009bdc:	af00      	add	r7, sp, #0
 8009bde:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009be6:	4618      	mov	r0, r3
 8009be8:	f7fe fe13 	bl	8008812 <USBD_LL_DevDisconnected>
}
 8009bec:	bf00      	nop
 8009bee:	3708      	adds	r7, #8
 8009bf0:	46bd      	mov	sp, r7
 8009bf2:	bd80      	pop	{r7, pc}

08009bf4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009bf4:	b580      	push	{r7, lr}
 8009bf6:	b082      	sub	sp, #8
 8009bf8:	af00      	add	r7, sp, #0
 8009bfa:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	781b      	ldrb	r3, [r3, #0]
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	d13c      	bne.n	8009c7e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8009c04:	4a20      	ldr	r2, [pc, #128]	; (8009c88 <USBD_LL_Init+0x94>)
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	4a1e      	ldr	r2, [pc, #120]	; (8009c88 <USBD_LL_Init+0x94>)
 8009c10:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
  
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8009c14:	4b1c      	ldr	r3, [pc, #112]	; (8009c88 <USBD_LL_Init+0x94>)
 8009c16:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8009c1a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8009c1c:	4b1a      	ldr	r3, [pc, #104]	; (8009c88 <USBD_LL_Init+0x94>)
 8009c1e:	2206      	movs	r2, #6
 8009c20:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8009c22:	4b19      	ldr	r3, [pc, #100]	; (8009c88 <USBD_LL_Init+0x94>)
 8009c24:	2202      	movs	r2, #2
 8009c26:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8009c28:	4b17      	ldr	r3, [pc, #92]	; (8009c88 <USBD_LL_Init+0x94>)
 8009c2a:	2200      	movs	r2, #0
 8009c2c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8009c2e:	4b16      	ldr	r3, [pc, #88]	; (8009c88 <USBD_LL_Init+0x94>)
 8009c30:	2202      	movs	r2, #2
 8009c32:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8009c34:	4b14      	ldr	r3, [pc, #80]	; (8009c88 <USBD_LL_Init+0x94>)
 8009c36:	2200      	movs	r2, #0
 8009c38:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8009c3a:	4b13      	ldr	r3, [pc, #76]	; (8009c88 <USBD_LL_Init+0x94>)
 8009c3c:	2200      	movs	r2, #0
 8009c3e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8009c40:	4b11      	ldr	r3, [pc, #68]	; (8009c88 <USBD_LL_Init+0x94>)
 8009c42:	2200      	movs	r2, #0
 8009c44:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8009c46:	4b10      	ldr	r3, [pc, #64]	; (8009c88 <USBD_LL_Init+0x94>)
 8009c48:	2201      	movs	r2, #1
 8009c4a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8009c4c:	4b0e      	ldr	r3, [pc, #56]	; (8009c88 <USBD_LL_Init+0x94>)
 8009c4e:	2200      	movs	r2, #0
 8009c50:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8009c52:	480d      	ldr	r0, [pc, #52]	; (8009c88 <USBD_LL_Init+0x94>)
 8009c54:	f7f9 fb35 	bl	80032c2 <HAL_PCD_Init>
 8009c58:	4603      	mov	r3, r0
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	d001      	beq.n	8009c62 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8009c5e:	f7f7 fd93 	bl	8001788 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8009c62:	2180      	movs	r1, #128	; 0x80
 8009c64:	4808      	ldr	r0, [pc, #32]	; (8009c88 <USBD_LL_Init+0x94>)
 8009c66:	f7fa fcc6 	bl	80045f6 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8009c6a:	2240      	movs	r2, #64	; 0x40
 8009c6c:	2100      	movs	r1, #0
 8009c6e:	4806      	ldr	r0, [pc, #24]	; (8009c88 <USBD_LL_Init+0x94>)
 8009c70:	f7fa fc7a 	bl	8004568 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8009c74:	2280      	movs	r2, #128	; 0x80
 8009c76:	2101      	movs	r1, #1
 8009c78:	4803      	ldr	r0, [pc, #12]	; (8009c88 <USBD_LL_Init+0x94>)
 8009c7a:	f7fa fc75 	bl	8004568 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8009c7e:	2300      	movs	r3, #0
}
 8009c80:	4618      	mov	r0, r3
 8009c82:	3708      	adds	r7, #8
 8009c84:	46bd      	mov	sp, r7
 8009c86:	bd80      	pop	{r7, pc}
 8009c88:	20001d74 	.word	0x20001d74

08009c8c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver. 
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009c8c:	b580      	push	{r7, lr}
 8009c8e:	b084      	sub	sp, #16
 8009c90:	af00      	add	r7, sp, #0
 8009c92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009c94:	2300      	movs	r3, #0
 8009c96:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009c98:	2300      	movs	r3, #0
 8009c9a:	73bb      	strb	r3, [r7, #14]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009ca2:	4618      	mov	r0, r3
 8009ca4:	f7f9 fc31 	bl	800350a <HAL_PCD_Start>
 8009ca8:	4603      	mov	r3, r0
 8009caa:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);     
 8009cac:	7bfb      	ldrb	r3, [r7, #15]
 8009cae:	4618      	mov	r0, r3
 8009cb0:	f000 f978 	bl	8009fa4 <USBD_Get_USB_Status>
 8009cb4:	4603      	mov	r3, r0
 8009cb6:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8009cb8:	7bbb      	ldrb	r3, [r7, #14]
}
 8009cba:	4618      	mov	r0, r3
 8009cbc:	3710      	adds	r7, #16
 8009cbe:	46bd      	mov	sp, r7
 8009cc0:	bd80      	pop	{r7, pc}

08009cc2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009cc2:	b580      	push	{r7, lr}
 8009cc4:	b084      	sub	sp, #16
 8009cc6:	af00      	add	r7, sp, #0
 8009cc8:	6078      	str	r0, [r7, #4]
 8009cca:	4608      	mov	r0, r1
 8009ccc:	4611      	mov	r1, r2
 8009cce:	461a      	mov	r2, r3
 8009cd0:	4603      	mov	r3, r0
 8009cd2:	70fb      	strb	r3, [r7, #3]
 8009cd4:	460b      	mov	r3, r1
 8009cd6:	70bb      	strb	r3, [r7, #2]
 8009cd8:	4613      	mov	r3, r2
 8009cda:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009cdc:	2300      	movs	r3, #0
 8009cde:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009ce0:	2300      	movs	r3, #0
 8009ce2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009cea:	78bb      	ldrb	r3, [r7, #2]
 8009cec:	883a      	ldrh	r2, [r7, #0]
 8009cee:	78f9      	ldrb	r1, [r7, #3]
 8009cf0:	f7fa f842 	bl	8003d78 <HAL_PCD_EP_Open>
 8009cf4:	4603      	mov	r3, r0
 8009cf6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009cf8:	7bfb      	ldrb	r3, [r7, #15]
 8009cfa:	4618      	mov	r0, r3
 8009cfc:	f000 f952 	bl	8009fa4 <USBD_Get_USB_Status>
 8009d00:	4603      	mov	r3, r0
 8009d02:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8009d04:	7bbb      	ldrb	r3, [r7, #14]
}
 8009d06:	4618      	mov	r0, r3
 8009d08:	3710      	adds	r7, #16
 8009d0a:	46bd      	mov	sp, r7
 8009d0c:	bd80      	pop	{r7, pc}

08009d0e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009d0e:	b580      	push	{r7, lr}
 8009d10:	b084      	sub	sp, #16
 8009d12:	af00      	add	r7, sp, #0
 8009d14:	6078      	str	r0, [r7, #4]
 8009d16:	460b      	mov	r3, r1
 8009d18:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009d1a:	2300      	movs	r3, #0
 8009d1c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009d1e:	2300      	movs	r3, #0
 8009d20:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009d28:	78fa      	ldrb	r2, [r7, #3]
 8009d2a:	4611      	mov	r1, r2
 8009d2c:	4618      	mov	r0, r3
 8009d2e:	f7fa f88b 	bl	8003e48 <HAL_PCD_EP_Close>
 8009d32:	4603      	mov	r3, r0
 8009d34:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);    
 8009d36:	7bfb      	ldrb	r3, [r7, #15]
 8009d38:	4618      	mov	r0, r3
 8009d3a:	f000 f933 	bl	8009fa4 <USBD_Get_USB_Status>
 8009d3e:	4603      	mov	r3, r0
 8009d40:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 8009d42:	7bbb      	ldrb	r3, [r7, #14]
}
 8009d44:	4618      	mov	r0, r3
 8009d46:	3710      	adds	r7, #16
 8009d48:	46bd      	mov	sp, r7
 8009d4a:	bd80      	pop	{r7, pc}

08009d4c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009d4c:	b580      	push	{r7, lr}
 8009d4e:	b084      	sub	sp, #16
 8009d50:	af00      	add	r7, sp, #0
 8009d52:	6078      	str	r0, [r7, #4]
 8009d54:	460b      	mov	r3, r1
 8009d56:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009d58:	2300      	movs	r3, #0
 8009d5a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009d5c:	2300      	movs	r3, #0
 8009d5e:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009d66:	78fa      	ldrb	r2, [r7, #3]
 8009d68:	4611      	mov	r1, r2
 8009d6a:	4618      	mov	r0, r3
 8009d6c:	f7fa f963 	bl	8004036 <HAL_PCD_EP_SetStall>
 8009d70:	4603      	mov	r3, r0
 8009d72:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009d74:	7bfb      	ldrb	r3, [r7, #15]
 8009d76:	4618      	mov	r0, r3
 8009d78:	f000 f914 	bl	8009fa4 <USBD_Get_USB_Status>
 8009d7c:	4603      	mov	r3, r0
 8009d7e:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 8009d80:	7bbb      	ldrb	r3, [r7, #14]
}
 8009d82:	4618      	mov	r0, r3
 8009d84:	3710      	adds	r7, #16
 8009d86:	46bd      	mov	sp, r7
 8009d88:	bd80      	pop	{r7, pc}

08009d8a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009d8a:	b580      	push	{r7, lr}
 8009d8c:	b084      	sub	sp, #16
 8009d8e:	af00      	add	r7, sp, #0
 8009d90:	6078      	str	r0, [r7, #4]
 8009d92:	460b      	mov	r3, r1
 8009d94:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009d96:	2300      	movs	r3, #0
 8009d98:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009d9a:	2300      	movs	r3, #0
 8009d9c:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009da4:	78fa      	ldrb	r2, [r7, #3]
 8009da6:	4611      	mov	r1, r2
 8009da8:	4618      	mov	r0, r3
 8009daa:	f7fa f9a8 	bl	80040fe <HAL_PCD_EP_ClrStall>
 8009dae:	4603      	mov	r3, r0
 8009db0:	73fb      	strb	r3, [r7, #15]
    
  usb_status =  USBD_Get_USB_Status(hal_status);  
 8009db2:	7bfb      	ldrb	r3, [r7, #15]
 8009db4:	4618      	mov	r0, r3
 8009db6:	f000 f8f5 	bl	8009fa4 <USBD_Get_USB_Status>
 8009dba:	4603      	mov	r3, r0
 8009dbc:	73bb      	strb	r3, [r7, #14]
  
  return usb_status; 
 8009dbe:	7bbb      	ldrb	r3, [r7, #14]
}
 8009dc0:	4618      	mov	r0, r3
 8009dc2:	3710      	adds	r7, #16
 8009dc4:	46bd      	mov	sp, r7
 8009dc6:	bd80      	pop	{r7, pc}

08009dc8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009dc8:	b480      	push	{r7}
 8009dca:	b085      	sub	sp, #20
 8009dcc:	af00      	add	r7, sp, #0
 8009dce:	6078      	str	r0, [r7, #4]
 8009dd0:	460b      	mov	r3, r1
 8009dd2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009dda:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 8009ddc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009de0:	2b00      	cmp	r3, #0
 8009de2:	da0b      	bge.n	8009dfc <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8009de4:	78fb      	ldrb	r3, [r7, #3]
 8009de6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009dea:	68f9      	ldr	r1, [r7, #12]
 8009dec:	4613      	mov	r3, r2
 8009dee:	00db      	lsls	r3, r3, #3
 8009df0:	1a9b      	subs	r3, r3, r2
 8009df2:	009b      	lsls	r3, r3, #2
 8009df4:	440b      	add	r3, r1
 8009df6:	333e      	adds	r3, #62	; 0x3e
 8009df8:	781b      	ldrb	r3, [r3, #0]
 8009dfa:	e00b      	b.n	8009e14 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8009dfc:	78fb      	ldrb	r3, [r7, #3]
 8009dfe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009e02:	68f9      	ldr	r1, [r7, #12]
 8009e04:	4613      	mov	r3, r2
 8009e06:	00db      	lsls	r3, r3, #3
 8009e08:	1a9b      	subs	r3, r3, r2
 8009e0a:	009b      	lsls	r3, r3, #2
 8009e0c:	440b      	add	r3, r1
 8009e0e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8009e12:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009e14:	4618      	mov	r0, r3
 8009e16:	3714      	adds	r7, #20
 8009e18:	46bd      	mov	sp, r7
 8009e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e1e:	4770      	bx	lr

08009e20 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009e20:	b580      	push	{r7, lr}
 8009e22:	b084      	sub	sp, #16
 8009e24:	af00      	add	r7, sp, #0
 8009e26:	6078      	str	r0, [r7, #4]
 8009e28:	460b      	mov	r3, r1
 8009e2a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009e2c:	2300      	movs	r3, #0
 8009e2e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009e30:	2300      	movs	r3, #0
 8009e32:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009e3a:	78fa      	ldrb	r2, [r7, #3]
 8009e3c:	4611      	mov	r1, r2
 8009e3e:	4618      	mov	r0, r3
 8009e40:	f7f9 ff75 	bl	8003d2e <HAL_PCD_SetAddress>
 8009e44:	4603      	mov	r3, r0
 8009e46:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);
 8009e48:	7bfb      	ldrb	r3, [r7, #15]
 8009e4a:	4618      	mov	r0, r3
 8009e4c:	f000 f8aa 	bl	8009fa4 <USBD_Get_USB_Status>
 8009e50:	4603      	mov	r3, r0
 8009e52:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 8009e54:	7bbb      	ldrb	r3, [r7, #14]
}
 8009e56:	4618      	mov	r0, r3
 8009e58:	3710      	adds	r7, #16
 8009e5a:	46bd      	mov	sp, r7
 8009e5c:	bd80      	pop	{r7, pc}

08009e5e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009e5e:	b580      	push	{r7, lr}
 8009e60:	b086      	sub	sp, #24
 8009e62:	af00      	add	r7, sp, #0
 8009e64:	60f8      	str	r0, [r7, #12]
 8009e66:	607a      	str	r2, [r7, #4]
 8009e68:	603b      	str	r3, [r7, #0]
 8009e6a:	460b      	mov	r3, r1
 8009e6c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009e6e:	2300      	movs	r3, #0
 8009e70:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009e72:	2300      	movs	r3, #0
 8009e74:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009e76:	68fb      	ldr	r3, [r7, #12]
 8009e78:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009e7c:	7af9      	ldrb	r1, [r7, #11]
 8009e7e:	683b      	ldr	r3, [r7, #0]
 8009e80:	687a      	ldr	r2, [r7, #4]
 8009e82:	f7fa f88e 	bl	8003fa2 <HAL_PCD_EP_Transmit>
 8009e86:	4603      	mov	r3, r0
 8009e88:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status); 
 8009e8a:	7dfb      	ldrb	r3, [r7, #23]
 8009e8c:	4618      	mov	r0, r3
 8009e8e:	f000 f889 	bl	8009fa4 <USBD_Get_USB_Status>
 8009e92:	4603      	mov	r3, r0
 8009e94:	75bb      	strb	r3, [r7, #22]
  
  return usb_status;    
 8009e96:	7dbb      	ldrb	r3, [r7, #22]
}
 8009e98:	4618      	mov	r0, r3
 8009e9a:	3718      	adds	r7, #24
 8009e9c:	46bd      	mov	sp, r7
 8009e9e:	bd80      	pop	{r7, pc}

08009ea0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009ea0:	b580      	push	{r7, lr}
 8009ea2:	b086      	sub	sp, #24
 8009ea4:	af00      	add	r7, sp, #0
 8009ea6:	60f8      	str	r0, [r7, #12]
 8009ea8:	607a      	str	r2, [r7, #4]
 8009eaa:	603b      	str	r3, [r7, #0]
 8009eac:	460b      	mov	r3, r1
 8009eae:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009eb0:	2300      	movs	r3, #0
 8009eb2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009eb4:	2300      	movs	r3, #0
 8009eb6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009eb8:	68fb      	ldr	r3, [r7, #12]
 8009eba:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009ebe:	7af9      	ldrb	r1, [r7, #11]
 8009ec0:	683b      	ldr	r3, [r7, #0]
 8009ec2:	687a      	ldr	r2, [r7, #4]
 8009ec4:	f7fa f80a 	bl	8003edc <HAL_PCD_EP_Receive>
 8009ec8:	4603      	mov	r3, r0
 8009eca:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status);   
 8009ecc:	7dfb      	ldrb	r3, [r7, #23]
 8009ece:	4618      	mov	r0, r3
 8009ed0:	f000 f868 	bl	8009fa4 <USBD_Get_USB_Status>
 8009ed4:	4603      	mov	r3, r0
 8009ed6:	75bb      	strb	r3, [r7, #22]
  
  return usb_status; 
 8009ed8:	7dbb      	ldrb	r3, [r7, #22]
}
 8009eda:	4618      	mov	r0, r3
 8009edc:	3718      	adds	r7, #24
 8009ede:	46bd      	mov	sp, r7
 8009ee0:	bd80      	pop	{r7, pc}

08009ee2 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009ee2:	b580      	push	{r7, lr}
 8009ee4:	b082      	sub	sp, #8
 8009ee6:	af00      	add	r7, sp, #0
 8009ee8:	6078      	str	r0, [r7, #4]
 8009eea:	460b      	mov	r3, r1
 8009eec:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009ef4:	78fa      	ldrb	r2, [r7, #3]
 8009ef6:	4611      	mov	r1, r2
 8009ef8:	4618      	mov	r0, r3
 8009efa:	f7fa f83a 	bl	8003f72 <HAL_PCD_EP_GetRxCount>
 8009efe:	4603      	mov	r3, r0
}
 8009f00:	4618      	mov	r0, r3
 8009f02:	3708      	adds	r7, #8
 8009f04:	46bd      	mov	sp, r7
 8009f06:	bd80      	pop	{r7, pc}

08009f08 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8009f08:	b580      	push	{r7, lr}
 8009f0a:	b082      	sub	sp, #8
 8009f0c:	af00      	add	r7, sp, #0
 8009f0e:	6078      	str	r0, [r7, #4]
 8009f10:	460b      	mov	r3, r1
 8009f12:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 8009f14:	78fb      	ldrb	r3, [r7, #3]
 8009f16:	2b00      	cmp	r3, #0
 8009f18:	d002      	beq.n	8009f20 <HAL_PCDEx_LPM_Callback+0x18>
 8009f1a:	2b01      	cmp	r3, #1
 8009f1c:	d01f      	beq.n	8009f5e <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;   
  }
}
 8009f1e:	e03b      	b.n	8009f98 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	6a1b      	ldr	r3, [r3, #32]
 8009f24:	2b00      	cmp	r3, #0
 8009f26:	d007      	beq.n	8009f38 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClock_Config();
 8009f28:	f7f7 fa32 	bl	8001390 <SystemClock_Config>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009f2c:	4b1c      	ldr	r3, [pc, #112]	; (8009fa0 <HAL_PCDEx_LPM_Callback+0x98>)
 8009f2e:	691b      	ldr	r3, [r3, #16]
 8009f30:	4a1b      	ldr	r2, [pc, #108]	; (8009fa0 <HAL_PCDEx_LPM_Callback+0x98>)
 8009f32:	f023 0306 	bic.w	r3, r3, #6
 8009f36:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	687a      	ldr	r2, [r7, #4]
 8009f44:	6812      	ldr	r2, [r2, #0]
 8009f46:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009f4a:	f023 0301 	bic.w	r3, r3, #1
 8009f4e:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009f56:	4618      	mov	r0, r3
 8009f58:	f7fe fc06 	bl	8008768 <USBD_LL_Resume>
    break;
 8009f5c:	e01c      	b.n	8009f98 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	681b      	ldr	r3, [r3, #0]
 8009f62:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009f66:	681b      	ldr	r3, [r3, #0]
 8009f68:	687a      	ldr	r2, [r7, #4]
 8009f6a:	6812      	ldr	r2, [r2, #0]
 8009f6c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009f70:	f043 0301 	orr.w	r3, r3, #1
 8009f74:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009f7c:	4618      	mov	r0, r3
 8009f7e:	f7fe fbde 	bl	800873e <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	6a1b      	ldr	r3, [r3, #32]
 8009f86:	2b00      	cmp	r3, #0
 8009f88:	d005      	beq.n	8009f96 <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009f8a:	4b05      	ldr	r3, [pc, #20]	; (8009fa0 <HAL_PCDEx_LPM_Callback+0x98>)
 8009f8c:	691b      	ldr	r3, [r3, #16]
 8009f8e:	4a04      	ldr	r2, [pc, #16]	; (8009fa0 <HAL_PCDEx_LPM_Callback+0x98>)
 8009f90:	f043 0306 	orr.w	r3, r3, #6
 8009f94:	6113      	str	r3, [r2, #16]
    break;   
 8009f96:	bf00      	nop
}
 8009f98:	bf00      	nop
 8009f9a:	3708      	adds	r7, #8
 8009f9c:	46bd      	mov	sp, r7
 8009f9e:	bd80      	pop	{r7, pc}
 8009fa0:	e000ed00 	.word	0xe000ed00

08009fa4 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009fa4:	b480      	push	{r7}
 8009fa6:	b085      	sub	sp, #20
 8009fa8:	af00      	add	r7, sp, #0
 8009faa:	4603      	mov	r3, r0
 8009fac:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009fae:	2300      	movs	r3, #0
 8009fb0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009fb2:	79fb      	ldrb	r3, [r7, #7]
 8009fb4:	2b03      	cmp	r3, #3
 8009fb6:	d817      	bhi.n	8009fe8 <USBD_Get_USB_Status+0x44>
 8009fb8:	a201      	add	r2, pc, #4	; (adr r2, 8009fc0 <USBD_Get_USB_Status+0x1c>)
 8009fba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009fbe:	bf00      	nop
 8009fc0:	08009fd1 	.word	0x08009fd1
 8009fc4:	08009fd7 	.word	0x08009fd7
 8009fc8:	08009fdd 	.word	0x08009fdd
 8009fcc:	08009fe3 	.word	0x08009fe3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009fd0:	2300      	movs	r3, #0
 8009fd2:	73fb      	strb	r3, [r7, #15]
    break;
 8009fd4:	e00b      	b.n	8009fee <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009fd6:	2303      	movs	r3, #3
 8009fd8:	73fb      	strb	r3, [r7, #15]
    break;
 8009fda:	e008      	b.n	8009fee <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009fdc:	2301      	movs	r3, #1
 8009fde:	73fb      	strb	r3, [r7, #15]
    break;
 8009fe0:	e005      	b.n	8009fee <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009fe2:	2303      	movs	r3, #3
 8009fe4:	73fb      	strb	r3, [r7, #15]
    break;
 8009fe6:	e002      	b.n	8009fee <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009fe8:	2303      	movs	r3, #3
 8009fea:	73fb      	strb	r3, [r7, #15]
    break;
 8009fec:	bf00      	nop
  }
  return usb_status;
 8009fee:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ff0:	4618      	mov	r0, r3
 8009ff2:	3714      	adds	r7, #20
 8009ff4:	46bd      	mov	sp, r7
 8009ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ffa:	4770      	bx	lr

08009ffc <__errno>:
 8009ffc:	4b01      	ldr	r3, [pc, #4]	; (800a004 <__errno+0x8>)
 8009ffe:	6818      	ldr	r0, [r3, #0]
 800a000:	4770      	bx	lr
 800a002:	bf00      	nop
 800a004:	200001a0 	.word	0x200001a0

0800a008 <__libc_init_array>:
 800a008:	b570      	push	{r4, r5, r6, lr}
 800a00a:	4e0d      	ldr	r6, [pc, #52]	; (800a040 <__libc_init_array+0x38>)
 800a00c:	4c0d      	ldr	r4, [pc, #52]	; (800a044 <__libc_init_array+0x3c>)
 800a00e:	1ba4      	subs	r4, r4, r6
 800a010:	10a4      	asrs	r4, r4, #2
 800a012:	2500      	movs	r5, #0
 800a014:	42a5      	cmp	r5, r4
 800a016:	d109      	bne.n	800a02c <__libc_init_array+0x24>
 800a018:	4e0b      	ldr	r6, [pc, #44]	; (800a048 <__libc_init_array+0x40>)
 800a01a:	4c0c      	ldr	r4, [pc, #48]	; (800a04c <__libc_init_array+0x44>)
 800a01c:	f003 fd7e 	bl	800db1c <_init>
 800a020:	1ba4      	subs	r4, r4, r6
 800a022:	10a4      	asrs	r4, r4, #2
 800a024:	2500      	movs	r5, #0
 800a026:	42a5      	cmp	r5, r4
 800a028:	d105      	bne.n	800a036 <__libc_init_array+0x2e>
 800a02a:	bd70      	pop	{r4, r5, r6, pc}
 800a02c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a030:	4798      	blx	r3
 800a032:	3501      	adds	r5, #1
 800a034:	e7ee      	b.n	800a014 <__libc_init_array+0xc>
 800a036:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a03a:	4798      	blx	r3
 800a03c:	3501      	adds	r5, #1
 800a03e:	e7f2      	b.n	800a026 <__libc_init_array+0x1e>
 800a040:	0800de70 	.word	0x0800de70
 800a044:	0800de70 	.word	0x0800de70
 800a048:	0800de70 	.word	0x0800de70
 800a04c:	0800de74 	.word	0x0800de74

0800a050 <malloc>:
 800a050:	4b02      	ldr	r3, [pc, #8]	; (800a05c <malloc+0xc>)
 800a052:	4601      	mov	r1, r0
 800a054:	6818      	ldr	r0, [r3, #0]
 800a056:	f000 b861 	b.w	800a11c <_malloc_r>
 800a05a:	bf00      	nop
 800a05c:	200001a0 	.word	0x200001a0

0800a060 <free>:
 800a060:	4b02      	ldr	r3, [pc, #8]	; (800a06c <free+0xc>)
 800a062:	4601      	mov	r1, r0
 800a064:	6818      	ldr	r0, [r3, #0]
 800a066:	f000 b80b 	b.w	800a080 <_free_r>
 800a06a:	bf00      	nop
 800a06c:	200001a0 	.word	0x200001a0

0800a070 <memset>:
 800a070:	4402      	add	r2, r0
 800a072:	4603      	mov	r3, r0
 800a074:	4293      	cmp	r3, r2
 800a076:	d100      	bne.n	800a07a <memset+0xa>
 800a078:	4770      	bx	lr
 800a07a:	f803 1b01 	strb.w	r1, [r3], #1
 800a07e:	e7f9      	b.n	800a074 <memset+0x4>

0800a080 <_free_r>:
 800a080:	b538      	push	{r3, r4, r5, lr}
 800a082:	4605      	mov	r5, r0
 800a084:	2900      	cmp	r1, #0
 800a086:	d045      	beq.n	800a114 <_free_r+0x94>
 800a088:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a08c:	1f0c      	subs	r4, r1, #4
 800a08e:	2b00      	cmp	r3, #0
 800a090:	bfb8      	it	lt
 800a092:	18e4      	addlt	r4, r4, r3
 800a094:	f002 ff7b 	bl	800cf8e <__malloc_lock>
 800a098:	4a1f      	ldr	r2, [pc, #124]	; (800a118 <_free_r+0x98>)
 800a09a:	6813      	ldr	r3, [r2, #0]
 800a09c:	4610      	mov	r0, r2
 800a09e:	b933      	cbnz	r3, 800a0ae <_free_r+0x2e>
 800a0a0:	6063      	str	r3, [r4, #4]
 800a0a2:	6014      	str	r4, [r2, #0]
 800a0a4:	4628      	mov	r0, r5
 800a0a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a0aa:	f002 bf71 	b.w	800cf90 <__malloc_unlock>
 800a0ae:	42a3      	cmp	r3, r4
 800a0b0:	d90c      	bls.n	800a0cc <_free_r+0x4c>
 800a0b2:	6821      	ldr	r1, [r4, #0]
 800a0b4:	1862      	adds	r2, r4, r1
 800a0b6:	4293      	cmp	r3, r2
 800a0b8:	bf04      	itt	eq
 800a0ba:	681a      	ldreq	r2, [r3, #0]
 800a0bc:	685b      	ldreq	r3, [r3, #4]
 800a0be:	6063      	str	r3, [r4, #4]
 800a0c0:	bf04      	itt	eq
 800a0c2:	1852      	addeq	r2, r2, r1
 800a0c4:	6022      	streq	r2, [r4, #0]
 800a0c6:	6004      	str	r4, [r0, #0]
 800a0c8:	e7ec      	b.n	800a0a4 <_free_r+0x24>
 800a0ca:	4613      	mov	r3, r2
 800a0cc:	685a      	ldr	r2, [r3, #4]
 800a0ce:	b10a      	cbz	r2, 800a0d4 <_free_r+0x54>
 800a0d0:	42a2      	cmp	r2, r4
 800a0d2:	d9fa      	bls.n	800a0ca <_free_r+0x4a>
 800a0d4:	6819      	ldr	r1, [r3, #0]
 800a0d6:	1858      	adds	r0, r3, r1
 800a0d8:	42a0      	cmp	r0, r4
 800a0da:	d10b      	bne.n	800a0f4 <_free_r+0x74>
 800a0dc:	6820      	ldr	r0, [r4, #0]
 800a0de:	4401      	add	r1, r0
 800a0e0:	1858      	adds	r0, r3, r1
 800a0e2:	4282      	cmp	r2, r0
 800a0e4:	6019      	str	r1, [r3, #0]
 800a0e6:	d1dd      	bne.n	800a0a4 <_free_r+0x24>
 800a0e8:	6810      	ldr	r0, [r2, #0]
 800a0ea:	6852      	ldr	r2, [r2, #4]
 800a0ec:	605a      	str	r2, [r3, #4]
 800a0ee:	4401      	add	r1, r0
 800a0f0:	6019      	str	r1, [r3, #0]
 800a0f2:	e7d7      	b.n	800a0a4 <_free_r+0x24>
 800a0f4:	d902      	bls.n	800a0fc <_free_r+0x7c>
 800a0f6:	230c      	movs	r3, #12
 800a0f8:	602b      	str	r3, [r5, #0]
 800a0fa:	e7d3      	b.n	800a0a4 <_free_r+0x24>
 800a0fc:	6820      	ldr	r0, [r4, #0]
 800a0fe:	1821      	adds	r1, r4, r0
 800a100:	428a      	cmp	r2, r1
 800a102:	bf04      	itt	eq
 800a104:	6811      	ldreq	r1, [r2, #0]
 800a106:	6852      	ldreq	r2, [r2, #4]
 800a108:	6062      	str	r2, [r4, #4]
 800a10a:	bf04      	itt	eq
 800a10c:	1809      	addeq	r1, r1, r0
 800a10e:	6021      	streq	r1, [r4, #0]
 800a110:	605c      	str	r4, [r3, #4]
 800a112:	e7c7      	b.n	800a0a4 <_free_r+0x24>
 800a114:	bd38      	pop	{r3, r4, r5, pc}
 800a116:	bf00      	nop
 800a118:	200007a8 	.word	0x200007a8

0800a11c <_malloc_r>:
 800a11c:	b570      	push	{r4, r5, r6, lr}
 800a11e:	1ccd      	adds	r5, r1, #3
 800a120:	f025 0503 	bic.w	r5, r5, #3
 800a124:	3508      	adds	r5, #8
 800a126:	2d0c      	cmp	r5, #12
 800a128:	bf38      	it	cc
 800a12a:	250c      	movcc	r5, #12
 800a12c:	2d00      	cmp	r5, #0
 800a12e:	4606      	mov	r6, r0
 800a130:	db01      	blt.n	800a136 <_malloc_r+0x1a>
 800a132:	42a9      	cmp	r1, r5
 800a134:	d903      	bls.n	800a13e <_malloc_r+0x22>
 800a136:	230c      	movs	r3, #12
 800a138:	6033      	str	r3, [r6, #0]
 800a13a:	2000      	movs	r0, #0
 800a13c:	bd70      	pop	{r4, r5, r6, pc}
 800a13e:	f002 ff26 	bl	800cf8e <__malloc_lock>
 800a142:	4a21      	ldr	r2, [pc, #132]	; (800a1c8 <_malloc_r+0xac>)
 800a144:	6814      	ldr	r4, [r2, #0]
 800a146:	4621      	mov	r1, r4
 800a148:	b991      	cbnz	r1, 800a170 <_malloc_r+0x54>
 800a14a:	4c20      	ldr	r4, [pc, #128]	; (800a1cc <_malloc_r+0xb0>)
 800a14c:	6823      	ldr	r3, [r4, #0]
 800a14e:	b91b      	cbnz	r3, 800a158 <_malloc_r+0x3c>
 800a150:	4630      	mov	r0, r6
 800a152:	f000 fe7b 	bl	800ae4c <_sbrk_r>
 800a156:	6020      	str	r0, [r4, #0]
 800a158:	4629      	mov	r1, r5
 800a15a:	4630      	mov	r0, r6
 800a15c:	f000 fe76 	bl	800ae4c <_sbrk_r>
 800a160:	1c43      	adds	r3, r0, #1
 800a162:	d124      	bne.n	800a1ae <_malloc_r+0x92>
 800a164:	230c      	movs	r3, #12
 800a166:	6033      	str	r3, [r6, #0]
 800a168:	4630      	mov	r0, r6
 800a16a:	f002 ff11 	bl	800cf90 <__malloc_unlock>
 800a16e:	e7e4      	b.n	800a13a <_malloc_r+0x1e>
 800a170:	680b      	ldr	r3, [r1, #0]
 800a172:	1b5b      	subs	r3, r3, r5
 800a174:	d418      	bmi.n	800a1a8 <_malloc_r+0x8c>
 800a176:	2b0b      	cmp	r3, #11
 800a178:	d90f      	bls.n	800a19a <_malloc_r+0x7e>
 800a17a:	600b      	str	r3, [r1, #0]
 800a17c:	50cd      	str	r5, [r1, r3]
 800a17e:	18cc      	adds	r4, r1, r3
 800a180:	4630      	mov	r0, r6
 800a182:	f002 ff05 	bl	800cf90 <__malloc_unlock>
 800a186:	f104 000b 	add.w	r0, r4, #11
 800a18a:	1d23      	adds	r3, r4, #4
 800a18c:	f020 0007 	bic.w	r0, r0, #7
 800a190:	1ac3      	subs	r3, r0, r3
 800a192:	d0d3      	beq.n	800a13c <_malloc_r+0x20>
 800a194:	425a      	negs	r2, r3
 800a196:	50e2      	str	r2, [r4, r3]
 800a198:	e7d0      	b.n	800a13c <_malloc_r+0x20>
 800a19a:	428c      	cmp	r4, r1
 800a19c:	684b      	ldr	r3, [r1, #4]
 800a19e:	bf16      	itet	ne
 800a1a0:	6063      	strne	r3, [r4, #4]
 800a1a2:	6013      	streq	r3, [r2, #0]
 800a1a4:	460c      	movne	r4, r1
 800a1a6:	e7eb      	b.n	800a180 <_malloc_r+0x64>
 800a1a8:	460c      	mov	r4, r1
 800a1aa:	6849      	ldr	r1, [r1, #4]
 800a1ac:	e7cc      	b.n	800a148 <_malloc_r+0x2c>
 800a1ae:	1cc4      	adds	r4, r0, #3
 800a1b0:	f024 0403 	bic.w	r4, r4, #3
 800a1b4:	42a0      	cmp	r0, r4
 800a1b6:	d005      	beq.n	800a1c4 <_malloc_r+0xa8>
 800a1b8:	1a21      	subs	r1, r4, r0
 800a1ba:	4630      	mov	r0, r6
 800a1bc:	f000 fe46 	bl	800ae4c <_sbrk_r>
 800a1c0:	3001      	adds	r0, #1
 800a1c2:	d0cf      	beq.n	800a164 <_malloc_r+0x48>
 800a1c4:	6025      	str	r5, [r4, #0]
 800a1c6:	e7db      	b.n	800a180 <_malloc_r+0x64>
 800a1c8:	200007a8 	.word	0x200007a8
 800a1cc:	200007ac 	.word	0x200007ac

0800a1d0 <__cvt>:
 800a1d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a1d4:	ec55 4b10 	vmov	r4, r5, d0
 800a1d8:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800a1da:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800a1de:	2d00      	cmp	r5, #0
 800a1e0:	460e      	mov	r6, r1
 800a1e2:	4691      	mov	r9, r2
 800a1e4:	4619      	mov	r1, r3
 800a1e6:	bfb8      	it	lt
 800a1e8:	4622      	movlt	r2, r4
 800a1ea:	462b      	mov	r3, r5
 800a1ec:	f027 0720 	bic.w	r7, r7, #32
 800a1f0:	bfbb      	ittet	lt
 800a1f2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800a1f6:	461d      	movlt	r5, r3
 800a1f8:	2300      	movge	r3, #0
 800a1fa:	232d      	movlt	r3, #45	; 0x2d
 800a1fc:	bfb8      	it	lt
 800a1fe:	4614      	movlt	r4, r2
 800a200:	2f46      	cmp	r7, #70	; 0x46
 800a202:	700b      	strb	r3, [r1, #0]
 800a204:	d004      	beq.n	800a210 <__cvt+0x40>
 800a206:	2f45      	cmp	r7, #69	; 0x45
 800a208:	d100      	bne.n	800a20c <__cvt+0x3c>
 800a20a:	3601      	adds	r6, #1
 800a20c:	2102      	movs	r1, #2
 800a20e:	e000      	b.n	800a212 <__cvt+0x42>
 800a210:	2103      	movs	r1, #3
 800a212:	ab03      	add	r3, sp, #12
 800a214:	9301      	str	r3, [sp, #4]
 800a216:	ab02      	add	r3, sp, #8
 800a218:	9300      	str	r3, [sp, #0]
 800a21a:	4632      	mov	r2, r6
 800a21c:	4653      	mov	r3, sl
 800a21e:	ec45 4b10 	vmov	d0, r4, r5
 800a222:	f001 fda5 	bl	800bd70 <_dtoa_r>
 800a226:	2f47      	cmp	r7, #71	; 0x47
 800a228:	4680      	mov	r8, r0
 800a22a:	d102      	bne.n	800a232 <__cvt+0x62>
 800a22c:	f019 0f01 	tst.w	r9, #1
 800a230:	d026      	beq.n	800a280 <__cvt+0xb0>
 800a232:	2f46      	cmp	r7, #70	; 0x46
 800a234:	eb08 0906 	add.w	r9, r8, r6
 800a238:	d111      	bne.n	800a25e <__cvt+0x8e>
 800a23a:	f898 3000 	ldrb.w	r3, [r8]
 800a23e:	2b30      	cmp	r3, #48	; 0x30
 800a240:	d10a      	bne.n	800a258 <__cvt+0x88>
 800a242:	2200      	movs	r2, #0
 800a244:	2300      	movs	r3, #0
 800a246:	4620      	mov	r0, r4
 800a248:	4629      	mov	r1, r5
 800a24a:	f7f6 fc5d 	bl	8000b08 <__aeabi_dcmpeq>
 800a24e:	b918      	cbnz	r0, 800a258 <__cvt+0x88>
 800a250:	f1c6 0601 	rsb	r6, r6, #1
 800a254:	f8ca 6000 	str.w	r6, [sl]
 800a258:	f8da 3000 	ldr.w	r3, [sl]
 800a25c:	4499      	add	r9, r3
 800a25e:	2200      	movs	r2, #0
 800a260:	2300      	movs	r3, #0
 800a262:	4620      	mov	r0, r4
 800a264:	4629      	mov	r1, r5
 800a266:	f7f6 fc4f 	bl	8000b08 <__aeabi_dcmpeq>
 800a26a:	b938      	cbnz	r0, 800a27c <__cvt+0xac>
 800a26c:	2230      	movs	r2, #48	; 0x30
 800a26e:	9b03      	ldr	r3, [sp, #12]
 800a270:	454b      	cmp	r3, r9
 800a272:	d205      	bcs.n	800a280 <__cvt+0xb0>
 800a274:	1c59      	adds	r1, r3, #1
 800a276:	9103      	str	r1, [sp, #12]
 800a278:	701a      	strb	r2, [r3, #0]
 800a27a:	e7f8      	b.n	800a26e <__cvt+0x9e>
 800a27c:	f8cd 900c 	str.w	r9, [sp, #12]
 800a280:	9b03      	ldr	r3, [sp, #12]
 800a282:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a284:	eba3 0308 	sub.w	r3, r3, r8
 800a288:	4640      	mov	r0, r8
 800a28a:	6013      	str	r3, [r2, #0]
 800a28c:	b004      	add	sp, #16
 800a28e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800a292 <__exponent>:
 800a292:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a294:	2900      	cmp	r1, #0
 800a296:	4604      	mov	r4, r0
 800a298:	bfba      	itte	lt
 800a29a:	4249      	neglt	r1, r1
 800a29c:	232d      	movlt	r3, #45	; 0x2d
 800a29e:	232b      	movge	r3, #43	; 0x2b
 800a2a0:	2909      	cmp	r1, #9
 800a2a2:	f804 2b02 	strb.w	r2, [r4], #2
 800a2a6:	7043      	strb	r3, [r0, #1]
 800a2a8:	dd20      	ble.n	800a2ec <__exponent+0x5a>
 800a2aa:	f10d 0307 	add.w	r3, sp, #7
 800a2ae:	461f      	mov	r7, r3
 800a2b0:	260a      	movs	r6, #10
 800a2b2:	fb91 f5f6 	sdiv	r5, r1, r6
 800a2b6:	fb06 1115 	mls	r1, r6, r5, r1
 800a2ba:	3130      	adds	r1, #48	; 0x30
 800a2bc:	2d09      	cmp	r5, #9
 800a2be:	f803 1c01 	strb.w	r1, [r3, #-1]
 800a2c2:	f103 32ff 	add.w	r2, r3, #4294967295
 800a2c6:	4629      	mov	r1, r5
 800a2c8:	dc09      	bgt.n	800a2de <__exponent+0x4c>
 800a2ca:	3130      	adds	r1, #48	; 0x30
 800a2cc:	3b02      	subs	r3, #2
 800a2ce:	f802 1c01 	strb.w	r1, [r2, #-1]
 800a2d2:	42bb      	cmp	r3, r7
 800a2d4:	4622      	mov	r2, r4
 800a2d6:	d304      	bcc.n	800a2e2 <__exponent+0x50>
 800a2d8:	1a10      	subs	r0, r2, r0
 800a2da:	b003      	add	sp, #12
 800a2dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a2de:	4613      	mov	r3, r2
 800a2e0:	e7e7      	b.n	800a2b2 <__exponent+0x20>
 800a2e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a2e6:	f804 2b01 	strb.w	r2, [r4], #1
 800a2ea:	e7f2      	b.n	800a2d2 <__exponent+0x40>
 800a2ec:	2330      	movs	r3, #48	; 0x30
 800a2ee:	4419      	add	r1, r3
 800a2f0:	7083      	strb	r3, [r0, #2]
 800a2f2:	1d02      	adds	r2, r0, #4
 800a2f4:	70c1      	strb	r1, [r0, #3]
 800a2f6:	e7ef      	b.n	800a2d8 <__exponent+0x46>

0800a2f8 <_printf_float>:
 800a2f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a2fc:	b08d      	sub	sp, #52	; 0x34
 800a2fe:	460c      	mov	r4, r1
 800a300:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 800a304:	4616      	mov	r6, r2
 800a306:	461f      	mov	r7, r3
 800a308:	4605      	mov	r5, r0
 800a30a:	f002 fe15 	bl	800cf38 <_localeconv_r>
 800a30e:	6803      	ldr	r3, [r0, #0]
 800a310:	9304      	str	r3, [sp, #16]
 800a312:	4618      	mov	r0, r3
 800a314:	f7f5 ff7c 	bl	8000210 <strlen>
 800a318:	2300      	movs	r3, #0
 800a31a:	930a      	str	r3, [sp, #40]	; 0x28
 800a31c:	f8d8 3000 	ldr.w	r3, [r8]
 800a320:	9005      	str	r0, [sp, #20]
 800a322:	3307      	adds	r3, #7
 800a324:	f023 0307 	bic.w	r3, r3, #7
 800a328:	f103 0208 	add.w	r2, r3, #8
 800a32c:	f894 a018 	ldrb.w	sl, [r4, #24]
 800a330:	f8d4 b000 	ldr.w	fp, [r4]
 800a334:	f8c8 2000 	str.w	r2, [r8]
 800a338:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a33c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800a340:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800a344:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a348:	9307      	str	r3, [sp, #28]
 800a34a:	f8cd 8018 	str.w	r8, [sp, #24]
 800a34e:	f04f 32ff 	mov.w	r2, #4294967295
 800a352:	4ba7      	ldr	r3, [pc, #668]	; (800a5f0 <_printf_float+0x2f8>)
 800a354:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a358:	f7f6 fc08 	bl	8000b6c <__aeabi_dcmpun>
 800a35c:	bb70      	cbnz	r0, 800a3bc <_printf_float+0xc4>
 800a35e:	f04f 32ff 	mov.w	r2, #4294967295
 800a362:	4ba3      	ldr	r3, [pc, #652]	; (800a5f0 <_printf_float+0x2f8>)
 800a364:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a368:	f7f6 fbe2 	bl	8000b30 <__aeabi_dcmple>
 800a36c:	bb30      	cbnz	r0, 800a3bc <_printf_float+0xc4>
 800a36e:	2200      	movs	r2, #0
 800a370:	2300      	movs	r3, #0
 800a372:	4640      	mov	r0, r8
 800a374:	4649      	mov	r1, r9
 800a376:	f7f6 fbd1 	bl	8000b1c <__aeabi_dcmplt>
 800a37a:	b110      	cbz	r0, 800a382 <_printf_float+0x8a>
 800a37c:	232d      	movs	r3, #45	; 0x2d
 800a37e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a382:	4a9c      	ldr	r2, [pc, #624]	; (800a5f4 <_printf_float+0x2fc>)
 800a384:	4b9c      	ldr	r3, [pc, #624]	; (800a5f8 <_printf_float+0x300>)
 800a386:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800a38a:	bf8c      	ite	hi
 800a38c:	4690      	movhi	r8, r2
 800a38e:	4698      	movls	r8, r3
 800a390:	2303      	movs	r3, #3
 800a392:	f02b 0204 	bic.w	r2, fp, #4
 800a396:	6123      	str	r3, [r4, #16]
 800a398:	6022      	str	r2, [r4, #0]
 800a39a:	f04f 0900 	mov.w	r9, #0
 800a39e:	9700      	str	r7, [sp, #0]
 800a3a0:	4633      	mov	r3, r6
 800a3a2:	aa0b      	add	r2, sp, #44	; 0x2c
 800a3a4:	4621      	mov	r1, r4
 800a3a6:	4628      	mov	r0, r5
 800a3a8:	f000 f9e6 	bl	800a778 <_printf_common>
 800a3ac:	3001      	adds	r0, #1
 800a3ae:	f040 808d 	bne.w	800a4cc <_printf_float+0x1d4>
 800a3b2:	f04f 30ff 	mov.w	r0, #4294967295
 800a3b6:	b00d      	add	sp, #52	; 0x34
 800a3b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a3bc:	4642      	mov	r2, r8
 800a3be:	464b      	mov	r3, r9
 800a3c0:	4640      	mov	r0, r8
 800a3c2:	4649      	mov	r1, r9
 800a3c4:	f7f6 fbd2 	bl	8000b6c <__aeabi_dcmpun>
 800a3c8:	b110      	cbz	r0, 800a3d0 <_printf_float+0xd8>
 800a3ca:	4a8c      	ldr	r2, [pc, #560]	; (800a5fc <_printf_float+0x304>)
 800a3cc:	4b8c      	ldr	r3, [pc, #560]	; (800a600 <_printf_float+0x308>)
 800a3ce:	e7da      	b.n	800a386 <_printf_float+0x8e>
 800a3d0:	6861      	ldr	r1, [r4, #4]
 800a3d2:	1c4b      	adds	r3, r1, #1
 800a3d4:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 800a3d8:	a80a      	add	r0, sp, #40	; 0x28
 800a3da:	d13e      	bne.n	800a45a <_printf_float+0x162>
 800a3dc:	2306      	movs	r3, #6
 800a3de:	6063      	str	r3, [r4, #4]
 800a3e0:	2300      	movs	r3, #0
 800a3e2:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800a3e6:	ab09      	add	r3, sp, #36	; 0x24
 800a3e8:	9300      	str	r3, [sp, #0]
 800a3ea:	ec49 8b10 	vmov	d0, r8, r9
 800a3ee:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800a3f2:	6022      	str	r2, [r4, #0]
 800a3f4:	f8cd a004 	str.w	sl, [sp, #4]
 800a3f8:	6861      	ldr	r1, [r4, #4]
 800a3fa:	4628      	mov	r0, r5
 800a3fc:	f7ff fee8 	bl	800a1d0 <__cvt>
 800a400:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 800a404:	2b47      	cmp	r3, #71	; 0x47
 800a406:	4680      	mov	r8, r0
 800a408:	d109      	bne.n	800a41e <_printf_float+0x126>
 800a40a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a40c:	1cd8      	adds	r0, r3, #3
 800a40e:	db02      	blt.n	800a416 <_printf_float+0x11e>
 800a410:	6862      	ldr	r2, [r4, #4]
 800a412:	4293      	cmp	r3, r2
 800a414:	dd47      	ble.n	800a4a6 <_printf_float+0x1ae>
 800a416:	f1aa 0a02 	sub.w	sl, sl, #2
 800a41a:	fa5f fa8a 	uxtb.w	sl, sl
 800a41e:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800a422:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a424:	d824      	bhi.n	800a470 <_printf_float+0x178>
 800a426:	3901      	subs	r1, #1
 800a428:	4652      	mov	r2, sl
 800a42a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800a42e:	9109      	str	r1, [sp, #36]	; 0x24
 800a430:	f7ff ff2f 	bl	800a292 <__exponent>
 800a434:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a436:	1813      	adds	r3, r2, r0
 800a438:	2a01      	cmp	r2, #1
 800a43a:	4681      	mov	r9, r0
 800a43c:	6123      	str	r3, [r4, #16]
 800a43e:	dc02      	bgt.n	800a446 <_printf_float+0x14e>
 800a440:	6822      	ldr	r2, [r4, #0]
 800a442:	07d1      	lsls	r1, r2, #31
 800a444:	d501      	bpl.n	800a44a <_printf_float+0x152>
 800a446:	3301      	adds	r3, #1
 800a448:	6123      	str	r3, [r4, #16]
 800a44a:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800a44e:	2b00      	cmp	r3, #0
 800a450:	d0a5      	beq.n	800a39e <_printf_float+0xa6>
 800a452:	232d      	movs	r3, #45	; 0x2d
 800a454:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a458:	e7a1      	b.n	800a39e <_printf_float+0xa6>
 800a45a:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 800a45e:	f000 8177 	beq.w	800a750 <_printf_float+0x458>
 800a462:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800a466:	d1bb      	bne.n	800a3e0 <_printf_float+0xe8>
 800a468:	2900      	cmp	r1, #0
 800a46a:	d1b9      	bne.n	800a3e0 <_printf_float+0xe8>
 800a46c:	2301      	movs	r3, #1
 800a46e:	e7b6      	b.n	800a3de <_printf_float+0xe6>
 800a470:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 800a474:	d119      	bne.n	800a4aa <_printf_float+0x1b2>
 800a476:	2900      	cmp	r1, #0
 800a478:	6863      	ldr	r3, [r4, #4]
 800a47a:	dd0c      	ble.n	800a496 <_printf_float+0x19e>
 800a47c:	6121      	str	r1, [r4, #16]
 800a47e:	b913      	cbnz	r3, 800a486 <_printf_float+0x18e>
 800a480:	6822      	ldr	r2, [r4, #0]
 800a482:	07d2      	lsls	r2, r2, #31
 800a484:	d502      	bpl.n	800a48c <_printf_float+0x194>
 800a486:	3301      	adds	r3, #1
 800a488:	440b      	add	r3, r1
 800a48a:	6123      	str	r3, [r4, #16]
 800a48c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a48e:	65a3      	str	r3, [r4, #88]	; 0x58
 800a490:	f04f 0900 	mov.w	r9, #0
 800a494:	e7d9      	b.n	800a44a <_printf_float+0x152>
 800a496:	b913      	cbnz	r3, 800a49e <_printf_float+0x1a6>
 800a498:	6822      	ldr	r2, [r4, #0]
 800a49a:	07d0      	lsls	r0, r2, #31
 800a49c:	d501      	bpl.n	800a4a2 <_printf_float+0x1aa>
 800a49e:	3302      	adds	r3, #2
 800a4a0:	e7f3      	b.n	800a48a <_printf_float+0x192>
 800a4a2:	2301      	movs	r3, #1
 800a4a4:	e7f1      	b.n	800a48a <_printf_float+0x192>
 800a4a6:	f04f 0a67 	mov.w	sl, #103	; 0x67
 800a4aa:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800a4ae:	4293      	cmp	r3, r2
 800a4b0:	db05      	blt.n	800a4be <_printf_float+0x1c6>
 800a4b2:	6822      	ldr	r2, [r4, #0]
 800a4b4:	6123      	str	r3, [r4, #16]
 800a4b6:	07d1      	lsls	r1, r2, #31
 800a4b8:	d5e8      	bpl.n	800a48c <_printf_float+0x194>
 800a4ba:	3301      	adds	r3, #1
 800a4bc:	e7e5      	b.n	800a48a <_printf_float+0x192>
 800a4be:	2b00      	cmp	r3, #0
 800a4c0:	bfd4      	ite	le
 800a4c2:	f1c3 0302 	rsble	r3, r3, #2
 800a4c6:	2301      	movgt	r3, #1
 800a4c8:	4413      	add	r3, r2
 800a4ca:	e7de      	b.n	800a48a <_printf_float+0x192>
 800a4cc:	6823      	ldr	r3, [r4, #0]
 800a4ce:	055a      	lsls	r2, r3, #21
 800a4d0:	d407      	bmi.n	800a4e2 <_printf_float+0x1ea>
 800a4d2:	6923      	ldr	r3, [r4, #16]
 800a4d4:	4642      	mov	r2, r8
 800a4d6:	4631      	mov	r1, r6
 800a4d8:	4628      	mov	r0, r5
 800a4da:	47b8      	blx	r7
 800a4dc:	3001      	adds	r0, #1
 800a4de:	d12b      	bne.n	800a538 <_printf_float+0x240>
 800a4e0:	e767      	b.n	800a3b2 <_printf_float+0xba>
 800a4e2:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800a4e6:	f240 80dc 	bls.w	800a6a2 <_printf_float+0x3aa>
 800a4ea:	2200      	movs	r2, #0
 800a4ec:	2300      	movs	r3, #0
 800a4ee:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a4f2:	f7f6 fb09 	bl	8000b08 <__aeabi_dcmpeq>
 800a4f6:	2800      	cmp	r0, #0
 800a4f8:	d033      	beq.n	800a562 <_printf_float+0x26a>
 800a4fa:	2301      	movs	r3, #1
 800a4fc:	4a41      	ldr	r2, [pc, #260]	; (800a604 <_printf_float+0x30c>)
 800a4fe:	4631      	mov	r1, r6
 800a500:	4628      	mov	r0, r5
 800a502:	47b8      	blx	r7
 800a504:	3001      	adds	r0, #1
 800a506:	f43f af54 	beq.w	800a3b2 <_printf_float+0xba>
 800a50a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a50e:	429a      	cmp	r2, r3
 800a510:	db02      	blt.n	800a518 <_printf_float+0x220>
 800a512:	6823      	ldr	r3, [r4, #0]
 800a514:	07d8      	lsls	r0, r3, #31
 800a516:	d50f      	bpl.n	800a538 <_printf_float+0x240>
 800a518:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a51c:	4631      	mov	r1, r6
 800a51e:	4628      	mov	r0, r5
 800a520:	47b8      	blx	r7
 800a522:	3001      	adds	r0, #1
 800a524:	f43f af45 	beq.w	800a3b2 <_printf_float+0xba>
 800a528:	f04f 0800 	mov.w	r8, #0
 800a52c:	f104 091a 	add.w	r9, r4, #26
 800a530:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a532:	3b01      	subs	r3, #1
 800a534:	4543      	cmp	r3, r8
 800a536:	dc09      	bgt.n	800a54c <_printf_float+0x254>
 800a538:	6823      	ldr	r3, [r4, #0]
 800a53a:	079b      	lsls	r3, r3, #30
 800a53c:	f100 8103 	bmi.w	800a746 <_printf_float+0x44e>
 800a540:	68e0      	ldr	r0, [r4, #12]
 800a542:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a544:	4298      	cmp	r0, r3
 800a546:	bfb8      	it	lt
 800a548:	4618      	movlt	r0, r3
 800a54a:	e734      	b.n	800a3b6 <_printf_float+0xbe>
 800a54c:	2301      	movs	r3, #1
 800a54e:	464a      	mov	r2, r9
 800a550:	4631      	mov	r1, r6
 800a552:	4628      	mov	r0, r5
 800a554:	47b8      	blx	r7
 800a556:	3001      	adds	r0, #1
 800a558:	f43f af2b 	beq.w	800a3b2 <_printf_float+0xba>
 800a55c:	f108 0801 	add.w	r8, r8, #1
 800a560:	e7e6      	b.n	800a530 <_printf_float+0x238>
 800a562:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a564:	2b00      	cmp	r3, #0
 800a566:	dc2b      	bgt.n	800a5c0 <_printf_float+0x2c8>
 800a568:	2301      	movs	r3, #1
 800a56a:	4a26      	ldr	r2, [pc, #152]	; (800a604 <_printf_float+0x30c>)
 800a56c:	4631      	mov	r1, r6
 800a56e:	4628      	mov	r0, r5
 800a570:	47b8      	blx	r7
 800a572:	3001      	adds	r0, #1
 800a574:	f43f af1d 	beq.w	800a3b2 <_printf_float+0xba>
 800a578:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a57a:	b923      	cbnz	r3, 800a586 <_printf_float+0x28e>
 800a57c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a57e:	b913      	cbnz	r3, 800a586 <_printf_float+0x28e>
 800a580:	6823      	ldr	r3, [r4, #0]
 800a582:	07d9      	lsls	r1, r3, #31
 800a584:	d5d8      	bpl.n	800a538 <_printf_float+0x240>
 800a586:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a58a:	4631      	mov	r1, r6
 800a58c:	4628      	mov	r0, r5
 800a58e:	47b8      	blx	r7
 800a590:	3001      	adds	r0, #1
 800a592:	f43f af0e 	beq.w	800a3b2 <_printf_float+0xba>
 800a596:	f04f 0900 	mov.w	r9, #0
 800a59a:	f104 0a1a 	add.w	sl, r4, #26
 800a59e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a5a0:	425b      	negs	r3, r3
 800a5a2:	454b      	cmp	r3, r9
 800a5a4:	dc01      	bgt.n	800a5aa <_printf_float+0x2b2>
 800a5a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a5a8:	e794      	b.n	800a4d4 <_printf_float+0x1dc>
 800a5aa:	2301      	movs	r3, #1
 800a5ac:	4652      	mov	r2, sl
 800a5ae:	4631      	mov	r1, r6
 800a5b0:	4628      	mov	r0, r5
 800a5b2:	47b8      	blx	r7
 800a5b4:	3001      	adds	r0, #1
 800a5b6:	f43f aefc 	beq.w	800a3b2 <_printf_float+0xba>
 800a5ba:	f109 0901 	add.w	r9, r9, #1
 800a5be:	e7ee      	b.n	800a59e <_printf_float+0x2a6>
 800a5c0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a5c2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a5c4:	429a      	cmp	r2, r3
 800a5c6:	bfa8      	it	ge
 800a5c8:	461a      	movge	r2, r3
 800a5ca:	2a00      	cmp	r2, #0
 800a5cc:	4691      	mov	r9, r2
 800a5ce:	dd07      	ble.n	800a5e0 <_printf_float+0x2e8>
 800a5d0:	4613      	mov	r3, r2
 800a5d2:	4631      	mov	r1, r6
 800a5d4:	4642      	mov	r2, r8
 800a5d6:	4628      	mov	r0, r5
 800a5d8:	47b8      	blx	r7
 800a5da:	3001      	adds	r0, #1
 800a5dc:	f43f aee9 	beq.w	800a3b2 <_printf_float+0xba>
 800a5e0:	f104 031a 	add.w	r3, r4, #26
 800a5e4:	f04f 0b00 	mov.w	fp, #0
 800a5e8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a5ec:	9306      	str	r3, [sp, #24]
 800a5ee:	e015      	b.n	800a61c <_printf_float+0x324>
 800a5f0:	7fefffff 	.word	0x7fefffff
 800a5f4:	0800dbb4 	.word	0x0800dbb4
 800a5f8:	0800dbb0 	.word	0x0800dbb0
 800a5fc:	0800dbbc 	.word	0x0800dbbc
 800a600:	0800dbb8 	.word	0x0800dbb8
 800a604:	0800dbc0 	.word	0x0800dbc0
 800a608:	2301      	movs	r3, #1
 800a60a:	9a06      	ldr	r2, [sp, #24]
 800a60c:	4631      	mov	r1, r6
 800a60e:	4628      	mov	r0, r5
 800a610:	47b8      	blx	r7
 800a612:	3001      	adds	r0, #1
 800a614:	f43f aecd 	beq.w	800a3b2 <_printf_float+0xba>
 800a618:	f10b 0b01 	add.w	fp, fp, #1
 800a61c:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800a620:	ebaa 0309 	sub.w	r3, sl, r9
 800a624:	455b      	cmp	r3, fp
 800a626:	dcef      	bgt.n	800a608 <_printf_float+0x310>
 800a628:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a62c:	429a      	cmp	r2, r3
 800a62e:	44d0      	add	r8, sl
 800a630:	db15      	blt.n	800a65e <_printf_float+0x366>
 800a632:	6823      	ldr	r3, [r4, #0]
 800a634:	07da      	lsls	r2, r3, #31
 800a636:	d412      	bmi.n	800a65e <_printf_float+0x366>
 800a638:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a63a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a63c:	eba3 020a 	sub.w	r2, r3, sl
 800a640:	eba3 0a01 	sub.w	sl, r3, r1
 800a644:	4592      	cmp	sl, r2
 800a646:	bfa8      	it	ge
 800a648:	4692      	movge	sl, r2
 800a64a:	f1ba 0f00 	cmp.w	sl, #0
 800a64e:	dc0e      	bgt.n	800a66e <_printf_float+0x376>
 800a650:	f04f 0800 	mov.w	r8, #0
 800a654:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a658:	f104 091a 	add.w	r9, r4, #26
 800a65c:	e019      	b.n	800a692 <_printf_float+0x39a>
 800a65e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a662:	4631      	mov	r1, r6
 800a664:	4628      	mov	r0, r5
 800a666:	47b8      	blx	r7
 800a668:	3001      	adds	r0, #1
 800a66a:	d1e5      	bne.n	800a638 <_printf_float+0x340>
 800a66c:	e6a1      	b.n	800a3b2 <_printf_float+0xba>
 800a66e:	4653      	mov	r3, sl
 800a670:	4642      	mov	r2, r8
 800a672:	4631      	mov	r1, r6
 800a674:	4628      	mov	r0, r5
 800a676:	47b8      	blx	r7
 800a678:	3001      	adds	r0, #1
 800a67a:	d1e9      	bne.n	800a650 <_printf_float+0x358>
 800a67c:	e699      	b.n	800a3b2 <_printf_float+0xba>
 800a67e:	2301      	movs	r3, #1
 800a680:	464a      	mov	r2, r9
 800a682:	4631      	mov	r1, r6
 800a684:	4628      	mov	r0, r5
 800a686:	47b8      	blx	r7
 800a688:	3001      	adds	r0, #1
 800a68a:	f43f ae92 	beq.w	800a3b2 <_printf_float+0xba>
 800a68e:	f108 0801 	add.w	r8, r8, #1
 800a692:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a696:	1a9b      	subs	r3, r3, r2
 800a698:	eba3 030a 	sub.w	r3, r3, sl
 800a69c:	4543      	cmp	r3, r8
 800a69e:	dcee      	bgt.n	800a67e <_printf_float+0x386>
 800a6a0:	e74a      	b.n	800a538 <_printf_float+0x240>
 800a6a2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a6a4:	2a01      	cmp	r2, #1
 800a6a6:	dc01      	bgt.n	800a6ac <_printf_float+0x3b4>
 800a6a8:	07db      	lsls	r3, r3, #31
 800a6aa:	d53a      	bpl.n	800a722 <_printf_float+0x42a>
 800a6ac:	2301      	movs	r3, #1
 800a6ae:	4642      	mov	r2, r8
 800a6b0:	4631      	mov	r1, r6
 800a6b2:	4628      	mov	r0, r5
 800a6b4:	47b8      	blx	r7
 800a6b6:	3001      	adds	r0, #1
 800a6b8:	f43f ae7b 	beq.w	800a3b2 <_printf_float+0xba>
 800a6bc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a6c0:	4631      	mov	r1, r6
 800a6c2:	4628      	mov	r0, r5
 800a6c4:	47b8      	blx	r7
 800a6c6:	3001      	adds	r0, #1
 800a6c8:	f108 0801 	add.w	r8, r8, #1
 800a6cc:	f43f ae71 	beq.w	800a3b2 <_printf_float+0xba>
 800a6d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a6d2:	2200      	movs	r2, #0
 800a6d4:	f103 3aff 	add.w	sl, r3, #4294967295
 800a6d8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a6dc:	2300      	movs	r3, #0
 800a6de:	f7f6 fa13 	bl	8000b08 <__aeabi_dcmpeq>
 800a6e2:	b9c8      	cbnz	r0, 800a718 <_printf_float+0x420>
 800a6e4:	4653      	mov	r3, sl
 800a6e6:	4642      	mov	r2, r8
 800a6e8:	4631      	mov	r1, r6
 800a6ea:	4628      	mov	r0, r5
 800a6ec:	47b8      	blx	r7
 800a6ee:	3001      	adds	r0, #1
 800a6f0:	d10e      	bne.n	800a710 <_printf_float+0x418>
 800a6f2:	e65e      	b.n	800a3b2 <_printf_float+0xba>
 800a6f4:	2301      	movs	r3, #1
 800a6f6:	4652      	mov	r2, sl
 800a6f8:	4631      	mov	r1, r6
 800a6fa:	4628      	mov	r0, r5
 800a6fc:	47b8      	blx	r7
 800a6fe:	3001      	adds	r0, #1
 800a700:	f43f ae57 	beq.w	800a3b2 <_printf_float+0xba>
 800a704:	f108 0801 	add.w	r8, r8, #1
 800a708:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a70a:	3b01      	subs	r3, #1
 800a70c:	4543      	cmp	r3, r8
 800a70e:	dcf1      	bgt.n	800a6f4 <_printf_float+0x3fc>
 800a710:	464b      	mov	r3, r9
 800a712:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800a716:	e6de      	b.n	800a4d6 <_printf_float+0x1de>
 800a718:	f04f 0800 	mov.w	r8, #0
 800a71c:	f104 0a1a 	add.w	sl, r4, #26
 800a720:	e7f2      	b.n	800a708 <_printf_float+0x410>
 800a722:	2301      	movs	r3, #1
 800a724:	e7df      	b.n	800a6e6 <_printf_float+0x3ee>
 800a726:	2301      	movs	r3, #1
 800a728:	464a      	mov	r2, r9
 800a72a:	4631      	mov	r1, r6
 800a72c:	4628      	mov	r0, r5
 800a72e:	47b8      	blx	r7
 800a730:	3001      	adds	r0, #1
 800a732:	f43f ae3e 	beq.w	800a3b2 <_printf_float+0xba>
 800a736:	f108 0801 	add.w	r8, r8, #1
 800a73a:	68e3      	ldr	r3, [r4, #12]
 800a73c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a73e:	1a9b      	subs	r3, r3, r2
 800a740:	4543      	cmp	r3, r8
 800a742:	dcf0      	bgt.n	800a726 <_printf_float+0x42e>
 800a744:	e6fc      	b.n	800a540 <_printf_float+0x248>
 800a746:	f04f 0800 	mov.w	r8, #0
 800a74a:	f104 0919 	add.w	r9, r4, #25
 800a74e:	e7f4      	b.n	800a73a <_printf_float+0x442>
 800a750:	2900      	cmp	r1, #0
 800a752:	f43f ae8b 	beq.w	800a46c <_printf_float+0x174>
 800a756:	2300      	movs	r3, #0
 800a758:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800a75c:	ab09      	add	r3, sp, #36	; 0x24
 800a75e:	9300      	str	r3, [sp, #0]
 800a760:	ec49 8b10 	vmov	d0, r8, r9
 800a764:	6022      	str	r2, [r4, #0]
 800a766:	f8cd a004 	str.w	sl, [sp, #4]
 800a76a:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800a76e:	4628      	mov	r0, r5
 800a770:	f7ff fd2e 	bl	800a1d0 <__cvt>
 800a774:	4680      	mov	r8, r0
 800a776:	e648      	b.n	800a40a <_printf_float+0x112>

0800a778 <_printf_common>:
 800a778:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a77c:	4691      	mov	r9, r2
 800a77e:	461f      	mov	r7, r3
 800a780:	688a      	ldr	r2, [r1, #8]
 800a782:	690b      	ldr	r3, [r1, #16]
 800a784:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a788:	4293      	cmp	r3, r2
 800a78a:	bfb8      	it	lt
 800a78c:	4613      	movlt	r3, r2
 800a78e:	f8c9 3000 	str.w	r3, [r9]
 800a792:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a796:	4606      	mov	r6, r0
 800a798:	460c      	mov	r4, r1
 800a79a:	b112      	cbz	r2, 800a7a2 <_printf_common+0x2a>
 800a79c:	3301      	adds	r3, #1
 800a79e:	f8c9 3000 	str.w	r3, [r9]
 800a7a2:	6823      	ldr	r3, [r4, #0]
 800a7a4:	0699      	lsls	r1, r3, #26
 800a7a6:	bf42      	ittt	mi
 800a7a8:	f8d9 3000 	ldrmi.w	r3, [r9]
 800a7ac:	3302      	addmi	r3, #2
 800a7ae:	f8c9 3000 	strmi.w	r3, [r9]
 800a7b2:	6825      	ldr	r5, [r4, #0]
 800a7b4:	f015 0506 	ands.w	r5, r5, #6
 800a7b8:	d107      	bne.n	800a7ca <_printf_common+0x52>
 800a7ba:	f104 0a19 	add.w	sl, r4, #25
 800a7be:	68e3      	ldr	r3, [r4, #12]
 800a7c0:	f8d9 2000 	ldr.w	r2, [r9]
 800a7c4:	1a9b      	subs	r3, r3, r2
 800a7c6:	42ab      	cmp	r3, r5
 800a7c8:	dc28      	bgt.n	800a81c <_printf_common+0xa4>
 800a7ca:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800a7ce:	6822      	ldr	r2, [r4, #0]
 800a7d0:	3300      	adds	r3, #0
 800a7d2:	bf18      	it	ne
 800a7d4:	2301      	movne	r3, #1
 800a7d6:	0692      	lsls	r2, r2, #26
 800a7d8:	d42d      	bmi.n	800a836 <_printf_common+0xbe>
 800a7da:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a7de:	4639      	mov	r1, r7
 800a7e0:	4630      	mov	r0, r6
 800a7e2:	47c0      	blx	r8
 800a7e4:	3001      	adds	r0, #1
 800a7e6:	d020      	beq.n	800a82a <_printf_common+0xb2>
 800a7e8:	6823      	ldr	r3, [r4, #0]
 800a7ea:	68e5      	ldr	r5, [r4, #12]
 800a7ec:	f8d9 2000 	ldr.w	r2, [r9]
 800a7f0:	f003 0306 	and.w	r3, r3, #6
 800a7f4:	2b04      	cmp	r3, #4
 800a7f6:	bf08      	it	eq
 800a7f8:	1aad      	subeq	r5, r5, r2
 800a7fa:	68a3      	ldr	r3, [r4, #8]
 800a7fc:	6922      	ldr	r2, [r4, #16]
 800a7fe:	bf0c      	ite	eq
 800a800:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a804:	2500      	movne	r5, #0
 800a806:	4293      	cmp	r3, r2
 800a808:	bfc4      	itt	gt
 800a80a:	1a9b      	subgt	r3, r3, r2
 800a80c:	18ed      	addgt	r5, r5, r3
 800a80e:	f04f 0900 	mov.w	r9, #0
 800a812:	341a      	adds	r4, #26
 800a814:	454d      	cmp	r5, r9
 800a816:	d11a      	bne.n	800a84e <_printf_common+0xd6>
 800a818:	2000      	movs	r0, #0
 800a81a:	e008      	b.n	800a82e <_printf_common+0xb6>
 800a81c:	2301      	movs	r3, #1
 800a81e:	4652      	mov	r2, sl
 800a820:	4639      	mov	r1, r7
 800a822:	4630      	mov	r0, r6
 800a824:	47c0      	blx	r8
 800a826:	3001      	adds	r0, #1
 800a828:	d103      	bne.n	800a832 <_printf_common+0xba>
 800a82a:	f04f 30ff 	mov.w	r0, #4294967295
 800a82e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a832:	3501      	adds	r5, #1
 800a834:	e7c3      	b.n	800a7be <_printf_common+0x46>
 800a836:	18e1      	adds	r1, r4, r3
 800a838:	1c5a      	adds	r2, r3, #1
 800a83a:	2030      	movs	r0, #48	; 0x30
 800a83c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a840:	4422      	add	r2, r4
 800a842:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a846:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a84a:	3302      	adds	r3, #2
 800a84c:	e7c5      	b.n	800a7da <_printf_common+0x62>
 800a84e:	2301      	movs	r3, #1
 800a850:	4622      	mov	r2, r4
 800a852:	4639      	mov	r1, r7
 800a854:	4630      	mov	r0, r6
 800a856:	47c0      	blx	r8
 800a858:	3001      	adds	r0, #1
 800a85a:	d0e6      	beq.n	800a82a <_printf_common+0xb2>
 800a85c:	f109 0901 	add.w	r9, r9, #1
 800a860:	e7d8      	b.n	800a814 <_printf_common+0x9c>
	...

0800a864 <_printf_i>:
 800a864:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a868:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800a86c:	460c      	mov	r4, r1
 800a86e:	7e09      	ldrb	r1, [r1, #24]
 800a870:	b085      	sub	sp, #20
 800a872:	296e      	cmp	r1, #110	; 0x6e
 800a874:	4617      	mov	r7, r2
 800a876:	4606      	mov	r6, r0
 800a878:	4698      	mov	r8, r3
 800a87a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a87c:	f000 80b3 	beq.w	800a9e6 <_printf_i+0x182>
 800a880:	d822      	bhi.n	800a8c8 <_printf_i+0x64>
 800a882:	2963      	cmp	r1, #99	; 0x63
 800a884:	d036      	beq.n	800a8f4 <_printf_i+0x90>
 800a886:	d80a      	bhi.n	800a89e <_printf_i+0x3a>
 800a888:	2900      	cmp	r1, #0
 800a88a:	f000 80b9 	beq.w	800aa00 <_printf_i+0x19c>
 800a88e:	2958      	cmp	r1, #88	; 0x58
 800a890:	f000 8083 	beq.w	800a99a <_printf_i+0x136>
 800a894:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a898:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800a89c:	e032      	b.n	800a904 <_printf_i+0xa0>
 800a89e:	2964      	cmp	r1, #100	; 0x64
 800a8a0:	d001      	beq.n	800a8a6 <_printf_i+0x42>
 800a8a2:	2969      	cmp	r1, #105	; 0x69
 800a8a4:	d1f6      	bne.n	800a894 <_printf_i+0x30>
 800a8a6:	6820      	ldr	r0, [r4, #0]
 800a8a8:	6813      	ldr	r3, [r2, #0]
 800a8aa:	0605      	lsls	r5, r0, #24
 800a8ac:	f103 0104 	add.w	r1, r3, #4
 800a8b0:	d52a      	bpl.n	800a908 <_printf_i+0xa4>
 800a8b2:	681b      	ldr	r3, [r3, #0]
 800a8b4:	6011      	str	r1, [r2, #0]
 800a8b6:	2b00      	cmp	r3, #0
 800a8b8:	da03      	bge.n	800a8c2 <_printf_i+0x5e>
 800a8ba:	222d      	movs	r2, #45	; 0x2d
 800a8bc:	425b      	negs	r3, r3
 800a8be:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800a8c2:	486f      	ldr	r0, [pc, #444]	; (800aa80 <_printf_i+0x21c>)
 800a8c4:	220a      	movs	r2, #10
 800a8c6:	e039      	b.n	800a93c <_printf_i+0xd8>
 800a8c8:	2973      	cmp	r1, #115	; 0x73
 800a8ca:	f000 809d 	beq.w	800aa08 <_printf_i+0x1a4>
 800a8ce:	d808      	bhi.n	800a8e2 <_printf_i+0x7e>
 800a8d0:	296f      	cmp	r1, #111	; 0x6f
 800a8d2:	d020      	beq.n	800a916 <_printf_i+0xb2>
 800a8d4:	2970      	cmp	r1, #112	; 0x70
 800a8d6:	d1dd      	bne.n	800a894 <_printf_i+0x30>
 800a8d8:	6823      	ldr	r3, [r4, #0]
 800a8da:	f043 0320 	orr.w	r3, r3, #32
 800a8de:	6023      	str	r3, [r4, #0]
 800a8e0:	e003      	b.n	800a8ea <_printf_i+0x86>
 800a8e2:	2975      	cmp	r1, #117	; 0x75
 800a8e4:	d017      	beq.n	800a916 <_printf_i+0xb2>
 800a8e6:	2978      	cmp	r1, #120	; 0x78
 800a8e8:	d1d4      	bne.n	800a894 <_printf_i+0x30>
 800a8ea:	2378      	movs	r3, #120	; 0x78
 800a8ec:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a8f0:	4864      	ldr	r0, [pc, #400]	; (800aa84 <_printf_i+0x220>)
 800a8f2:	e055      	b.n	800a9a0 <_printf_i+0x13c>
 800a8f4:	6813      	ldr	r3, [r2, #0]
 800a8f6:	1d19      	adds	r1, r3, #4
 800a8f8:	681b      	ldr	r3, [r3, #0]
 800a8fa:	6011      	str	r1, [r2, #0]
 800a8fc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a900:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a904:	2301      	movs	r3, #1
 800a906:	e08c      	b.n	800aa22 <_printf_i+0x1be>
 800a908:	681b      	ldr	r3, [r3, #0]
 800a90a:	6011      	str	r1, [r2, #0]
 800a90c:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a910:	bf18      	it	ne
 800a912:	b21b      	sxthne	r3, r3
 800a914:	e7cf      	b.n	800a8b6 <_printf_i+0x52>
 800a916:	6813      	ldr	r3, [r2, #0]
 800a918:	6825      	ldr	r5, [r4, #0]
 800a91a:	1d18      	adds	r0, r3, #4
 800a91c:	6010      	str	r0, [r2, #0]
 800a91e:	0628      	lsls	r0, r5, #24
 800a920:	d501      	bpl.n	800a926 <_printf_i+0xc2>
 800a922:	681b      	ldr	r3, [r3, #0]
 800a924:	e002      	b.n	800a92c <_printf_i+0xc8>
 800a926:	0668      	lsls	r0, r5, #25
 800a928:	d5fb      	bpl.n	800a922 <_printf_i+0xbe>
 800a92a:	881b      	ldrh	r3, [r3, #0]
 800a92c:	4854      	ldr	r0, [pc, #336]	; (800aa80 <_printf_i+0x21c>)
 800a92e:	296f      	cmp	r1, #111	; 0x6f
 800a930:	bf14      	ite	ne
 800a932:	220a      	movne	r2, #10
 800a934:	2208      	moveq	r2, #8
 800a936:	2100      	movs	r1, #0
 800a938:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a93c:	6865      	ldr	r5, [r4, #4]
 800a93e:	60a5      	str	r5, [r4, #8]
 800a940:	2d00      	cmp	r5, #0
 800a942:	f2c0 8095 	blt.w	800aa70 <_printf_i+0x20c>
 800a946:	6821      	ldr	r1, [r4, #0]
 800a948:	f021 0104 	bic.w	r1, r1, #4
 800a94c:	6021      	str	r1, [r4, #0]
 800a94e:	2b00      	cmp	r3, #0
 800a950:	d13d      	bne.n	800a9ce <_printf_i+0x16a>
 800a952:	2d00      	cmp	r5, #0
 800a954:	f040 808e 	bne.w	800aa74 <_printf_i+0x210>
 800a958:	4665      	mov	r5, ip
 800a95a:	2a08      	cmp	r2, #8
 800a95c:	d10b      	bne.n	800a976 <_printf_i+0x112>
 800a95e:	6823      	ldr	r3, [r4, #0]
 800a960:	07db      	lsls	r3, r3, #31
 800a962:	d508      	bpl.n	800a976 <_printf_i+0x112>
 800a964:	6923      	ldr	r3, [r4, #16]
 800a966:	6862      	ldr	r2, [r4, #4]
 800a968:	429a      	cmp	r2, r3
 800a96a:	bfde      	ittt	le
 800a96c:	2330      	movle	r3, #48	; 0x30
 800a96e:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a972:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a976:	ebac 0305 	sub.w	r3, ip, r5
 800a97a:	6123      	str	r3, [r4, #16]
 800a97c:	f8cd 8000 	str.w	r8, [sp]
 800a980:	463b      	mov	r3, r7
 800a982:	aa03      	add	r2, sp, #12
 800a984:	4621      	mov	r1, r4
 800a986:	4630      	mov	r0, r6
 800a988:	f7ff fef6 	bl	800a778 <_printf_common>
 800a98c:	3001      	adds	r0, #1
 800a98e:	d14d      	bne.n	800aa2c <_printf_i+0x1c8>
 800a990:	f04f 30ff 	mov.w	r0, #4294967295
 800a994:	b005      	add	sp, #20
 800a996:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a99a:	4839      	ldr	r0, [pc, #228]	; (800aa80 <_printf_i+0x21c>)
 800a99c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800a9a0:	6813      	ldr	r3, [r2, #0]
 800a9a2:	6821      	ldr	r1, [r4, #0]
 800a9a4:	1d1d      	adds	r5, r3, #4
 800a9a6:	681b      	ldr	r3, [r3, #0]
 800a9a8:	6015      	str	r5, [r2, #0]
 800a9aa:	060a      	lsls	r2, r1, #24
 800a9ac:	d50b      	bpl.n	800a9c6 <_printf_i+0x162>
 800a9ae:	07ca      	lsls	r2, r1, #31
 800a9b0:	bf44      	itt	mi
 800a9b2:	f041 0120 	orrmi.w	r1, r1, #32
 800a9b6:	6021      	strmi	r1, [r4, #0]
 800a9b8:	b91b      	cbnz	r3, 800a9c2 <_printf_i+0x15e>
 800a9ba:	6822      	ldr	r2, [r4, #0]
 800a9bc:	f022 0220 	bic.w	r2, r2, #32
 800a9c0:	6022      	str	r2, [r4, #0]
 800a9c2:	2210      	movs	r2, #16
 800a9c4:	e7b7      	b.n	800a936 <_printf_i+0xd2>
 800a9c6:	064d      	lsls	r5, r1, #25
 800a9c8:	bf48      	it	mi
 800a9ca:	b29b      	uxthmi	r3, r3
 800a9cc:	e7ef      	b.n	800a9ae <_printf_i+0x14a>
 800a9ce:	4665      	mov	r5, ip
 800a9d0:	fbb3 f1f2 	udiv	r1, r3, r2
 800a9d4:	fb02 3311 	mls	r3, r2, r1, r3
 800a9d8:	5cc3      	ldrb	r3, [r0, r3]
 800a9da:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800a9de:	460b      	mov	r3, r1
 800a9e0:	2900      	cmp	r1, #0
 800a9e2:	d1f5      	bne.n	800a9d0 <_printf_i+0x16c>
 800a9e4:	e7b9      	b.n	800a95a <_printf_i+0xf6>
 800a9e6:	6813      	ldr	r3, [r2, #0]
 800a9e8:	6825      	ldr	r5, [r4, #0]
 800a9ea:	6961      	ldr	r1, [r4, #20]
 800a9ec:	1d18      	adds	r0, r3, #4
 800a9ee:	6010      	str	r0, [r2, #0]
 800a9f0:	0628      	lsls	r0, r5, #24
 800a9f2:	681b      	ldr	r3, [r3, #0]
 800a9f4:	d501      	bpl.n	800a9fa <_printf_i+0x196>
 800a9f6:	6019      	str	r1, [r3, #0]
 800a9f8:	e002      	b.n	800aa00 <_printf_i+0x19c>
 800a9fa:	066a      	lsls	r2, r5, #25
 800a9fc:	d5fb      	bpl.n	800a9f6 <_printf_i+0x192>
 800a9fe:	8019      	strh	r1, [r3, #0]
 800aa00:	2300      	movs	r3, #0
 800aa02:	6123      	str	r3, [r4, #16]
 800aa04:	4665      	mov	r5, ip
 800aa06:	e7b9      	b.n	800a97c <_printf_i+0x118>
 800aa08:	6813      	ldr	r3, [r2, #0]
 800aa0a:	1d19      	adds	r1, r3, #4
 800aa0c:	6011      	str	r1, [r2, #0]
 800aa0e:	681d      	ldr	r5, [r3, #0]
 800aa10:	6862      	ldr	r2, [r4, #4]
 800aa12:	2100      	movs	r1, #0
 800aa14:	4628      	mov	r0, r5
 800aa16:	f7f5 fc03 	bl	8000220 <memchr>
 800aa1a:	b108      	cbz	r0, 800aa20 <_printf_i+0x1bc>
 800aa1c:	1b40      	subs	r0, r0, r5
 800aa1e:	6060      	str	r0, [r4, #4]
 800aa20:	6863      	ldr	r3, [r4, #4]
 800aa22:	6123      	str	r3, [r4, #16]
 800aa24:	2300      	movs	r3, #0
 800aa26:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800aa2a:	e7a7      	b.n	800a97c <_printf_i+0x118>
 800aa2c:	6923      	ldr	r3, [r4, #16]
 800aa2e:	462a      	mov	r2, r5
 800aa30:	4639      	mov	r1, r7
 800aa32:	4630      	mov	r0, r6
 800aa34:	47c0      	blx	r8
 800aa36:	3001      	adds	r0, #1
 800aa38:	d0aa      	beq.n	800a990 <_printf_i+0x12c>
 800aa3a:	6823      	ldr	r3, [r4, #0]
 800aa3c:	079b      	lsls	r3, r3, #30
 800aa3e:	d413      	bmi.n	800aa68 <_printf_i+0x204>
 800aa40:	68e0      	ldr	r0, [r4, #12]
 800aa42:	9b03      	ldr	r3, [sp, #12]
 800aa44:	4298      	cmp	r0, r3
 800aa46:	bfb8      	it	lt
 800aa48:	4618      	movlt	r0, r3
 800aa4a:	e7a3      	b.n	800a994 <_printf_i+0x130>
 800aa4c:	2301      	movs	r3, #1
 800aa4e:	464a      	mov	r2, r9
 800aa50:	4639      	mov	r1, r7
 800aa52:	4630      	mov	r0, r6
 800aa54:	47c0      	blx	r8
 800aa56:	3001      	adds	r0, #1
 800aa58:	d09a      	beq.n	800a990 <_printf_i+0x12c>
 800aa5a:	3501      	adds	r5, #1
 800aa5c:	68e3      	ldr	r3, [r4, #12]
 800aa5e:	9a03      	ldr	r2, [sp, #12]
 800aa60:	1a9b      	subs	r3, r3, r2
 800aa62:	42ab      	cmp	r3, r5
 800aa64:	dcf2      	bgt.n	800aa4c <_printf_i+0x1e8>
 800aa66:	e7eb      	b.n	800aa40 <_printf_i+0x1dc>
 800aa68:	2500      	movs	r5, #0
 800aa6a:	f104 0919 	add.w	r9, r4, #25
 800aa6e:	e7f5      	b.n	800aa5c <_printf_i+0x1f8>
 800aa70:	2b00      	cmp	r3, #0
 800aa72:	d1ac      	bne.n	800a9ce <_printf_i+0x16a>
 800aa74:	7803      	ldrb	r3, [r0, #0]
 800aa76:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800aa7a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800aa7e:	e76c      	b.n	800a95a <_printf_i+0xf6>
 800aa80:	0800dbc2 	.word	0x0800dbc2
 800aa84:	0800dbd3 	.word	0x0800dbd3

0800aa88 <_scanf_float>:
 800aa88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa8c:	469a      	mov	sl, r3
 800aa8e:	688b      	ldr	r3, [r1, #8]
 800aa90:	4616      	mov	r6, r2
 800aa92:	1e5a      	subs	r2, r3, #1
 800aa94:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800aa98:	b087      	sub	sp, #28
 800aa9a:	bf83      	ittte	hi
 800aa9c:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 800aaa0:	189b      	addhi	r3, r3, r2
 800aaa2:	9301      	strhi	r3, [sp, #4]
 800aaa4:	2300      	movls	r3, #0
 800aaa6:	bf86      	itte	hi
 800aaa8:	f240 135d 	movwhi	r3, #349	; 0x15d
 800aaac:	608b      	strhi	r3, [r1, #8]
 800aaae:	9301      	strls	r3, [sp, #4]
 800aab0:	680b      	ldr	r3, [r1, #0]
 800aab2:	4688      	mov	r8, r1
 800aab4:	f04f 0b00 	mov.w	fp, #0
 800aab8:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800aabc:	f848 3b1c 	str.w	r3, [r8], #28
 800aac0:	e9cd bb03 	strd	fp, fp, [sp, #12]
 800aac4:	4607      	mov	r7, r0
 800aac6:	460c      	mov	r4, r1
 800aac8:	4645      	mov	r5, r8
 800aaca:	465a      	mov	r2, fp
 800aacc:	46d9      	mov	r9, fp
 800aace:	f8cd b008 	str.w	fp, [sp, #8]
 800aad2:	68a1      	ldr	r1, [r4, #8]
 800aad4:	b181      	cbz	r1, 800aaf8 <_scanf_float+0x70>
 800aad6:	6833      	ldr	r3, [r6, #0]
 800aad8:	781b      	ldrb	r3, [r3, #0]
 800aada:	2b49      	cmp	r3, #73	; 0x49
 800aadc:	d071      	beq.n	800abc2 <_scanf_float+0x13a>
 800aade:	d84d      	bhi.n	800ab7c <_scanf_float+0xf4>
 800aae0:	2b39      	cmp	r3, #57	; 0x39
 800aae2:	d840      	bhi.n	800ab66 <_scanf_float+0xde>
 800aae4:	2b31      	cmp	r3, #49	; 0x31
 800aae6:	f080 8088 	bcs.w	800abfa <_scanf_float+0x172>
 800aaea:	2b2d      	cmp	r3, #45	; 0x2d
 800aaec:	f000 8090 	beq.w	800ac10 <_scanf_float+0x188>
 800aaf0:	d815      	bhi.n	800ab1e <_scanf_float+0x96>
 800aaf2:	2b2b      	cmp	r3, #43	; 0x2b
 800aaf4:	f000 808c 	beq.w	800ac10 <_scanf_float+0x188>
 800aaf8:	f1b9 0f00 	cmp.w	r9, #0
 800aafc:	d003      	beq.n	800ab06 <_scanf_float+0x7e>
 800aafe:	6823      	ldr	r3, [r4, #0]
 800ab00:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ab04:	6023      	str	r3, [r4, #0]
 800ab06:	3a01      	subs	r2, #1
 800ab08:	2a01      	cmp	r2, #1
 800ab0a:	f200 80ea 	bhi.w	800ace2 <_scanf_float+0x25a>
 800ab0e:	4545      	cmp	r5, r8
 800ab10:	f200 80dc 	bhi.w	800accc <_scanf_float+0x244>
 800ab14:	2601      	movs	r6, #1
 800ab16:	4630      	mov	r0, r6
 800ab18:	b007      	add	sp, #28
 800ab1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab1e:	2b2e      	cmp	r3, #46	; 0x2e
 800ab20:	f000 809f 	beq.w	800ac62 <_scanf_float+0x1da>
 800ab24:	2b30      	cmp	r3, #48	; 0x30
 800ab26:	d1e7      	bne.n	800aaf8 <_scanf_float+0x70>
 800ab28:	6820      	ldr	r0, [r4, #0]
 800ab2a:	f410 7f80 	tst.w	r0, #256	; 0x100
 800ab2e:	d064      	beq.n	800abfa <_scanf_float+0x172>
 800ab30:	9b01      	ldr	r3, [sp, #4]
 800ab32:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 800ab36:	6020      	str	r0, [r4, #0]
 800ab38:	f109 0901 	add.w	r9, r9, #1
 800ab3c:	b11b      	cbz	r3, 800ab46 <_scanf_float+0xbe>
 800ab3e:	3b01      	subs	r3, #1
 800ab40:	3101      	adds	r1, #1
 800ab42:	9301      	str	r3, [sp, #4]
 800ab44:	60a1      	str	r1, [r4, #8]
 800ab46:	68a3      	ldr	r3, [r4, #8]
 800ab48:	3b01      	subs	r3, #1
 800ab4a:	60a3      	str	r3, [r4, #8]
 800ab4c:	6923      	ldr	r3, [r4, #16]
 800ab4e:	3301      	adds	r3, #1
 800ab50:	6123      	str	r3, [r4, #16]
 800ab52:	6873      	ldr	r3, [r6, #4]
 800ab54:	3b01      	subs	r3, #1
 800ab56:	2b00      	cmp	r3, #0
 800ab58:	6073      	str	r3, [r6, #4]
 800ab5a:	f340 80ac 	ble.w	800acb6 <_scanf_float+0x22e>
 800ab5e:	6833      	ldr	r3, [r6, #0]
 800ab60:	3301      	adds	r3, #1
 800ab62:	6033      	str	r3, [r6, #0]
 800ab64:	e7b5      	b.n	800aad2 <_scanf_float+0x4a>
 800ab66:	2b45      	cmp	r3, #69	; 0x45
 800ab68:	f000 8085 	beq.w	800ac76 <_scanf_float+0x1ee>
 800ab6c:	2b46      	cmp	r3, #70	; 0x46
 800ab6e:	d06a      	beq.n	800ac46 <_scanf_float+0x1be>
 800ab70:	2b41      	cmp	r3, #65	; 0x41
 800ab72:	d1c1      	bne.n	800aaf8 <_scanf_float+0x70>
 800ab74:	2a01      	cmp	r2, #1
 800ab76:	d1bf      	bne.n	800aaf8 <_scanf_float+0x70>
 800ab78:	2202      	movs	r2, #2
 800ab7a:	e046      	b.n	800ac0a <_scanf_float+0x182>
 800ab7c:	2b65      	cmp	r3, #101	; 0x65
 800ab7e:	d07a      	beq.n	800ac76 <_scanf_float+0x1ee>
 800ab80:	d818      	bhi.n	800abb4 <_scanf_float+0x12c>
 800ab82:	2b54      	cmp	r3, #84	; 0x54
 800ab84:	d066      	beq.n	800ac54 <_scanf_float+0x1cc>
 800ab86:	d811      	bhi.n	800abac <_scanf_float+0x124>
 800ab88:	2b4e      	cmp	r3, #78	; 0x4e
 800ab8a:	d1b5      	bne.n	800aaf8 <_scanf_float+0x70>
 800ab8c:	2a00      	cmp	r2, #0
 800ab8e:	d146      	bne.n	800ac1e <_scanf_float+0x196>
 800ab90:	f1b9 0f00 	cmp.w	r9, #0
 800ab94:	d145      	bne.n	800ac22 <_scanf_float+0x19a>
 800ab96:	6821      	ldr	r1, [r4, #0]
 800ab98:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 800ab9c:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 800aba0:	d13f      	bne.n	800ac22 <_scanf_float+0x19a>
 800aba2:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800aba6:	6021      	str	r1, [r4, #0]
 800aba8:	2201      	movs	r2, #1
 800abaa:	e02e      	b.n	800ac0a <_scanf_float+0x182>
 800abac:	2b59      	cmp	r3, #89	; 0x59
 800abae:	d01e      	beq.n	800abee <_scanf_float+0x166>
 800abb0:	2b61      	cmp	r3, #97	; 0x61
 800abb2:	e7de      	b.n	800ab72 <_scanf_float+0xea>
 800abb4:	2b6e      	cmp	r3, #110	; 0x6e
 800abb6:	d0e9      	beq.n	800ab8c <_scanf_float+0x104>
 800abb8:	d815      	bhi.n	800abe6 <_scanf_float+0x15e>
 800abba:	2b66      	cmp	r3, #102	; 0x66
 800abbc:	d043      	beq.n	800ac46 <_scanf_float+0x1be>
 800abbe:	2b69      	cmp	r3, #105	; 0x69
 800abc0:	d19a      	bne.n	800aaf8 <_scanf_float+0x70>
 800abc2:	f1bb 0f00 	cmp.w	fp, #0
 800abc6:	d138      	bne.n	800ac3a <_scanf_float+0x1b2>
 800abc8:	f1b9 0f00 	cmp.w	r9, #0
 800abcc:	d197      	bne.n	800aafe <_scanf_float+0x76>
 800abce:	6821      	ldr	r1, [r4, #0]
 800abd0:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 800abd4:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 800abd8:	d195      	bne.n	800ab06 <_scanf_float+0x7e>
 800abda:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800abde:	6021      	str	r1, [r4, #0]
 800abe0:	f04f 0b01 	mov.w	fp, #1
 800abe4:	e011      	b.n	800ac0a <_scanf_float+0x182>
 800abe6:	2b74      	cmp	r3, #116	; 0x74
 800abe8:	d034      	beq.n	800ac54 <_scanf_float+0x1cc>
 800abea:	2b79      	cmp	r3, #121	; 0x79
 800abec:	d184      	bne.n	800aaf8 <_scanf_float+0x70>
 800abee:	f1bb 0f07 	cmp.w	fp, #7
 800abf2:	d181      	bne.n	800aaf8 <_scanf_float+0x70>
 800abf4:	f04f 0b08 	mov.w	fp, #8
 800abf8:	e007      	b.n	800ac0a <_scanf_float+0x182>
 800abfa:	eb12 0f0b 	cmn.w	r2, fp
 800abfe:	f47f af7b 	bne.w	800aaf8 <_scanf_float+0x70>
 800ac02:	6821      	ldr	r1, [r4, #0]
 800ac04:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 800ac08:	6021      	str	r1, [r4, #0]
 800ac0a:	702b      	strb	r3, [r5, #0]
 800ac0c:	3501      	adds	r5, #1
 800ac0e:	e79a      	b.n	800ab46 <_scanf_float+0xbe>
 800ac10:	6821      	ldr	r1, [r4, #0]
 800ac12:	0608      	lsls	r0, r1, #24
 800ac14:	f57f af70 	bpl.w	800aaf8 <_scanf_float+0x70>
 800ac18:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800ac1c:	e7f4      	b.n	800ac08 <_scanf_float+0x180>
 800ac1e:	2a02      	cmp	r2, #2
 800ac20:	d047      	beq.n	800acb2 <_scanf_float+0x22a>
 800ac22:	f1bb 0f01 	cmp.w	fp, #1
 800ac26:	d003      	beq.n	800ac30 <_scanf_float+0x1a8>
 800ac28:	f1bb 0f04 	cmp.w	fp, #4
 800ac2c:	f47f af64 	bne.w	800aaf8 <_scanf_float+0x70>
 800ac30:	f10b 0b01 	add.w	fp, fp, #1
 800ac34:	fa5f fb8b 	uxtb.w	fp, fp
 800ac38:	e7e7      	b.n	800ac0a <_scanf_float+0x182>
 800ac3a:	f1bb 0f03 	cmp.w	fp, #3
 800ac3e:	d0f7      	beq.n	800ac30 <_scanf_float+0x1a8>
 800ac40:	f1bb 0f05 	cmp.w	fp, #5
 800ac44:	e7f2      	b.n	800ac2c <_scanf_float+0x1a4>
 800ac46:	f1bb 0f02 	cmp.w	fp, #2
 800ac4a:	f47f af55 	bne.w	800aaf8 <_scanf_float+0x70>
 800ac4e:	f04f 0b03 	mov.w	fp, #3
 800ac52:	e7da      	b.n	800ac0a <_scanf_float+0x182>
 800ac54:	f1bb 0f06 	cmp.w	fp, #6
 800ac58:	f47f af4e 	bne.w	800aaf8 <_scanf_float+0x70>
 800ac5c:	f04f 0b07 	mov.w	fp, #7
 800ac60:	e7d3      	b.n	800ac0a <_scanf_float+0x182>
 800ac62:	6821      	ldr	r1, [r4, #0]
 800ac64:	0588      	lsls	r0, r1, #22
 800ac66:	f57f af47 	bpl.w	800aaf8 <_scanf_float+0x70>
 800ac6a:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 800ac6e:	6021      	str	r1, [r4, #0]
 800ac70:	f8cd 9008 	str.w	r9, [sp, #8]
 800ac74:	e7c9      	b.n	800ac0a <_scanf_float+0x182>
 800ac76:	6821      	ldr	r1, [r4, #0]
 800ac78:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 800ac7c:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 800ac80:	d006      	beq.n	800ac90 <_scanf_float+0x208>
 800ac82:	0548      	lsls	r0, r1, #21
 800ac84:	f57f af38 	bpl.w	800aaf8 <_scanf_float+0x70>
 800ac88:	f1b9 0f00 	cmp.w	r9, #0
 800ac8c:	f43f af3b 	beq.w	800ab06 <_scanf_float+0x7e>
 800ac90:	0588      	lsls	r0, r1, #22
 800ac92:	bf58      	it	pl
 800ac94:	9802      	ldrpl	r0, [sp, #8]
 800ac96:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800ac9a:	bf58      	it	pl
 800ac9c:	eba9 0000 	subpl.w	r0, r9, r0
 800aca0:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 800aca4:	bf58      	it	pl
 800aca6:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 800acaa:	6021      	str	r1, [r4, #0]
 800acac:	f04f 0900 	mov.w	r9, #0
 800acb0:	e7ab      	b.n	800ac0a <_scanf_float+0x182>
 800acb2:	2203      	movs	r2, #3
 800acb4:	e7a9      	b.n	800ac0a <_scanf_float+0x182>
 800acb6:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800acba:	9205      	str	r2, [sp, #20]
 800acbc:	4631      	mov	r1, r6
 800acbe:	4638      	mov	r0, r7
 800acc0:	4798      	blx	r3
 800acc2:	9a05      	ldr	r2, [sp, #20]
 800acc4:	2800      	cmp	r0, #0
 800acc6:	f43f af04 	beq.w	800aad2 <_scanf_float+0x4a>
 800acca:	e715      	b.n	800aaf8 <_scanf_float+0x70>
 800accc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800acd0:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800acd4:	4632      	mov	r2, r6
 800acd6:	4638      	mov	r0, r7
 800acd8:	4798      	blx	r3
 800acda:	6923      	ldr	r3, [r4, #16]
 800acdc:	3b01      	subs	r3, #1
 800acde:	6123      	str	r3, [r4, #16]
 800ace0:	e715      	b.n	800ab0e <_scanf_float+0x86>
 800ace2:	f10b 33ff 	add.w	r3, fp, #4294967295
 800ace6:	2b06      	cmp	r3, #6
 800ace8:	d80a      	bhi.n	800ad00 <_scanf_float+0x278>
 800acea:	f1bb 0f02 	cmp.w	fp, #2
 800acee:	d968      	bls.n	800adc2 <_scanf_float+0x33a>
 800acf0:	f1ab 0b03 	sub.w	fp, fp, #3
 800acf4:	fa5f fb8b 	uxtb.w	fp, fp
 800acf8:	eba5 0b0b 	sub.w	fp, r5, fp
 800acfc:	455d      	cmp	r5, fp
 800acfe:	d14b      	bne.n	800ad98 <_scanf_float+0x310>
 800ad00:	6823      	ldr	r3, [r4, #0]
 800ad02:	05da      	lsls	r2, r3, #23
 800ad04:	d51f      	bpl.n	800ad46 <_scanf_float+0x2be>
 800ad06:	055b      	lsls	r3, r3, #21
 800ad08:	d468      	bmi.n	800addc <_scanf_float+0x354>
 800ad0a:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800ad0e:	6923      	ldr	r3, [r4, #16]
 800ad10:	2965      	cmp	r1, #101	; 0x65
 800ad12:	f103 33ff 	add.w	r3, r3, #4294967295
 800ad16:	f105 3bff 	add.w	fp, r5, #4294967295
 800ad1a:	6123      	str	r3, [r4, #16]
 800ad1c:	d00d      	beq.n	800ad3a <_scanf_float+0x2b2>
 800ad1e:	2945      	cmp	r1, #69	; 0x45
 800ad20:	d00b      	beq.n	800ad3a <_scanf_float+0x2b2>
 800ad22:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ad26:	4632      	mov	r2, r6
 800ad28:	4638      	mov	r0, r7
 800ad2a:	4798      	blx	r3
 800ad2c:	6923      	ldr	r3, [r4, #16]
 800ad2e:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 800ad32:	3b01      	subs	r3, #1
 800ad34:	f1a5 0b02 	sub.w	fp, r5, #2
 800ad38:	6123      	str	r3, [r4, #16]
 800ad3a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ad3e:	4632      	mov	r2, r6
 800ad40:	4638      	mov	r0, r7
 800ad42:	4798      	blx	r3
 800ad44:	465d      	mov	r5, fp
 800ad46:	6826      	ldr	r6, [r4, #0]
 800ad48:	f016 0610 	ands.w	r6, r6, #16
 800ad4c:	d17a      	bne.n	800ae44 <_scanf_float+0x3bc>
 800ad4e:	702e      	strb	r6, [r5, #0]
 800ad50:	6823      	ldr	r3, [r4, #0]
 800ad52:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800ad56:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ad5a:	d142      	bne.n	800ade2 <_scanf_float+0x35a>
 800ad5c:	9b02      	ldr	r3, [sp, #8]
 800ad5e:	eba9 0303 	sub.w	r3, r9, r3
 800ad62:	425a      	negs	r2, r3
 800ad64:	2b00      	cmp	r3, #0
 800ad66:	d149      	bne.n	800adfc <_scanf_float+0x374>
 800ad68:	2200      	movs	r2, #0
 800ad6a:	4641      	mov	r1, r8
 800ad6c:	4638      	mov	r0, r7
 800ad6e:	f000 feb3 	bl	800bad8 <_strtod_r>
 800ad72:	6825      	ldr	r5, [r4, #0]
 800ad74:	f8da 3000 	ldr.w	r3, [sl]
 800ad78:	f015 0f02 	tst.w	r5, #2
 800ad7c:	f103 0204 	add.w	r2, r3, #4
 800ad80:	ec59 8b10 	vmov	r8, r9, d0
 800ad84:	f8ca 2000 	str.w	r2, [sl]
 800ad88:	d043      	beq.n	800ae12 <_scanf_float+0x38a>
 800ad8a:	681b      	ldr	r3, [r3, #0]
 800ad8c:	e9c3 8900 	strd	r8, r9, [r3]
 800ad90:	68e3      	ldr	r3, [r4, #12]
 800ad92:	3301      	adds	r3, #1
 800ad94:	60e3      	str	r3, [r4, #12]
 800ad96:	e6be      	b.n	800ab16 <_scanf_float+0x8e>
 800ad98:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ad9c:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800ada0:	4632      	mov	r2, r6
 800ada2:	4638      	mov	r0, r7
 800ada4:	4798      	blx	r3
 800ada6:	6923      	ldr	r3, [r4, #16]
 800ada8:	3b01      	subs	r3, #1
 800adaa:	6123      	str	r3, [r4, #16]
 800adac:	e7a6      	b.n	800acfc <_scanf_float+0x274>
 800adae:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800adb2:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800adb6:	4632      	mov	r2, r6
 800adb8:	4638      	mov	r0, r7
 800adba:	4798      	blx	r3
 800adbc:	6923      	ldr	r3, [r4, #16]
 800adbe:	3b01      	subs	r3, #1
 800adc0:	6123      	str	r3, [r4, #16]
 800adc2:	4545      	cmp	r5, r8
 800adc4:	d8f3      	bhi.n	800adae <_scanf_float+0x326>
 800adc6:	e6a5      	b.n	800ab14 <_scanf_float+0x8c>
 800adc8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800adcc:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800add0:	4632      	mov	r2, r6
 800add2:	4638      	mov	r0, r7
 800add4:	4798      	blx	r3
 800add6:	6923      	ldr	r3, [r4, #16]
 800add8:	3b01      	subs	r3, #1
 800adda:	6123      	str	r3, [r4, #16]
 800addc:	4545      	cmp	r5, r8
 800adde:	d8f3      	bhi.n	800adc8 <_scanf_float+0x340>
 800ade0:	e698      	b.n	800ab14 <_scanf_float+0x8c>
 800ade2:	9b03      	ldr	r3, [sp, #12]
 800ade4:	2b00      	cmp	r3, #0
 800ade6:	d0bf      	beq.n	800ad68 <_scanf_float+0x2e0>
 800ade8:	9904      	ldr	r1, [sp, #16]
 800adea:	230a      	movs	r3, #10
 800adec:	4632      	mov	r2, r6
 800adee:	3101      	adds	r1, #1
 800adf0:	4638      	mov	r0, r7
 800adf2:	f000 fefd 	bl	800bbf0 <_strtol_r>
 800adf6:	9b03      	ldr	r3, [sp, #12]
 800adf8:	9d04      	ldr	r5, [sp, #16]
 800adfa:	1ac2      	subs	r2, r0, r3
 800adfc:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800ae00:	429d      	cmp	r5, r3
 800ae02:	bf28      	it	cs
 800ae04:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 800ae08:	490f      	ldr	r1, [pc, #60]	; (800ae48 <_scanf_float+0x3c0>)
 800ae0a:	4628      	mov	r0, r5
 800ae0c:	f000 f834 	bl	800ae78 <siprintf>
 800ae10:	e7aa      	b.n	800ad68 <_scanf_float+0x2e0>
 800ae12:	f015 0504 	ands.w	r5, r5, #4
 800ae16:	d1b8      	bne.n	800ad8a <_scanf_float+0x302>
 800ae18:	681f      	ldr	r7, [r3, #0]
 800ae1a:	ee10 2a10 	vmov	r2, s0
 800ae1e:	464b      	mov	r3, r9
 800ae20:	ee10 0a10 	vmov	r0, s0
 800ae24:	4649      	mov	r1, r9
 800ae26:	f7f5 fea1 	bl	8000b6c <__aeabi_dcmpun>
 800ae2a:	b128      	cbz	r0, 800ae38 <_scanf_float+0x3b0>
 800ae2c:	4628      	mov	r0, r5
 800ae2e:	f000 f81d 	bl	800ae6c <nanf>
 800ae32:	ed87 0a00 	vstr	s0, [r7]
 800ae36:	e7ab      	b.n	800ad90 <_scanf_float+0x308>
 800ae38:	4640      	mov	r0, r8
 800ae3a:	4649      	mov	r1, r9
 800ae3c:	f7f5 fef4 	bl	8000c28 <__aeabi_d2f>
 800ae40:	6038      	str	r0, [r7, #0]
 800ae42:	e7a5      	b.n	800ad90 <_scanf_float+0x308>
 800ae44:	2600      	movs	r6, #0
 800ae46:	e666      	b.n	800ab16 <_scanf_float+0x8e>
 800ae48:	0800dbe4 	.word	0x0800dbe4

0800ae4c <_sbrk_r>:
 800ae4c:	b538      	push	{r3, r4, r5, lr}
 800ae4e:	4c06      	ldr	r4, [pc, #24]	; (800ae68 <_sbrk_r+0x1c>)
 800ae50:	2300      	movs	r3, #0
 800ae52:	4605      	mov	r5, r0
 800ae54:	4608      	mov	r0, r1
 800ae56:	6023      	str	r3, [r4, #0]
 800ae58:	f7f6 fe16 	bl	8001a88 <_sbrk>
 800ae5c:	1c43      	adds	r3, r0, #1
 800ae5e:	d102      	bne.n	800ae66 <_sbrk_r+0x1a>
 800ae60:	6823      	ldr	r3, [r4, #0]
 800ae62:	b103      	cbz	r3, 800ae66 <_sbrk_r+0x1a>
 800ae64:	602b      	str	r3, [r5, #0]
 800ae66:	bd38      	pop	{r3, r4, r5, pc}
 800ae68:	2000217c 	.word	0x2000217c

0800ae6c <nanf>:
 800ae6c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800ae74 <nanf+0x8>
 800ae70:	4770      	bx	lr
 800ae72:	bf00      	nop
 800ae74:	7fc00000 	.word	0x7fc00000

0800ae78 <siprintf>:
 800ae78:	b40e      	push	{r1, r2, r3}
 800ae7a:	b500      	push	{lr}
 800ae7c:	b09c      	sub	sp, #112	; 0x70
 800ae7e:	ab1d      	add	r3, sp, #116	; 0x74
 800ae80:	9002      	str	r0, [sp, #8]
 800ae82:	9006      	str	r0, [sp, #24]
 800ae84:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800ae88:	4809      	ldr	r0, [pc, #36]	; (800aeb0 <siprintf+0x38>)
 800ae8a:	9107      	str	r1, [sp, #28]
 800ae8c:	9104      	str	r1, [sp, #16]
 800ae8e:	4909      	ldr	r1, [pc, #36]	; (800aeb4 <siprintf+0x3c>)
 800ae90:	f853 2b04 	ldr.w	r2, [r3], #4
 800ae94:	9105      	str	r1, [sp, #20]
 800ae96:	6800      	ldr	r0, [r0, #0]
 800ae98:	9301      	str	r3, [sp, #4]
 800ae9a:	a902      	add	r1, sp, #8
 800ae9c:	f002 fce0 	bl	800d860 <_svfiprintf_r>
 800aea0:	9b02      	ldr	r3, [sp, #8]
 800aea2:	2200      	movs	r2, #0
 800aea4:	701a      	strb	r2, [r3, #0]
 800aea6:	b01c      	add	sp, #112	; 0x70
 800aea8:	f85d eb04 	ldr.w	lr, [sp], #4
 800aeac:	b003      	add	sp, #12
 800aeae:	4770      	bx	lr
 800aeb0:	200001a0 	.word	0x200001a0
 800aeb4:	ffff0208 	.word	0xffff0208

0800aeb8 <sulp>:
 800aeb8:	b570      	push	{r4, r5, r6, lr}
 800aeba:	4604      	mov	r4, r0
 800aebc:	460d      	mov	r5, r1
 800aebe:	ec45 4b10 	vmov	d0, r4, r5
 800aec2:	4616      	mov	r6, r2
 800aec4:	f002 fb30 	bl	800d528 <__ulp>
 800aec8:	ec51 0b10 	vmov	r0, r1, d0
 800aecc:	b17e      	cbz	r6, 800aeee <sulp+0x36>
 800aece:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800aed2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800aed6:	2b00      	cmp	r3, #0
 800aed8:	dd09      	ble.n	800aeee <sulp+0x36>
 800aeda:	051b      	lsls	r3, r3, #20
 800aedc:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800aee0:	2400      	movs	r4, #0
 800aee2:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800aee6:	4622      	mov	r2, r4
 800aee8:	462b      	mov	r3, r5
 800aeea:	f7f5 fba5 	bl	8000638 <__aeabi_dmul>
 800aeee:	bd70      	pop	{r4, r5, r6, pc}

0800aef0 <_strtod_l>:
 800aef0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aef4:	461f      	mov	r7, r3
 800aef6:	b0a1      	sub	sp, #132	; 0x84
 800aef8:	2300      	movs	r3, #0
 800aefa:	4681      	mov	r9, r0
 800aefc:	4638      	mov	r0, r7
 800aefe:	460e      	mov	r6, r1
 800af00:	9217      	str	r2, [sp, #92]	; 0x5c
 800af02:	931c      	str	r3, [sp, #112]	; 0x70
 800af04:	f002 f815 	bl	800cf32 <__localeconv_l>
 800af08:	4680      	mov	r8, r0
 800af0a:	6800      	ldr	r0, [r0, #0]
 800af0c:	f7f5 f980 	bl	8000210 <strlen>
 800af10:	f04f 0a00 	mov.w	sl, #0
 800af14:	4604      	mov	r4, r0
 800af16:	f04f 0b00 	mov.w	fp, #0
 800af1a:	961b      	str	r6, [sp, #108]	; 0x6c
 800af1c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800af1e:	781a      	ldrb	r2, [r3, #0]
 800af20:	2a0d      	cmp	r2, #13
 800af22:	d832      	bhi.n	800af8a <_strtod_l+0x9a>
 800af24:	2a09      	cmp	r2, #9
 800af26:	d236      	bcs.n	800af96 <_strtod_l+0xa6>
 800af28:	2a00      	cmp	r2, #0
 800af2a:	d03e      	beq.n	800afaa <_strtod_l+0xba>
 800af2c:	2300      	movs	r3, #0
 800af2e:	930d      	str	r3, [sp, #52]	; 0x34
 800af30:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800af32:	782b      	ldrb	r3, [r5, #0]
 800af34:	2b30      	cmp	r3, #48	; 0x30
 800af36:	f040 80ac 	bne.w	800b092 <_strtod_l+0x1a2>
 800af3a:	786b      	ldrb	r3, [r5, #1]
 800af3c:	2b58      	cmp	r3, #88	; 0x58
 800af3e:	d001      	beq.n	800af44 <_strtod_l+0x54>
 800af40:	2b78      	cmp	r3, #120	; 0x78
 800af42:	d167      	bne.n	800b014 <_strtod_l+0x124>
 800af44:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800af46:	9301      	str	r3, [sp, #4]
 800af48:	ab1c      	add	r3, sp, #112	; 0x70
 800af4a:	9300      	str	r3, [sp, #0]
 800af4c:	9702      	str	r7, [sp, #8]
 800af4e:	ab1d      	add	r3, sp, #116	; 0x74
 800af50:	4a88      	ldr	r2, [pc, #544]	; (800b174 <_strtod_l+0x284>)
 800af52:	a91b      	add	r1, sp, #108	; 0x6c
 800af54:	4648      	mov	r0, r9
 800af56:	f001 fd12 	bl	800c97e <__gethex>
 800af5a:	f010 0407 	ands.w	r4, r0, #7
 800af5e:	4606      	mov	r6, r0
 800af60:	d005      	beq.n	800af6e <_strtod_l+0x7e>
 800af62:	2c06      	cmp	r4, #6
 800af64:	d12b      	bne.n	800afbe <_strtod_l+0xce>
 800af66:	3501      	adds	r5, #1
 800af68:	2300      	movs	r3, #0
 800af6a:	951b      	str	r5, [sp, #108]	; 0x6c
 800af6c:	930d      	str	r3, [sp, #52]	; 0x34
 800af6e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800af70:	2b00      	cmp	r3, #0
 800af72:	f040 859a 	bne.w	800baaa <_strtod_l+0xbba>
 800af76:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800af78:	b1e3      	cbz	r3, 800afb4 <_strtod_l+0xc4>
 800af7a:	4652      	mov	r2, sl
 800af7c:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800af80:	ec43 2b10 	vmov	d0, r2, r3
 800af84:	b021      	add	sp, #132	; 0x84
 800af86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af8a:	2a2b      	cmp	r2, #43	; 0x2b
 800af8c:	d015      	beq.n	800afba <_strtod_l+0xca>
 800af8e:	2a2d      	cmp	r2, #45	; 0x2d
 800af90:	d004      	beq.n	800af9c <_strtod_l+0xac>
 800af92:	2a20      	cmp	r2, #32
 800af94:	d1ca      	bne.n	800af2c <_strtod_l+0x3c>
 800af96:	3301      	adds	r3, #1
 800af98:	931b      	str	r3, [sp, #108]	; 0x6c
 800af9a:	e7bf      	b.n	800af1c <_strtod_l+0x2c>
 800af9c:	2201      	movs	r2, #1
 800af9e:	920d      	str	r2, [sp, #52]	; 0x34
 800afa0:	1c5a      	adds	r2, r3, #1
 800afa2:	921b      	str	r2, [sp, #108]	; 0x6c
 800afa4:	785b      	ldrb	r3, [r3, #1]
 800afa6:	2b00      	cmp	r3, #0
 800afa8:	d1c2      	bne.n	800af30 <_strtod_l+0x40>
 800afaa:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800afac:	961b      	str	r6, [sp, #108]	; 0x6c
 800afae:	2b00      	cmp	r3, #0
 800afb0:	f040 8579 	bne.w	800baa6 <_strtod_l+0xbb6>
 800afb4:	4652      	mov	r2, sl
 800afb6:	465b      	mov	r3, fp
 800afb8:	e7e2      	b.n	800af80 <_strtod_l+0x90>
 800afba:	2200      	movs	r2, #0
 800afbc:	e7ef      	b.n	800af9e <_strtod_l+0xae>
 800afbe:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800afc0:	b13a      	cbz	r2, 800afd2 <_strtod_l+0xe2>
 800afc2:	2135      	movs	r1, #53	; 0x35
 800afc4:	a81e      	add	r0, sp, #120	; 0x78
 800afc6:	f002 fba7 	bl	800d718 <__copybits>
 800afca:	991c      	ldr	r1, [sp, #112]	; 0x70
 800afcc:	4648      	mov	r0, r9
 800afce:	f002 f814 	bl	800cffa <_Bfree>
 800afd2:	3c01      	subs	r4, #1
 800afd4:	2c04      	cmp	r4, #4
 800afd6:	d806      	bhi.n	800afe6 <_strtod_l+0xf6>
 800afd8:	e8df f004 	tbb	[pc, r4]
 800afdc:	1714030a 	.word	0x1714030a
 800afe0:	0a          	.byte	0x0a
 800afe1:	00          	.byte	0x00
 800afe2:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 800afe6:	0730      	lsls	r0, r6, #28
 800afe8:	d5c1      	bpl.n	800af6e <_strtod_l+0x7e>
 800afea:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800afee:	e7be      	b.n	800af6e <_strtod_l+0x7e>
 800aff0:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 800aff4:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800aff6:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800affa:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800affe:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800b002:	e7f0      	b.n	800afe6 <_strtod_l+0xf6>
 800b004:	f8df b170 	ldr.w	fp, [pc, #368]	; 800b178 <_strtod_l+0x288>
 800b008:	e7ed      	b.n	800afe6 <_strtod_l+0xf6>
 800b00a:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800b00e:	f04f 3aff 	mov.w	sl, #4294967295
 800b012:	e7e8      	b.n	800afe6 <_strtod_l+0xf6>
 800b014:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b016:	1c5a      	adds	r2, r3, #1
 800b018:	921b      	str	r2, [sp, #108]	; 0x6c
 800b01a:	785b      	ldrb	r3, [r3, #1]
 800b01c:	2b30      	cmp	r3, #48	; 0x30
 800b01e:	d0f9      	beq.n	800b014 <_strtod_l+0x124>
 800b020:	2b00      	cmp	r3, #0
 800b022:	d0a4      	beq.n	800af6e <_strtod_l+0x7e>
 800b024:	2301      	movs	r3, #1
 800b026:	2500      	movs	r5, #0
 800b028:	9306      	str	r3, [sp, #24]
 800b02a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b02c:	9308      	str	r3, [sp, #32]
 800b02e:	9507      	str	r5, [sp, #28]
 800b030:	9505      	str	r5, [sp, #20]
 800b032:	220a      	movs	r2, #10
 800b034:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800b036:	7807      	ldrb	r7, [r0, #0]
 800b038:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 800b03c:	b2d9      	uxtb	r1, r3
 800b03e:	2909      	cmp	r1, #9
 800b040:	d929      	bls.n	800b096 <_strtod_l+0x1a6>
 800b042:	4622      	mov	r2, r4
 800b044:	f8d8 1000 	ldr.w	r1, [r8]
 800b048:	f002 fd02 	bl	800da50 <strncmp>
 800b04c:	2800      	cmp	r0, #0
 800b04e:	d031      	beq.n	800b0b4 <_strtod_l+0x1c4>
 800b050:	2000      	movs	r0, #0
 800b052:	9c05      	ldr	r4, [sp, #20]
 800b054:	9004      	str	r0, [sp, #16]
 800b056:	463b      	mov	r3, r7
 800b058:	4602      	mov	r2, r0
 800b05a:	2b65      	cmp	r3, #101	; 0x65
 800b05c:	d001      	beq.n	800b062 <_strtod_l+0x172>
 800b05e:	2b45      	cmp	r3, #69	; 0x45
 800b060:	d114      	bne.n	800b08c <_strtod_l+0x19c>
 800b062:	b924      	cbnz	r4, 800b06e <_strtod_l+0x17e>
 800b064:	b910      	cbnz	r0, 800b06c <_strtod_l+0x17c>
 800b066:	9b06      	ldr	r3, [sp, #24]
 800b068:	2b00      	cmp	r3, #0
 800b06a:	d09e      	beq.n	800afaa <_strtod_l+0xba>
 800b06c:	2400      	movs	r4, #0
 800b06e:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 800b070:	1c73      	adds	r3, r6, #1
 800b072:	931b      	str	r3, [sp, #108]	; 0x6c
 800b074:	7873      	ldrb	r3, [r6, #1]
 800b076:	2b2b      	cmp	r3, #43	; 0x2b
 800b078:	d078      	beq.n	800b16c <_strtod_l+0x27c>
 800b07a:	2b2d      	cmp	r3, #45	; 0x2d
 800b07c:	d070      	beq.n	800b160 <_strtod_l+0x270>
 800b07e:	f04f 0c00 	mov.w	ip, #0
 800b082:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 800b086:	2f09      	cmp	r7, #9
 800b088:	d97c      	bls.n	800b184 <_strtod_l+0x294>
 800b08a:	961b      	str	r6, [sp, #108]	; 0x6c
 800b08c:	f04f 0e00 	mov.w	lr, #0
 800b090:	e09a      	b.n	800b1c8 <_strtod_l+0x2d8>
 800b092:	2300      	movs	r3, #0
 800b094:	e7c7      	b.n	800b026 <_strtod_l+0x136>
 800b096:	9905      	ldr	r1, [sp, #20]
 800b098:	2908      	cmp	r1, #8
 800b09a:	bfdd      	ittte	le
 800b09c:	9907      	ldrle	r1, [sp, #28]
 800b09e:	fb02 3301 	mlale	r3, r2, r1, r3
 800b0a2:	9307      	strle	r3, [sp, #28]
 800b0a4:	fb02 3505 	mlagt	r5, r2, r5, r3
 800b0a8:	9b05      	ldr	r3, [sp, #20]
 800b0aa:	3001      	adds	r0, #1
 800b0ac:	3301      	adds	r3, #1
 800b0ae:	9305      	str	r3, [sp, #20]
 800b0b0:	901b      	str	r0, [sp, #108]	; 0x6c
 800b0b2:	e7bf      	b.n	800b034 <_strtod_l+0x144>
 800b0b4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b0b6:	191a      	adds	r2, r3, r4
 800b0b8:	921b      	str	r2, [sp, #108]	; 0x6c
 800b0ba:	9a05      	ldr	r2, [sp, #20]
 800b0bc:	5d1b      	ldrb	r3, [r3, r4]
 800b0be:	2a00      	cmp	r2, #0
 800b0c0:	d037      	beq.n	800b132 <_strtod_l+0x242>
 800b0c2:	9c05      	ldr	r4, [sp, #20]
 800b0c4:	4602      	mov	r2, r0
 800b0c6:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800b0ca:	2909      	cmp	r1, #9
 800b0cc:	d913      	bls.n	800b0f6 <_strtod_l+0x206>
 800b0ce:	2101      	movs	r1, #1
 800b0d0:	9104      	str	r1, [sp, #16]
 800b0d2:	e7c2      	b.n	800b05a <_strtod_l+0x16a>
 800b0d4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b0d6:	1c5a      	adds	r2, r3, #1
 800b0d8:	921b      	str	r2, [sp, #108]	; 0x6c
 800b0da:	785b      	ldrb	r3, [r3, #1]
 800b0dc:	3001      	adds	r0, #1
 800b0de:	2b30      	cmp	r3, #48	; 0x30
 800b0e0:	d0f8      	beq.n	800b0d4 <_strtod_l+0x1e4>
 800b0e2:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800b0e6:	2a08      	cmp	r2, #8
 800b0e8:	f200 84e4 	bhi.w	800bab4 <_strtod_l+0xbc4>
 800b0ec:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800b0ee:	9208      	str	r2, [sp, #32]
 800b0f0:	4602      	mov	r2, r0
 800b0f2:	2000      	movs	r0, #0
 800b0f4:	4604      	mov	r4, r0
 800b0f6:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 800b0fa:	f100 0101 	add.w	r1, r0, #1
 800b0fe:	d012      	beq.n	800b126 <_strtod_l+0x236>
 800b100:	440a      	add	r2, r1
 800b102:	eb00 0c04 	add.w	ip, r0, r4
 800b106:	4621      	mov	r1, r4
 800b108:	270a      	movs	r7, #10
 800b10a:	458c      	cmp	ip, r1
 800b10c:	d113      	bne.n	800b136 <_strtod_l+0x246>
 800b10e:	1821      	adds	r1, r4, r0
 800b110:	2908      	cmp	r1, #8
 800b112:	f104 0401 	add.w	r4, r4, #1
 800b116:	4404      	add	r4, r0
 800b118:	dc19      	bgt.n	800b14e <_strtod_l+0x25e>
 800b11a:	9b07      	ldr	r3, [sp, #28]
 800b11c:	210a      	movs	r1, #10
 800b11e:	fb01 e303 	mla	r3, r1, r3, lr
 800b122:	9307      	str	r3, [sp, #28]
 800b124:	2100      	movs	r1, #0
 800b126:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b128:	1c58      	adds	r0, r3, #1
 800b12a:	901b      	str	r0, [sp, #108]	; 0x6c
 800b12c:	785b      	ldrb	r3, [r3, #1]
 800b12e:	4608      	mov	r0, r1
 800b130:	e7c9      	b.n	800b0c6 <_strtod_l+0x1d6>
 800b132:	9805      	ldr	r0, [sp, #20]
 800b134:	e7d3      	b.n	800b0de <_strtod_l+0x1ee>
 800b136:	2908      	cmp	r1, #8
 800b138:	f101 0101 	add.w	r1, r1, #1
 800b13c:	dc03      	bgt.n	800b146 <_strtod_l+0x256>
 800b13e:	9b07      	ldr	r3, [sp, #28]
 800b140:	437b      	muls	r3, r7
 800b142:	9307      	str	r3, [sp, #28]
 800b144:	e7e1      	b.n	800b10a <_strtod_l+0x21a>
 800b146:	2910      	cmp	r1, #16
 800b148:	bfd8      	it	le
 800b14a:	437d      	mulle	r5, r7
 800b14c:	e7dd      	b.n	800b10a <_strtod_l+0x21a>
 800b14e:	2c10      	cmp	r4, #16
 800b150:	bfdc      	itt	le
 800b152:	210a      	movle	r1, #10
 800b154:	fb01 e505 	mlale	r5, r1, r5, lr
 800b158:	e7e4      	b.n	800b124 <_strtod_l+0x234>
 800b15a:	2301      	movs	r3, #1
 800b15c:	9304      	str	r3, [sp, #16]
 800b15e:	e781      	b.n	800b064 <_strtod_l+0x174>
 800b160:	f04f 0c01 	mov.w	ip, #1
 800b164:	1cb3      	adds	r3, r6, #2
 800b166:	931b      	str	r3, [sp, #108]	; 0x6c
 800b168:	78b3      	ldrb	r3, [r6, #2]
 800b16a:	e78a      	b.n	800b082 <_strtod_l+0x192>
 800b16c:	f04f 0c00 	mov.w	ip, #0
 800b170:	e7f8      	b.n	800b164 <_strtod_l+0x274>
 800b172:	bf00      	nop
 800b174:	0800dbec 	.word	0x0800dbec
 800b178:	7ff00000 	.word	0x7ff00000
 800b17c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b17e:	1c5f      	adds	r7, r3, #1
 800b180:	971b      	str	r7, [sp, #108]	; 0x6c
 800b182:	785b      	ldrb	r3, [r3, #1]
 800b184:	2b30      	cmp	r3, #48	; 0x30
 800b186:	d0f9      	beq.n	800b17c <_strtod_l+0x28c>
 800b188:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 800b18c:	2f08      	cmp	r7, #8
 800b18e:	f63f af7d 	bhi.w	800b08c <_strtod_l+0x19c>
 800b192:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 800b196:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b198:	930a      	str	r3, [sp, #40]	; 0x28
 800b19a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b19c:	1c5f      	adds	r7, r3, #1
 800b19e:	971b      	str	r7, [sp, #108]	; 0x6c
 800b1a0:	785b      	ldrb	r3, [r3, #1]
 800b1a2:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 800b1a6:	f1b8 0f09 	cmp.w	r8, #9
 800b1aa:	d937      	bls.n	800b21c <_strtod_l+0x32c>
 800b1ac:	990a      	ldr	r1, [sp, #40]	; 0x28
 800b1ae:	1a7f      	subs	r7, r7, r1
 800b1b0:	2f08      	cmp	r7, #8
 800b1b2:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800b1b6:	dc37      	bgt.n	800b228 <_strtod_l+0x338>
 800b1b8:	45be      	cmp	lr, r7
 800b1ba:	bfa8      	it	ge
 800b1bc:	46be      	movge	lr, r7
 800b1be:	f1bc 0f00 	cmp.w	ip, #0
 800b1c2:	d001      	beq.n	800b1c8 <_strtod_l+0x2d8>
 800b1c4:	f1ce 0e00 	rsb	lr, lr, #0
 800b1c8:	2c00      	cmp	r4, #0
 800b1ca:	d151      	bne.n	800b270 <_strtod_l+0x380>
 800b1cc:	2800      	cmp	r0, #0
 800b1ce:	f47f aece 	bne.w	800af6e <_strtod_l+0x7e>
 800b1d2:	9a06      	ldr	r2, [sp, #24]
 800b1d4:	2a00      	cmp	r2, #0
 800b1d6:	f47f aeca 	bne.w	800af6e <_strtod_l+0x7e>
 800b1da:	9a04      	ldr	r2, [sp, #16]
 800b1dc:	2a00      	cmp	r2, #0
 800b1de:	f47f aee4 	bne.w	800afaa <_strtod_l+0xba>
 800b1e2:	2b4e      	cmp	r3, #78	; 0x4e
 800b1e4:	d027      	beq.n	800b236 <_strtod_l+0x346>
 800b1e6:	dc21      	bgt.n	800b22c <_strtod_l+0x33c>
 800b1e8:	2b49      	cmp	r3, #73	; 0x49
 800b1ea:	f47f aede 	bne.w	800afaa <_strtod_l+0xba>
 800b1ee:	49a0      	ldr	r1, [pc, #640]	; (800b470 <_strtod_l+0x580>)
 800b1f0:	a81b      	add	r0, sp, #108	; 0x6c
 800b1f2:	f001 fdf7 	bl	800cde4 <__match>
 800b1f6:	2800      	cmp	r0, #0
 800b1f8:	f43f aed7 	beq.w	800afaa <_strtod_l+0xba>
 800b1fc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b1fe:	499d      	ldr	r1, [pc, #628]	; (800b474 <_strtod_l+0x584>)
 800b200:	3b01      	subs	r3, #1
 800b202:	a81b      	add	r0, sp, #108	; 0x6c
 800b204:	931b      	str	r3, [sp, #108]	; 0x6c
 800b206:	f001 fded 	bl	800cde4 <__match>
 800b20a:	b910      	cbnz	r0, 800b212 <_strtod_l+0x322>
 800b20c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b20e:	3301      	adds	r3, #1
 800b210:	931b      	str	r3, [sp, #108]	; 0x6c
 800b212:	f8df b274 	ldr.w	fp, [pc, #628]	; 800b488 <_strtod_l+0x598>
 800b216:	f04f 0a00 	mov.w	sl, #0
 800b21a:	e6a8      	b.n	800af6e <_strtod_l+0x7e>
 800b21c:	210a      	movs	r1, #10
 800b21e:	fb01 3e0e 	mla	lr, r1, lr, r3
 800b222:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800b226:	e7b8      	b.n	800b19a <_strtod_l+0x2aa>
 800b228:	46be      	mov	lr, r7
 800b22a:	e7c8      	b.n	800b1be <_strtod_l+0x2ce>
 800b22c:	2b69      	cmp	r3, #105	; 0x69
 800b22e:	d0de      	beq.n	800b1ee <_strtod_l+0x2fe>
 800b230:	2b6e      	cmp	r3, #110	; 0x6e
 800b232:	f47f aeba 	bne.w	800afaa <_strtod_l+0xba>
 800b236:	4990      	ldr	r1, [pc, #576]	; (800b478 <_strtod_l+0x588>)
 800b238:	a81b      	add	r0, sp, #108	; 0x6c
 800b23a:	f001 fdd3 	bl	800cde4 <__match>
 800b23e:	2800      	cmp	r0, #0
 800b240:	f43f aeb3 	beq.w	800afaa <_strtod_l+0xba>
 800b244:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b246:	781b      	ldrb	r3, [r3, #0]
 800b248:	2b28      	cmp	r3, #40	; 0x28
 800b24a:	d10e      	bne.n	800b26a <_strtod_l+0x37a>
 800b24c:	aa1e      	add	r2, sp, #120	; 0x78
 800b24e:	498b      	ldr	r1, [pc, #556]	; (800b47c <_strtod_l+0x58c>)
 800b250:	a81b      	add	r0, sp, #108	; 0x6c
 800b252:	f001 fddb 	bl	800ce0c <__hexnan>
 800b256:	2805      	cmp	r0, #5
 800b258:	d107      	bne.n	800b26a <_strtod_l+0x37a>
 800b25a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800b25c:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 800b260:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800b264:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800b268:	e681      	b.n	800af6e <_strtod_l+0x7e>
 800b26a:	f8df b224 	ldr.w	fp, [pc, #548]	; 800b490 <_strtod_l+0x5a0>
 800b26e:	e7d2      	b.n	800b216 <_strtod_l+0x326>
 800b270:	ebae 0302 	sub.w	r3, lr, r2
 800b274:	9306      	str	r3, [sp, #24]
 800b276:	9b05      	ldr	r3, [sp, #20]
 800b278:	9807      	ldr	r0, [sp, #28]
 800b27a:	2b00      	cmp	r3, #0
 800b27c:	bf08      	it	eq
 800b27e:	4623      	moveq	r3, r4
 800b280:	2c10      	cmp	r4, #16
 800b282:	9305      	str	r3, [sp, #20]
 800b284:	46a0      	mov	r8, r4
 800b286:	bfa8      	it	ge
 800b288:	f04f 0810 	movge.w	r8, #16
 800b28c:	f7f5 f95a 	bl	8000544 <__aeabi_ui2d>
 800b290:	2c09      	cmp	r4, #9
 800b292:	4682      	mov	sl, r0
 800b294:	468b      	mov	fp, r1
 800b296:	dc13      	bgt.n	800b2c0 <_strtod_l+0x3d0>
 800b298:	9b06      	ldr	r3, [sp, #24]
 800b29a:	2b00      	cmp	r3, #0
 800b29c:	f43f ae67 	beq.w	800af6e <_strtod_l+0x7e>
 800b2a0:	9b06      	ldr	r3, [sp, #24]
 800b2a2:	dd7a      	ble.n	800b39a <_strtod_l+0x4aa>
 800b2a4:	2b16      	cmp	r3, #22
 800b2a6:	dc61      	bgt.n	800b36c <_strtod_l+0x47c>
 800b2a8:	4a75      	ldr	r2, [pc, #468]	; (800b480 <_strtod_l+0x590>)
 800b2aa:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 800b2ae:	e9de 0100 	ldrd	r0, r1, [lr]
 800b2b2:	4652      	mov	r2, sl
 800b2b4:	465b      	mov	r3, fp
 800b2b6:	f7f5 f9bf 	bl	8000638 <__aeabi_dmul>
 800b2ba:	4682      	mov	sl, r0
 800b2bc:	468b      	mov	fp, r1
 800b2be:	e656      	b.n	800af6e <_strtod_l+0x7e>
 800b2c0:	4b6f      	ldr	r3, [pc, #444]	; (800b480 <_strtod_l+0x590>)
 800b2c2:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800b2c6:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800b2ca:	f7f5 f9b5 	bl	8000638 <__aeabi_dmul>
 800b2ce:	4606      	mov	r6, r0
 800b2d0:	4628      	mov	r0, r5
 800b2d2:	460f      	mov	r7, r1
 800b2d4:	f7f5 f936 	bl	8000544 <__aeabi_ui2d>
 800b2d8:	4602      	mov	r2, r0
 800b2da:	460b      	mov	r3, r1
 800b2dc:	4630      	mov	r0, r6
 800b2de:	4639      	mov	r1, r7
 800b2e0:	f7f4 fff4 	bl	80002cc <__adddf3>
 800b2e4:	2c0f      	cmp	r4, #15
 800b2e6:	4682      	mov	sl, r0
 800b2e8:	468b      	mov	fp, r1
 800b2ea:	ddd5      	ble.n	800b298 <_strtod_l+0x3a8>
 800b2ec:	9b06      	ldr	r3, [sp, #24]
 800b2ee:	eba4 0808 	sub.w	r8, r4, r8
 800b2f2:	4498      	add	r8, r3
 800b2f4:	f1b8 0f00 	cmp.w	r8, #0
 800b2f8:	f340 8096 	ble.w	800b428 <_strtod_l+0x538>
 800b2fc:	f018 030f 	ands.w	r3, r8, #15
 800b300:	d00a      	beq.n	800b318 <_strtod_l+0x428>
 800b302:	495f      	ldr	r1, [pc, #380]	; (800b480 <_strtod_l+0x590>)
 800b304:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800b308:	4652      	mov	r2, sl
 800b30a:	465b      	mov	r3, fp
 800b30c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b310:	f7f5 f992 	bl	8000638 <__aeabi_dmul>
 800b314:	4682      	mov	sl, r0
 800b316:	468b      	mov	fp, r1
 800b318:	f038 080f 	bics.w	r8, r8, #15
 800b31c:	d073      	beq.n	800b406 <_strtod_l+0x516>
 800b31e:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800b322:	dd47      	ble.n	800b3b4 <_strtod_l+0x4c4>
 800b324:	2400      	movs	r4, #0
 800b326:	46a0      	mov	r8, r4
 800b328:	9407      	str	r4, [sp, #28]
 800b32a:	9405      	str	r4, [sp, #20]
 800b32c:	2322      	movs	r3, #34	; 0x22
 800b32e:	f8df b158 	ldr.w	fp, [pc, #344]	; 800b488 <_strtod_l+0x598>
 800b332:	f8c9 3000 	str.w	r3, [r9]
 800b336:	f04f 0a00 	mov.w	sl, #0
 800b33a:	9b07      	ldr	r3, [sp, #28]
 800b33c:	2b00      	cmp	r3, #0
 800b33e:	f43f ae16 	beq.w	800af6e <_strtod_l+0x7e>
 800b342:	991c      	ldr	r1, [sp, #112]	; 0x70
 800b344:	4648      	mov	r0, r9
 800b346:	f001 fe58 	bl	800cffa <_Bfree>
 800b34a:	9905      	ldr	r1, [sp, #20]
 800b34c:	4648      	mov	r0, r9
 800b34e:	f001 fe54 	bl	800cffa <_Bfree>
 800b352:	4641      	mov	r1, r8
 800b354:	4648      	mov	r0, r9
 800b356:	f001 fe50 	bl	800cffa <_Bfree>
 800b35a:	9907      	ldr	r1, [sp, #28]
 800b35c:	4648      	mov	r0, r9
 800b35e:	f001 fe4c 	bl	800cffa <_Bfree>
 800b362:	4621      	mov	r1, r4
 800b364:	4648      	mov	r0, r9
 800b366:	f001 fe48 	bl	800cffa <_Bfree>
 800b36a:	e600      	b.n	800af6e <_strtod_l+0x7e>
 800b36c:	9a06      	ldr	r2, [sp, #24]
 800b36e:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 800b372:	4293      	cmp	r3, r2
 800b374:	dbba      	blt.n	800b2ec <_strtod_l+0x3fc>
 800b376:	4d42      	ldr	r5, [pc, #264]	; (800b480 <_strtod_l+0x590>)
 800b378:	f1c4 040f 	rsb	r4, r4, #15
 800b37c:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 800b380:	4652      	mov	r2, sl
 800b382:	465b      	mov	r3, fp
 800b384:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b388:	f7f5 f956 	bl	8000638 <__aeabi_dmul>
 800b38c:	9b06      	ldr	r3, [sp, #24]
 800b38e:	1b1c      	subs	r4, r3, r4
 800b390:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 800b394:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b398:	e78d      	b.n	800b2b6 <_strtod_l+0x3c6>
 800b39a:	f113 0f16 	cmn.w	r3, #22
 800b39e:	dba5      	blt.n	800b2ec <_strtod_l+0x3fc>
 800b3a0:	4a37      	ldr	r2, [pc, #220]	; (800b480 <_strtod_l+0x590>)
 800b3a2:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 800b3a6:	e9d2 2300 	ldrd	r2, r3, [r2]
 800b3aa:	4650      	mov	r0, sl
 800b3ac:	4659      	mov	r1, fp
 800b3ae:	f7f5 fa6d 	bl	800088c <__aeabi_ddiv>
 800b3b2:	e782      	b.n	800b2ba <_strtod_l+0x3ca>
 800b3b4:	2300      	movs	r3, #0
 800b3b6:	4e33      	ldr	r6, [pc, #204]	; (800b484 <_strtod_l+0x594>)
 800b3b8:	ea4f 1828 	mov.w	r8, r8, asr #4
 800b3bc:	4650      	mov	r0, sl
 800b3be:	4659      	mov	r1, fp
 800b3c0:	461d      	mov	r5, r3
 800b3c2:	f1b8 0f01 	cmp.w	r8, #1
 800b3c6:	dc21      	bgt.n	800b40c <_strtod_l+0x51c>
 800b3c8:	b10b      	cbz	r3, 800b3ce <_strtod_l+0x4de>
 800b3ca:	4682      	mov	sl, r0
 800b3cc:	468b      	mov	fp, r1
 800b3ce:	4b2d      	ldr	r3, [pc, #180]	; (800b484 <_strtod_l+0x594>)
 800b3d0:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800b3d4:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800b3d8:	4652      	mov	r2, sl
 800b3da:	465b      	mov	r3, fp
 800b3dc:	e9d5 0100 	ldrd	r0, r1, [r5]
 800b3e0:	f7f5 f92a 	bl	8000638 <__aeabi_dmul>
 800b3e4:	4b28      	ldr	r3, [pc, #160]	; (800b488 <_strtod_l+0x598>)
 800b3e6:	460a      	mov	r2, r1
 800b3e8:	400b      	ands	r3, r1
 800b3ea:	4928      	ldr	r1, [pc, #160]	; (800b48c <_strtod_l+0x59c>)
 800b3ec:	428b      	cmp	r3, r1
 800b3ee:	4682      	mov	sl, r0
 800b3f0:	d898      	bhi.n	800b324 <_strtod_l+0x434>
 800b3f2:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800b3f6:	428b      	cmp	r3, r1
 800b3f8:	bf86      	itte	hi
 800b3fa:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 800b494 <_strtod_l+0x5a4>
 800b3fe:	f04f 3aff 	movhi.w	sl, #4294967295
 800b402:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800b406:	2300      	movs	r3, #0
 800b408:	9304      	str	r3, [sp, #16]
 800b40a:	e077      	b.n	800b4fc <_strtod_l+0x60c>
 800b40c:	f018 0f01 	tst.w	r8, #1
 800b410:	d006      	beq.n	800b420 <_strtod_l+0x530>
 800b412:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 800b416:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b41a:	f7f5 f90d 	bl	8000638 <__aeabi_dmul>
 800b41e:	2301      	movs	r3, #1
 800b420:	3501      	adds	r5, #1
 800b422:	ea4f 0868 	mov.w	r8, r8, asr #1
 800b426:	e7cc      	b.n	800b3c2 <_strtod_l+0x4d2>
 800b428:	d0ed      	beq.n	800b406 <_strtod_l+0x516>
 800b42a:	f1c8 0800 	rsb	r8, r8, #0
 800b42e:	f018 020f 	ands.w	r2, r8, #15
 800b432:	d00a      	beq.n	800b44a <_strtod_l+0x55a>
 800b434:	4b12      	ldr	r3, [pc, #72]	; (800b480 <_strtod_l+0x590>)
 800b436:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b43a:	4650      	mov	r0, sl
 800b43c:	4659      	mov	r1, fp
 800b43e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b442:	f7f5 fa23 	bl	800088c <__aeabi_ddiv>
 800b446:	4682      	mov	sl, r0
 800b448:	468b      	mov	fp, r1
 800b44a:	ea5f 1828 	movs.w	r8, r8, asr #4
 800b44e:	d0da      	beq.n	800b406 <_strtod_l+0x516>
 800b450:	f1b8 0f1f 	cmp.w	r8, #31
 800b454:	dd20      	ble.n	800b498 <_strtod_l+0x5a8>
 800b456:	2400      	movs	r4, #0
 800b458:	46a0      	mov	r8, r4
 800b45a:	9407      	str	r4, [sp, #28]
 800b45c:	9405      	str	r4, [sp, #20]
 800b45e:	2322      	movs	r3, #34	; 0x22
 800b460:	f04f 0a00 	mov.w	sl, #0
 800b464:	f04f 0b00 	mov.w	fp, #0
 800b468:	f8c9 3000 	str.w	r3, [r9]
 800b46c:	e765      	b.n	800b33a <_strtod_l+0x44a>
 800b46e:	bf00      	nop
 800b470:	0800dbb5 	.word	0x0800dbb5
 800b474:	0800dc43 	.word	0x0800dc43
 800b478:	0800dbbd 	.word	0x0800dbbd
 800b47c:	0800dc00 	.word	0x0800dc00
 800b480:	0800dc80 	.word	0x0800dc80
 800b484:	0800dc58 	.word	0x0800dc58
 800b488:	7ff00000 	.word	0x7ff00000
 800b48c:	7ca00000 	.word	0x7ca00000
 800b490:	fff80000 	.word	0xfff80000
 800b494:	7fefffff 	.word	0x7fefffff
 800b498:	f018 0310 	ands.w	r3, r8, #16
 800b49c:	bf18      	it	ne
 800b49e:	236a      	movne	r3, #106	; 0x6a
 800b4a0:	4da0      	ldr	r5, [pc, #640]	; (800b724 <_strtod_l+0x834>)
 800b4a2:	9304      	str	r3, [sp, #16]
 800b4a4:	4650      	mov	r0, sl
 800b4a6:	4659      	mov	r1, fp
 800b4a8:	2300      	movs	r3, #0
 800b4aa:	f1b8 0f00 	cmp.w	r8, #0
 800b4ae:	f300 810a 	bgt.w	800b6c6 <_strtod_l+0x7d6>
 800b4b2:	b10b      	cbz	r3, 800b4b8 <_strtod_l+0x5c8>
 800b4b4:	4682      	mov	sl, r0
 800b4b6:	468b      	mov	fp, r1
 800b4b8:	9b04      	ldr	r3, [sp, #16]
 800b4ba:	b1bb      	cbz	r3, 800b4ec <_strtod_l+0x5fc>
 800b4bc:	f3cb 530a 	ubfx	r3, fp, #20, #11
 800b4c0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800b4c4:	2b00      	cmp	r3, #0
 800b4c6:	4659      	mov	r1, fp
 800b4c8:	dd10      	ble.n	800b4ec <_strtod_l+0x5fc>
 800b4ca:	2b1f      	cmp	r3, #31
 800b4cc:	f340 8107 	ble.w	800b6de <_strtod_l+0x7ee>
 800b4d0:	2b34      	cmp	r3, #52	; 0x34
 800b4d2:	bfde      	ittt	le
 800b4d4:	3b20      	suble	r3, #32
 800b4d6:	f04f 32ff 	movle.w	r2, #4294967295
 800b4da:	fa02 f303 	lslle.w	r3, r2, r3
 800b4de:	f04f 0a00 	mov.w	sl, #0
 800b4e2:	bfcc      	ite	gt
 800b4e4:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800b4e8:	ea03 0b01 	andle.w	fp, r3, r1
 800b4ec:	2200      	movs	r2, #0
 800b4ee:	2300      	movs	r3, #0
 800b4f0:	4650      	mov	r0, sl
 800b4f2:	4659      	mov	r1, fp
 800b4f4:	f7f5 fb08 	bl	8000b08 <__aeabi_dcmpeq>
 800b4f8:	2800      	cmp	r0, #0
 800b4fa:	d1ac      	bne.n	800b456 <_strtod_l+0x566>
 800b4fc:	9b07      	ldr	r3, [sp, #28]
 800b4fe:	9300      	str	r3, [sp, #0]
 800b500:	9a05      	ldr	r2, [sp, #20]
 800b502:	9908      	ldr	r1, [sp, #32]
 800b504:	4623      	mov	r3, r4
 800b506:	4648      	mov	r0, r9
 800b508:	f001 fdc9 	bl	800d09e <__s2b>
 800b50c:	9007      	str	r0, [sp, #28]
 800b50e:	2800      	cmp	r0, #0
 800b510:	f43f af08 	beq.w	800b324 <_strtod_l+0x434>
 800b514:	9a06      	ldr	r2, [sp, #24]
 800b516:	9b06      	ldr	r3, [sp, #24]
 800b518:	2a00      	cmp	r2, #0
 800b51a:	f1c3 0300 	rsb	r3, r3, #0
 800b51e:	bfa8      	it	ge
 800b520:	2300      	movge	r3, #0
 800b522:	930e      	str	r3, [sp, #56]	; 0x38
 800b524:	2400      	movs	r4, #0
 800b526:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800b52a:	9316      	str	r3, [sp, #88]	; 0x58
 800b52c:	46a0      	mov	r8, r4
 800b52e:	9b07      	ldr	r3, [sp, #28]
 800b530:	4648      	mov	r0, r9
 800b532:	6859      	ldr	r1, [r3, #4]
 800b534:	f001 fd2d 	bl	800cf92 <_Balloc>
 800b538:	9005      	str	r0, [sp, #20]
 800b53a:	2800      	cmp	r0, #0
 800b53c:	f43f aef6 	beq.w	800b32c <_strtod_l+0x43c>
 800b540:	9b07      	ldr	r3, [sp, #28]
 800b542:	691a      	ldr	r2, [r3, #16]
 800b544:	3202      	adds	r2, #2
 800b546:	f103 010c 	add.w	r1, r3, #12
 800b54a:	0092      	lsls	r2, r2, #2
 800b54c:	300c      	adds	r0, #12
 800b54e:	f001 fd13 	bl	800cf78 <memcpy>
 800b552:	aa1e      	add	r2, sp, #120	; 0x78
 800b554:	a91d      	add	r1, sp, #116	; 0x74
 800b556:	ec4b ab10 	vmov	d0, sl, fp
 800b55a:	4648      	mov	r0, r9
 800b55c:	e9cd ab08 	strd	sl, fp, [sp, #32]
 800b560:	f002 f858 	bl	800d614 <__d2b>
 800b564:	901c      	str	r0, [sp, #112]	; 0x70
 800b566:	2800      	cmp	r0, #0
 800b568:	f43f aee0 	beq.w	800b32c <_strtod_l+0x43c>
 800b56c:	2101      	movs	r1, #1
 800b56e:	4648      	mov	r0, r9
 800b570:	f001 fe21 	bl	800d1b6 <__i2b>
 800b574:	4680      	mov	r8, r0
 800b576:	2800      	cmp	r0, #0
 800b578:	f43f aed8 	beq.w	800b32c <_strtod_l+0x43c>
 800b57c:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 800b57e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800b580:	2e00      	cmp	r6, #0
 800b582:	bfab      	itete	ge
 800b584:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 800b586:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 800b588:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 800b58a:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 800b58c:	bfac      	ite	ge
 800b58e:	18f7      	addge	r7, r6, r3
 800b590:	1b9d      	sublt	r5, r3, r6
 800b592:	9b04      	ldr	r3, [sp, #16]
 800b594:	1af6      	subs	r6, r6, r3
 800b596:	4416      	add	r6, r2
 800b598:	4b63      	ldr	r3, [pc, #396]	; (800b728 <_strtod_l+0x838>)
 800b59a:	3e01      	subs	r6, #1
 800b59c:	429e      	cmp	r6, r3
 800b59e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800b5a2:	f280 80af 	bge.w	800b704 <_strtod_l+0x814>
 800b5a6:	1b9b      	subs	r3, r3, r6
 800b5a8:	2b1f      	cmp	r3, #31
 800b5aa:	eba2 0203 	sub.w	r2, r2, r3
 800b5ae:	f04f 0101 	mov.w	r1, #1
 800b5b2:	f300 809b 	bgt.w	800b6ec <_strtod_l+0x7fc>
 800b5b6:	fa01 f303 	lsl.w	r3, r1, r3
 800b5ba:	930f      	str	r3, [sp, #60]	; 0x3c
 800b5bc:	2300      	movs	r3, #0
 800b5be:	930a      	str	r3, [sp, #40]	; 0x28
 800b5c0:	18be      	adds	r6, r7, r2
 800b5c2:	9b04      	ldr	r3, [sp, #16]
 800b5c4:	42b7      	cmp	r7, r6
 800b5c6:	4415      	add	r5, r2
 800b5c8:	441d      	add	r5, r3
 800b5ca:	463b      	mov	r3, r7
 800b5cc:	bfa8      	it	ge
 800b5ce:	4633      	movge	r3, r6
 800b5d0:	42ab      	cmp	r3, r5
 800b5d2:	bfa8      	it	ge
 800b5d4:	462b      	movge	r3, r5
 800b5d6:	2b00      	cmp	r3, #0
 800b5d8:	bfc2      	ittt	gt
 800b5da:	1af6      	subgt	r6, r6, r3
 800b5dc:	1aed      	subgt	r5, r5, r3
 800b5de:	1aff      	subgt	r7, r7, r3
 800b5e0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b5e2:	b1bb      	cbz	r3, 800b614 <_strtod_l+0x724>
 800b5e4:	4641      	mov	r1, r8
 800b5e6:	461a      	mov	r2, r3
 800b5e8:	4648      	mov	r0, r9
 800b5ea:	f001 fe83 	bl	800d2f4 <__pow5mult>
 800b5ee:	4680      	mov	r8, r0
 800b5f0:	2800      	cmp	r0, #0
 800b5f2:	f43f ae9b 	beq.w	800b32c <_strtod_l+0x43c>
 800b5f6:	4601      	mov	r1, r0
 800b5f8:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800b5fa:	4648      	mov	r0, r9
 800b5fc:	f001 fde4 	bl	800d1c8 <__multiply>
 800b600:	900c      	str	r0, [sp, #48]	; 0x30
 800b602:	2800      	cmp	r0, #0
 800b604:	f43f ae92 	beq.w	800b32c <_strtod_l+0x43c>
 800b608:	991c      	ldr	r1, [sp, #112]	; 0x70
 800b60a:	4648      	mov	r0, r9
 800b60c:	f001 fcf5 	bl	800cffa <_Bfree>
 800b610:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b612:	931c      	str	r3, [sp, #112]	; 0x70
 800b614:	2e00      	cmp	r6, #0
 800b616:	dc7a      	bgt.n	800b70e <_strtod_l+0x81e>
 800b618:	9b06      	ldr	r3, [sp, #24]
 800b61a:	2b00      	cmp	r3, #0
 800b61c:	dd08      	ble.n	800b630 <_strtod_l+0x740>
 800b61e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800b620:	9905      	ldr	r1, [sp, #20]
 800b622:	4648      	mov	r0, r9
 800b624:	f001 fe66 	bl	800d2f4 <__pow5mult>
 800b628:	9005      	str	r0, [sp, #20]
 800b62a:	2800      	cmp	r0, #0
 800b62c:	f43f ae7e 	beq.w	800b32c <_strtod_l+0x43c>
 800b630:	2d00      	cmp	r5, #0
 800b632:	dd08      	ble.n	800b646 <_strtod_l+0x756>
 800b634:	462a      	mov	r2, r5
 800b636:	9905      	ldr	r1, [sp, #20]
 800b638:	4648      	mov	r0, r9
 800b63a:	f001 fea9 	bl	800d390 <__lshift>
 800b63e:	9005      	str	r0, [sp, #20]
 800b640:	2800      	cmp	r0, #0
 800b642:	f43f ae73 	beq.w	800b32c <_strtod_l+0x43c>
 800b646:	2f00      	cmp	r7, #0
 800b648:	dd08      	ble.n	800b65c <_strtod_l+0x76c>
 800b64a:	4641      	mov	r1, r8
 800b64c:	463a      	mov	r2, r7
 800b64e:	4648      	mov	r0, r9
 800b650:	f001 fe9e 	bl	800d390 <__lshift>
 800b654:	4680      	mov	r8, r0
 800b656:	2800      	cmp	r0, #0
 800b658:	f43f ae68 	beq.w	800b32c <_strtod_l+0x43c>
 800b65c:	9a05      	ldr	r2, [sp, #20]
 800b65e:	991c      	ldr	r1, [sp, #112]	; 0x70
 800b660:	4648      	mov	r0, r9
 800b662:	f001 ff03 	bl	800d46c <__mdiff>
 800b666:	4604      	mov	r4, r0
 800b668:	2800      	cmp	r0, #0
 800b66a:	f43f ae5f 	beq.w	800b32c <_strtod_l+0x43c>
 800b66e:	68c3      	ldr	r3, [r0, #12]
 800b670:	930c      	str	r3, [sp, #48]	; 0x30
 800b672:	2300      	movs	r3, #0
 800b674:	60c3      	str	r3, [r0, #12]
 800b676:	4641      	mov	r1, r8
 800b678:	f001 fede 	bl	800d438 <__mcmp>
 800b67c:	2800      	cmp	r0, #0
 800b67e:	da55      	bge.n	800b72c <_strtod_l+0x83c>
 800b680:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b682:	b9e3      	cbnz	r3, 800b6be <_strtod_l+0x7ce>
 800b684:	f1ba 0f00 	cmp.w	sl, #0
 800b688:	d119      	bne.n	800b6be <_strtod_l+0x7ce>
 800b68a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b68e:	b9b3      	cbnz	r3, 800b6be <_strtod_l+0x7ce>
 800b690:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800b694:	0d1b      	lsrs	r3, r3, #20
 800b696:	051b      	lsls	r3, r3, #20
 800b698:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800b69c:	d90f      	bls.n	800b6be <_strtod_l+0x7ce>
 800b69e:	6963      	ldr	r3, [r4, #20]
 800b6a0:	b913      	cbnz	r3, 800b6a8 <_strtod_l+0x7b8>
 800b6a2:	6923      	ldr	r3, [r4, #16]
 800b6a4:	2b01      	cmp	r3, #1
 800b6a6:	dd0a      	ble.n	800b6be <_strtod_l+0x7ce>
 800b6a8:	4621      	mov	r1, r4
 800b6aa:	2201      	movs	r2, #1
 800b6ac:	4648      	mov	r0, r9
 800b6ae:	f001 fe6f 	bl	800d390 <__lshift>
 800b6b2:	4641      	mov	r1, r8
 800b6b4:	4604      	mov	r4, r0
 800b6b6:	f001 febf 	bl	800d438 <__mcmp>
 800b6ba:	2800      	cmp	r0, #0
 800b6bc:	dc67      	bgt.n	800b78e <_strtod_l+0x89e>
 800b6be:	9b04      	ldr	r3, [sp, #16]
 800b6c0:	2b00      	cmp	r3, #0
 800b6c2:	d171      	bne.n	800b7a8 <_strtod_l+0x8b8>
 800b6c4:	e63d      	b.n	800b342 <_strtod_l+0x452>
 800b6c6:	f018 0f01 	tst.w	r8, #1
 800b6ca:	d004      	beq.n	800b6d6 <_strtod_l+0x7e6>
 800b6cc:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b6d0:	f7f4 ffb2 	bl	8000638 <__aeabi_dmul>
 800b6d4:	2301      	movs	r3, #1
 800b6d6:	ea4f 0868 	mov.w	r8, r8, asr #1
 800b6da:	3508      	adds	r5, #8
 800b6dc:	e6e5      	b.n	800b4aa <_strtod_l+0x5ba>
 800b6de:	f04f 32ff 	mov.w	r2, #4294967295
 800b6e2:	fa02 f303 	lsl.w	r3, r2, r3
 800b6e6:	ea03 0a0a 	and.w	sl, r3, sl
 800b6ea:	e6ff      	b.n	800b4ec <_strtod_l+0x5fc>
 800b6ec:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 800b6f0:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 800b6f4:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 800b6f8:	36e2      	adds	r6, #226	; 0xe2
 800b6fa:	fa01 f306 	lsl.w	r3, r1, r6
 800b6fe:	930a      	str	r3, [sp, #40]	; 0x28
 800b700:	910f      	str	r1, [sp, #60]	; 0x3c
 800b702:	e75d      	b.n	800b5c0 <_strtod_l+0x6d0>
 800b704:	2300      	movs	r3, #0
 800b706:	930a      	str	r3, [sp, #40]	; 0x28
 800b708:	2301      	movs	r3, #1
 800b70a:	930f      	str	r3, [sp, #60]	; 0x3c
 800b70c:	e758      	b.n	800b5c0 <_strtod_l+0x6d0>
 800b70e:	4632      	mov	r2, r6
 800b710:	991c      	ldr	r1, [sp, #112]	; 0x70
 800b712:	4648      	mov	r0, r9
 800b714:	f001 fe3c 	bl	800d390 <__lshift>
 800b718:	901c      	str	r0, [sp, #112]	; 0x70
 800b71a:	2800      	cmp	r0, #0
 800b71c:	f47f af7c 	bne.w	800b618 <_strtod_l+0x728>
 800b720:	e604      	b.n	800b32c <_strtod_l+0x43c>
 800b722:	bf00      	nop
 800b724:	0800dc18 	.word	0x0800dc18
 800b728:	fffffc02 	.word	0xfffffc02
 800b72c:	465d      	mov	r5, fp
 800b72e:	f040 8086 	bne.w	800b83e <_strtod_l+0x94e>
 800b732:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b734:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b738:	b32a      	cbz	r2, 800b786 <_strtod_l+0x896>
 800b73a:	4aaf      	ldr	r2, [pc, #700]	; (800b9f8 <_strtod_l+0xb08>)
 800b73c:	4293      	cmp	r3, r2
 800b73e:	d153      	bne.n	800b7e8 <_strtod_l+0x8f8>
 800b740:	9b04      	ldr	r3, [sp, #16]
 800b742:	4650      	mov	r0, sl
 800b744:	b1d3      	cbz	r3, 800b77c <_strtod_l+0x88c>
 800b746:	4aad      	ldr	r2, [pc, #692]	; (800b9fc <_strtod_l+0xb0c>)
 800b748:	402a      	ands	r2, r5
 800b74a:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800b74e:	f04f 31ff 	mov.w	r1, #4294967295
 800b752:	d816      	bhi.n	800b782 <_strtod_l+0x892>
 800b754:	0d12      	lsrs	r2, r2, #20
 800b756:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800b75a:	fa01 f303 	lsl.w	r3, r1, r3
 800b75e:	4298      	cmp	r0, r3
 800b760:	d142      	bne.n	800b7e8 <_strtod_l+0x8f8>
 800b762:	4ba7      	ldr	r3, [pc, #668]	; (800ba00 <_strtod_l+0xb10>)
 800b764:	429d      	cmp	r5, r3
 800b766:	d102      	bne.n	800b76e <_strtod_l+0x87e>
 800b768:	3001      	adds	r0, #1
 800b76a:	f43f addf 	beq.w	800b32c <_strtod_l+0x43c>
 800b76e:	4ba3      	ldr	r3, [pc, #652]	; (800b9fc <_strtod_l+0xb0c>)
 800b770:	402b      	ands	r3, r5
 800b772:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800b776:	f04f 0a00 	mov.w	sl, #0
 800b77a:	e7a0      	b.n	800b6be <_strtod_l+0x7ce>
 800b77c:	f04f 33ff 	mov.w	r3, #4294967295
 800b780:	e7ed      	b.n	800b75e <_strtod_l+0x86e>
 800b782:	460b      	mov	r3, r1
 800b784:	e7eb      	b.n	800b75e <_strtod_l+0x86e>
 800b786:	bb7b      	cbnz	r3, 800b7e8 <_strtod_l+0x8f8>
 800b788:	f1ba 0f00 	cmp.w	sl, #0
 800b78c:	d12c      	bne.n	800b7e8 <_strtod_l+0x8f8>
 800b78e:	9904      	ldr	r1, [sp, #16]
 800b790:	4a9a      	ldr	r2, [pc, #616]	; (800b9fc <_strtod_l+0xb0c>)
 800b792:	465b      	mov	r3, fp
 800b794:	b1f1      	cbz	r1, 800b7d4 <_strtod_l+0x8e4>
 800b796:	ea02 010b 	and.w	r1, r2, fp
 800b79a:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800b79e:	dc19      	bgt.n	800b7d4 <_strtod_l+0x8e4>
 800b7a0:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800b7a4:	f77f ae5b 	ble.w	800b45e <_strtod_l+0x56e>
 800b7a8:	4a96      	ldr	r2, [pc, #600]	; (800ba04 <_strtod_l+0xb14>)
 800b7aa:	2300      	movs	r3, #0
 800b7ac:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 800b7b0:	4650      	mov	r0, sl
 800b7b2:	4659      	mov	r1, fp
 800b7b4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800b7b8:	f7f4 ff3e 	bl	8000638 <__aeabi_dmul>
 800b7bc:	4682      	mov	sl, r0
 800b7be:	468b      	mov	fp, r1
 800b7c0:	2900      	cmp	r1, #0
 800b7c2:	f47f adbe 	bne.w	800b342 <_strtod_l+0x452>
 800b7c6:	2800      	cmp	r0, #0
 800b7c8:	f47f adbb 	bne.w	800b342 <_strtod_l+0x452>
 800b7cc:	2322      	movs	r3, #34	; 0x22
 800b7ce:	f8c9 3000 	str.w	r3, [r9]
 800b7d2:	e5b6      	b.n	800b342 <_strtod_l+0x452>
 800b7d4:	4013      	ands	r3, r2
 800b7d6:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800b7da:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800b7de:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800b7e2:	f04f 3aff 	mov.w	sl, #4294967295
 800b7e6:	e76a      	b.n	800b6be <_strtod_l+0x7ce>
 800b7e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b7ea:	b193      	cbz	r3, 800b812 <_strtod_l+0x922>
 800b7ec:	422b      	tst	r3, r5
 800b7ee:	f43f af66 	beq.w	800b6be <_strtod_l+0x7ce>
 800b7f2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b7f4:	9a04      	ldr	r2, [sp, #16]
 800b7f6:	4650      	mov	r0, sl
 800b7f8:	4659      	mov	r1, fp
 800b7fa:	b173      	cbz	r3, 800b81a <_strtod_l+0x92a>
 800b7fc:	f7ff fb5c 	bl	800aeb8 <sulp>
 800b800:	4602      	mov	r2, r0
 800b802:	460b      	mov	r3, r1
 800b804:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800b808:	f7f4 fd60 	bl	80002cc <__adddf3>
 800b80c:	4682      	mov	sl, r0
 800b80e:	468b      	mov	fp, r1
 800b810:	e755      	b.n	800b6be <_strtod_l+0x7ce>
 800b812:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b814:	ea13 0f0a 	tst.w	r3, sl
 800b818:	e7e9      	b.n	800b7ee <_strtod_l+0x8fe>
 800b81a:	f7ff fb4d 	bl	800aeb8 <sulp>
 800b81e:	4602      	mov	r2, r0
 800b820:	460b      	mov	r3, r1
 800b822:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800b826:	f7f4 fd4f 	bl	80002c8 <__aeabi_dsub>
 800b82a:	2200      	movs	r2, #0
 800b82c:	2300      	movs	r3, #0
 800b82e:	4682      	mov	sl, r0
 800b830:	468b      	mov	fp, r1
 800b832:	f7f5 f969 	bl	8000b08 <__aeabi_dcmpeq>
 800b836:	2800      	cmp	r0, #0
 800b838:	f47f ae11 	bne.w	800b45e <_strtod_l+0x56e>
 800b83c:	e73f      	b.n	800b6be <_strtod_l+0x7ce>
 800b83e:	4641      	mov	r1, r8
 800b840:	4620      	mov	r0, r4
 800b842:	f001 ff36 	bl	800d6b2 <__ratio>
 800b846:	ec57 6b10 	vmov	r6, r7, d0
 800b84a:	2200      	movs	r2, #0
 800b84c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b850:	ee10 0a10 	vmov	r0, s0
 800b854:	4639      	mov	r1, r7
 800b856:	f7f5 f96b 	bl	8000b30 <__aeabi_dcmple>
 800b85a:	2800      	cmp	r0, #0
 800b85c:	d077      	beq.n	800b94e <_strtod_l+0xa5e>
 800b85e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b860:	2b00      	cmp	r3, #0
 800b862:	d04a      	beq.n	800b8fa <_strtod_l+0xa0a>
 800b864:	4b68      	ldr	r3, [pc, #416]	; (800ba08 <_strtod_l+0xb18>)
 800b866:	2200      	movs	r2, #0
 800b868:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800b86c:	4f66      	ldr	r7, [pc, #408]	; (800ba08 <_strtod_l+0xb18>)
 800b86e:	2600      	movs	r6, #0
 800b870:	4b62      	ldr	r3, [pc, #392]	; (800b9fc <_strtod_l+0xb0c>)
 800b872:	402b      	ands	r3, r5
 800b874:	930f      	str	r3, [sp, #60]	; 0x3c
 800b876:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b878:	4b64      	ldr	r3, [pc, #400]	; (800ba0c <_strtod_l+0xb1c>)
 800b87a:	429a      	cmp	r2, r3
 800b87c:	f040 80ce 	bne.w	800ba1c <_strtod_l+0xb2c>
 800b880:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800b884:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800b888:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 800b88c:	ec4b ab10 	vmov	d0, sl, fp
 800b890:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 800b894:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800b898:	f001 fe46 	bl	800d528 <__ulp>
 800b89c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800b8a0:	ec53 2b10 	vmov	r2, r3, d0
 800b8a4:	f7f4 fec8 	bl	8000638 <__aeabi_dmul>
 800b8a8:	4652      	mov	r2, sl
 800b8aa:	465b      	mov	r3, fp
 800b8ac:	f7f4 fd0e 	bl	80002cc <__adddf3>
 800b8b0:	460b      	mov	r3, r1
 800b8b2:	4952      	ldr	r1, [pc, #328]	; (800b9fc <_strtod_l+0xb0c>)
 800b8b4:	4a56      	ldr	r2, [pc, #344]	; (800ba10 <_strtod_l+0xb20>)
 800b8b6:	4019      	ands	r1, r3
 800b8b8:	4291      	cmp	r1, r2
 800b8ba:	4682      	mov	sl, r0
 800b8bc:	d95b      	bls.n	800b976 <_strtod_l+0xa86>
 800b8be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b8c0:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800b8c4:	4293      	cmp	r3, r2
 800b8c6:	d103      	bne.n	800b8d0 <_strtod_l+0x9e0>
 800b8c8:	9b08      	ldr	r3, [sp, #32]
 800b8ca:	3301      	adds	r3, #1
 800b8cc:	f43f ad2e 	beq.w	800b32c <_strtod_l+0x43c>
 800b8d0:	f8df b12c 	ldr.w	fp, [pc, #300]	; 800ba00 <_strtod_l+0xb10>
 800b8d4:	f04f 3aff 	mov.w	sl, #4294967295
 800b8d8:	991c      	ldr	r1, [sp, #112]	; 0x70
 800b8da:	4648      	mov	r0, r9
 800b8dc:	f001 fb8d 	bl	800cffa <_Bfree>
 800b8e0:	9905      	ldr	r1, [sp, #20]
 800b8e2:	4648      	mov	r0, r9
 800b8e4:	f001 fb89 	bl	800cffa <_Bfree>
 800b8e8:	4641      	mov	r1, r8
 800b8ea:	4648      	mov	r0, r9
 800b8ec:	f001 fb85 	bl	800cffa <_Bfree>
 800b8f0:	4621      	mov	r1, r4
 800b8f2:	4648      	mov	r0, r9
 800b8f4:	f001 fb81 	bl	800cffa <_Bfree>
 800b8f8:	e619      	b.n	800b52e <_strtod_l+0x63e>
 800b8fa:	f1ba 0f00 	cmp.w	sl, #0
 800b8fe:	d11a      	bne.n	800b936 <_strtod_l+0xa46>
 800b900:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b904:	b9eb      	cbnz	r3, 800b942 <_strtod_l+0xa52>
 800b906:	2200      	movs	r2, #0
 800b908:	4b3f      	ldr	r3, [pc, #252]	; (800ba08 <_strtod_l+0xb18>)
 800b90a:	4630      	mov	r0, r6
 800b90c:	4639      	mov	r1, r7
 800b90e:	f7f5 f905 	bl	8000b1c <__aeabi_dcmplt>
 800b912:	b9c8      	cbnz	r0, 800b948 <_strtod_l+0xa58>
 800b914:	4630      	mov	r0, r6
 800b916:	4639      	mov	r1, r7
 800b918:	2200      	movs	r2, #0
 800b91a:	4b3e      	ldr	r3, [pc, #248]	; (800ba14 <_strtod_l+0xb24>)
 800b91c:	f7f4 fe8c 	bl	8000638 <__aeabi_dmul>
 800b920:	4606      	mov	r6, r0
 800b922:	460f      	mov	r7, r1
 800b924:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 800b928:	9618      	str	r6, [sp, #96]	; 0x60
 800b92a:	9319      	str	r3, [sp, #100]	; 0x64
 800b92c:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 800b930:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800b934:	e79c      	b.n	800b870 <_strtod_l+0x980>
 800b936:	f1ba 0f01 	cmp.w	sl, #1
 800b93a:	d102      	bne.n	800b942 <_strtod_l+0xa52>
 800b93c:	2d00      	cmp	r5, #0
 800b93e:	f43f ad8e 	beq.w	800b45e <_strtod_l+0x56e>
 800b942:	2200      	movs	r2, #0
 800b944:	4b34      	ldr	r3, [pc, #208]	; (800ba18 <_strtod_l+0xb28>)
 800b946:	e78f      	b.n	800b868 <_strtod_l+0x978>
 800b948:	2600      	movs	r6, #0
 800b94a:	4f32      	ldr	r7, [pc, #200]	; (800ba14 <_strtod_l+0xb24>)
 800b94c:	e7ea      	b.n	800b924 <_strtod_l+0xa34>
 800b94e:	4b31      	ldr	r3, [pc, #196]	; (800ba14 <_strtod_l+0xb24>)
 800b950:	4630      	mov	r0, r6
 800b952:	4639      	mov	r1, r7
 800b954:	2200      	movs	r2, #0
 800b956:	f7f4 fe6f 	bl	8000638 <__aeabi_dmul>
 800b95a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b95c:	4606      	mov	r6, r0
 800b95e:	460f      	mov	r7, r1
 800b960:	b933      	cbnz	r3, 800b970 <_strtod_l+0xa80>
 800b962:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b966:	9010      	str	r0, [sp, #64]	; 0x40
 800b968:	9311      	str	r3, [sp, #68]	; 0x44
 800b96a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800b96e:	e7df      	b.n	800b930 <_strtod_l+0xa40>
 800b970:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 800b974:	e7f9      	b.n	800b96a <_strtod_l+0xa7a>
 800b976:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800b97a:	9b04      	ldr	r3, [sp, #16]
 800b97c:	2b00      	cmp	r3, #0
 800b97e:	d1ab      	bne.n	800b8d8 <_strtod_l+0x9e8>
 800b980:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800b984:	0d1b      	lsrs	r3, r3, #20
 800b986:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b988:	051b      	lsls	r3, r3, #20
 800b98a:	429a      	cmp	r2, r3
 800b98c:	465d      	mov	r5, fp
 800b98e:	d1a3      	bne.n	800b8d8 <_strtod_l+0x9e8>
 800b990:	4639      	mov	r1, r7
 800b992:	4630      	mov	r0, r6
 800b994:	f7f5 f900 	bl	8000b98 <__aeabi_d2iz>
 800b998:	f7f4 fde4 	bl	8000564 <__aeabi_i2d>
 800b99c:	460b      	mov	r3, r1
 800b99e:	4602      	mov	r2, r0
 800b9a0:	4639      	mov	r1, r7
 800b9a2:	4630      	mov	r0, r6
 800b9a4:	f7f4 fc90 	bl	80002c8 <__aeabi_dsub>
 800b9a8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b9aa:	4606      	mov	r6, r0
 800b9ac:	460f      	mov	r7, r1
 800b9ae:	b933      	cbnz	r3, 800b9be <_strtod_l+0xace>
 800b9b0:	f1ba 0f00 	cmp.w	sl, #0
 800b9b4:	d103      	bne.n	800b9be <_strtod_l+0xace>
 800b9b6:	f3cb 0513 	ubfx	r5, fp, #0, #20
 800b9ba:	2d00      	cmp	r5, #0
 800b9bc:	d06d      	beq.n	800ba9a <_strtod_l+0xbaa>
 800b9be:	a30a      	add	r3, pc, #40	; (adr r3, 800b9e8 <_strtod_l+0xaf8>)
 800b9c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9c4:	4630      	mov	r0, r6
 800b9c6:	4639      	mov	r1, r7
 800b9c8:	f7f5 f8a8 	bl	8000b1c <__aeabi_dcmplt>
 800b9cc:	2800      	cmp	r0, #0
 800b9ce:	f47f acb8 	bne.w	800b342 <_strtod_l+0x452>
 800b9d2:	a307      	add	r3, pc, #28	; (adr r3, 800b9f0 <_strtod_l+0xb00>)
 800b9d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9d8:	4630      	mov	r0, r6
 800b9da:	4639      	mov	r1, r7
 800b9dc:	f7f5 f8bc 	bl	8000b58 <__aeabi_dcmpgt>
 800b9e0:	2800      	cmp	r0, #0
 800b9e2:	f43f af79 	beq.w	800b8d8 <_strtod_l+0x9e8>
 800b9e6:	e4ac      	b.n	800b342 <_strtod_l+0x452>
 800b9e8:	94a03595 	.word	0x94a03595
 800b9ec:	3fdfffff 	.word	0x3fdfffff
 800b9f0:	35afe535 	.word	0x35afe535
 800b9f4:	3fe00000 	.word	0x3fe00000
 800b9f8:	000fffff 	.word	0x000fffff
 800b9fc:	7ff00000 	.word	0x7ff00000
 800ba00:	7fefffff 	.word	0x7fefffff
 800ba04:	39500000 	.word	0x39500000
 800ba08:	3ff00000 	.word	0x3ff00000
 800ba0c:	7fe00000 	.word	0x7fe00000
 800ba10:	7c9fffff 	.word	0x7c9fffff
 800ba14:	3fe00000 	.word	0x3fe00000
 800ba18:	bff00000 	.word	0xbff00000
 800ba1c:	9b04      	ldr	r3, [sp, #16]
 800ba1e:	b333      	cbz	r3, 800ba6e <_strtod_l+0xb7e>
 800ba20:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ba22:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800ba26:	d822      	bhi.n	800ba6e <_strtod_l+0xb7e>
 800ba28:	a327      	add	r3, pc, #156	; (adr r3, 800bac8 <_strtod_l+0xbd8>)
 800ba2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba2e:	4630      	mov	r0, r6
 800ba30:	4639      	mov	r1, r7
 800ba32:	f7f5 f87d 	bl	8000b30 <__aeabi_dcmple>
 800ba36:	b1a0      	cbz	r0, 800ba62 <_strtod_l+0xb72>
 800ba38:	4639      	mov	r1, r7
 800ba3a:	4630      	mov	r0, r6
 800ba3c:	f7f5 f8d4 	bl	8000be8 <__aeabi_d2uiz>
 800ba40:	2800      	cmp	r0, #0
 800ba42:	bf08      	it	eq
 800ba44:	2001      	moveq	r0, #1
 800ba46:	f7f4 fd7d 	bl	8000544 <__aeabi_ui2d>
 800ba4a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ba4c:	4606      	mov	r6, r0
 800ba4e:	460f      	mov	r7, r1
 800ba50:	bb03      	cbnz	r3, 800ba94 <_strtod_l+0xba4>
 800ba52:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ba56:	9012      	str	r0, [sp, #72]	; 0x48
 800ba58:	9313      	str	r3, [sp, #76]	; 0x4c
 800ba5a:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800ba5e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800ba62:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ba64:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800ba66:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800ba6a:	1a9b      	subs	r3, r3, r2
 800ba6c:	930b      	str	r3, [sp, #44]	; 0x2c
 800ba6e:	ed9d 0b08 	vldr	d0, [sp, #32]
 800ba72:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 800ba76:	f001 fd57 	bl	800d528 <__ulp>
 800ba7a:	4650      	mov	r0, sl
 800ba7c:	ec53 2b10 	vmov	r2, r3, d0
 800ba80:	4659      	mov	r1, fp
 800ba82:	f7f4 fdd9 	bl	8000638 <__aeabi_dmul>
 800ba86:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800ba8a:	f7f4 fc1f 	bl	80002cc <__adddf3>
 800ba8e:	4682      	mov	sl, r0
 800ba90:	468b      	mov	fp, r1
 800ba92:	e772      	b.n	800b97a <_strtod_l+0xa8a>
 800ba94:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 800ba98:	e7df      	b.n	800ba5a <_strtod_l+0xb6a>
 800ba9a:	a30d      	add	r3, pc, #52	; (adr r3, 800bad0 <_strtod_l+0xbe0>)
 800ba9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800baa0:	f7f5 f83c 	bl	8000b1c <__aeabi_dcmplt>
 800baa4:	e79c      	b.n	800b9e0 <_strtod_l+0xaf0>
 800baa6:	2300      	movs	r3, #0
 800baa8:	930d      	str	r3, [sp, #52]	; 0x34
 800baaa:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800baac:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800baae:	6013      	str	r3, [r2, #0]
 800bab0:	f7ff ba61 	b.w	800af76 <_strtod_l+0x86>
 800bab4:	2b65      	cmp	r3, #101	; 0x65
 800bab6:	f04f 0200 	mov.w	r2, #0
 800baba:	f43f ab4e 	beq.w	800b15a <_strtod_l+0x26a>
 800babe:	2101      	movs	r1, #1
 800bac0:	4614      	mov	r4, r2
 800bac2:	9104      	str	r1, [sp, #16]
 800bac4:	f7ff bacb 	b.w	800b05e <_strtod_l+0x16e>
 800bac8:	ffc00000 	.word	0xffc00000
 800bacc:	41dfffff 	.word	0x41dfffff
 800bad0:	94a03595 	.word	0x94a03595
 800bad4:	3fcfffff 	.word	0x3fcfffff

0800bad8 <_strtod_r>:
 800bad8:	4b05      	ldr	r3, [pc, #20]	; (800baf0 <_strtod_r+0x18>)
 800bada:	681b      	ldr	r3, [r3, #0]
 800badc:	b410      	push	{r4}
 800bade:	6a1b      	ldr	r3, [r3, #32]
 800bae0:	4c04      	ldr	r4, [pc, #16]	; (800baf4 <_strtod_r+0x1c>)
 800bae2:	2b00      	cmp	r3, #0
 800bae4:	bf08      	it	eq
 800bae6:	4623      	moveq	r3, r4
 800bae8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800baec:	f7ff ba00 	b.w	800aef0 <_strtod_l>
 800baf0:	200001a0 	.word	0x200001a0
 800baf4:	20000204 	.word	0x20000204

0800baf8 <_strtol_l.isra.0>:
 800baf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bafc:	4680      	mov	r8, r0
 800bafe:	4689      	mov	r9, r1
 800bb00:	4692      	mov	sl, r2
 800bb02:	461e      	mov	r6, r3
 800bb04:	460f      	mov	r7, r1
 800bb06:	463d      	mov	r5, r7
 800bb08:	9808      	ldr	r0, [sp, #32]
 800bb0a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800bb0e:	f001 fa0d 	bl	800cf2c <__locale_ctype_ptr_l>
 800bb12:	4420      	add	r0, r4
 800bb14:	7843      	ldrb	r3, [r0, #1]
 800bb16:	f013 0308 	ands.w	r3, r3, #8
 800bb1a:	d132      	bne.n	800bb82 <_strtol_l.isra.0+0x8a>
 800bb1c:	2c2d      	cmp	r4, #45	; 0x2d
 800bb1e:	d132      	bne.n	800bb86 <_strtol_l.isra.0+0x8e>
 800bb20:	787c      	ldrb	r4, [r7, #1]
 800bb22:	1cbd      	adds	r5, r7, #2
 800bb24:	2201      	movs	r2, #1
 800bb26:	2e00      	cmp	r6, #0
 800bb28:	d05d      	beq.n	800bbe6 <_strtol_l.isra.0+0xee>
 800bb2a:	2e10      	cmp	r6, #16
 800bb2c:	d109      	bne.n	800bb42 <_strtol_l.isra.0+0x4a>
 800bb2e:	2c30      	cmp	r4, #48	; 0x30
 800bb30:	d107      	bne.n	800bb42 <_strtol_l.isra.0+0x4a>
 800bb32:	782b      	ldrb	r3, [r5, #0]
 800bb34:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800bb38:	2b58      	cmp	r3, #88	; 0x58
 800bb3a:	d14f      	bne.n	800bbdc <_strtol_l.isra.0+0xe4>
 800bb3c:	786c      	ldrb	r4, [r5, #1]
 800bb3e:	2610      	movs	r6, #16
 800bb40:	3502      	adds	r5, #2
 800bb42:	2a00      	cmp	r2, #0
 800bb44:	bf14      	ite	ne
 800bb46:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 800bb4a:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 800bb4e:	2700      	movs	r7, #0
 800bb50:	fbb1 fcf6 	udiv	ip, r1, r6
 800bb54:	4638      	mov	r0, r7
 800bb56:	fb06 1e1c 	mls	lr, r6, ip, r1
 800bb5a:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 800bb5e:	2b09      	cmp	r3, #9
 800bb60:	d817      	bhi.n	800bb92 <_strtol_l.isra.0+0x9a>
 800bb62:	461c      	mov	r4, r3
 800bb64:	42a6      	cmp	r6, r4
 800bb66:	dd23      	ble.n	800bbb0 <_strtol_l.isra.0+0xb8>
 800bb68:	1c7b      	adds	r3, r7, #1
 800bb6a:	d007      	beq.n	800bb7c <_strtol_l.isra.0+0x84>
 800bb6c:	4584      	cmp	ip, r0
 800bb6e:	d31c      	bcc.n	800bbaa <_strtol_l.isra.0+0xb2>
 800bb70:	d101      	bne.n	800bb76 <_strtol_l.isra.0+0x7e>
 800bb72:	45a6      	cmp	lr, r4
 800bb74:	db19      	blt.n	800bbaa <_strtol_l.isra.0+0xb2>
 800bb76:	fb00 4006 	mla	r0, r0, r6, r4
 800bb7a:	2701      	movs	r7, #1
 800bb7c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800bb80:	e7eb      	b.n	800bb5a <_strtol_l.isra.0+0x62>
 800bb82:	462f      	mov	r7, r5
 800bb84:	e7bf      	b.n	800bb06 <_strtol_l.isra.0+0xe>
 800bb86:	2c2b      	cmp	r4, #43	; 0x2b
 800bb88:	bf04      	itt	eq
 800bb8a:	1cbd      	addeq	r5, r7, #2
 800bb8c:	787c      	ldrbeq	r4, [r7, #1]
 800bb8e:	461a      	mov	r2, r3
 800bb90:	e7c9      	b.n	800bb26 <_strtol_l.isra.0+0x2e>
 800bb92:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 800bb96:	2b19      	cmp	r3, #25
 800bb98:	d801      	bhi.n	800bb9e <_strtol_l.isra.0+0xa6>
 800bb9a:	3c37      	subs	r4, #55	; 0x37
 800bb9c:	e7e2      	b.n	800bb64 <_strtol_l.isra.0+0x6c>
 800bb9e:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 800bba2:	2b19      	cmp	r3, #25
 800bba4:	d804      	bhi.n	800bbb0 <_strtol_l.isra.0+0xb8>
 800bba6:	3c57      	subs	r4, #87	; 0x57
 800bba8:	e7dc      	b.n	800bb64 <_strtol_l.isra.0+0x6c>
 800bbaa:	f04f 37ff 	mov.w	r7, #4294967295
 800bbae:	e7e5      	b.n	800bb7c <_strtol_l.isra.0+0x84>
 800bbb0:	1c7b      	adds	r3, r7, #1
 800bbb2:	d108      	bne.n	800bbc6 <_strtol_l.isra.0+0xce>
 800bbb4:	2322      	movs	r3, #34	; 0x22
 800bbb6:	f8c8 3000 	str.w	r3, [r8]
 800bbba:	4608      	mov	r0, r1
 800bbbc:	f1ba 0f00 	cmp.w	sl, #0
 800bbc0:	d107      	bne.n	800bbd2 <_strtol_l.isra.0+0xda>
 800bbc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bbc6:	b102      	cbz	r2, 800bbca <_strtol_l.isra.0+0xd2>
 800bbc8:	4240      	negs	r0, r0
 800bbca:	f1ba 0f00 	cmp.w	sl, #0
 800bbce:	d0f8      	beq.n	800bbc2 <_strtol_l.isra.0+0xca>
 800bbd0:	b10f      	cbz	r7, 800bbd6 <_strtol_l.isra.0+0xde>
 800bbd2:	f105 39ff 	add.w	r9, r5, #4294967295
 800bbd6:	f8ca 9000 	str.w	r9, [sl]
 800bbda:	e7f2      	b.n	800bbc2 <_strtol_l.isra.0+0xca>
 800bbdc:	2430      	movs	r4, #48	; 0x30
 800bbde:	2e00      	cmp	r6, #0
 800bbe0:	d1af      	bne.n	800bb42 <_strtol_l.isra.0+0x4a>
 800bbe2:	2608      	movs	r6, #8
 800bbe4:	e7ad      	b.n	800bb42 <_strtol_l.isra.0+0x4a>
 800bbe6:	2c30      	cmp	r4, #48	; 0x30
 800bbe8:	d0a3      	beq.n	800bb32 <_strtol_l.isra.0+0x3a>
 800bbea:	260a      	movs	r6, #10
 800bbec:	e7a9      	b.n	800bb42 <_strtol_l.isra.0+0x4a>
	...

0800bbf0 <_strtol_r>:
 800bbf0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bbf2:	4c06      	ldr	r4, [pc, #24]	; (800bc0c <_strtol_r+0x1c>)
 800bbf4:	4d06      	ldr	r5, [pc, #24]	; (800bc10 <_strtol_r+0x20>)
 800bbf6:	6824      	ldr	r4, [r4, #0]
 800bbf8:	6a24      	ldr	r4, [r4, #32]
 800bbfa:	2c00      	cmp	r4, #0
 800bbfc:	bf08      	it	eq
 800bbfe:	462c      	moveq	r4, r5
 800bc00:	9400      	str	r4, [sp, #0]
 800bc02:	f7ff ff79 	bl	800baf8 <_strtol_l.isra.0>
 800bc06:	b003      	add	sp, #12
 800bc08:	bd30      	pop	{r4, r5, pc}
 800bc0a:	bf00      	nop
 800bc0c:	200001a0 	.word	0x200001a0
 800bc10:	20000204 	.word	0x20000204

0800bc14 <_vsiprintf_r>:
 800bc14:	b500      	push	{lr}
 800bc16:	b09b      	sub	sp, #108	; 0x6c
 800bc18:	9100      	str	r1, [sp, #0]
 800bc1a:	9104      	str	r1, [sp, #16]
 800bc1c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800bc20:	9105      	str	r1, [sp, #20]
 800bc22:	9102      	str	r1, [sp, #8]
 800bc24:	4905      	ldr	r1, [pc, #20]	; (800bc3c <_vsiprintf_r+0x28>)
 800bc26:	9103      	str	r1, [sp, #12]
 800bc28:	4669      	mov	r1, sp
 800bc2a:	f001 fe19 	bl	800d860 <_svfiprintf_r>
 800bc2e:	9b00      	ldr	r3, [sp, #0]
 800bc30:	2200      	movs	r2, #0
 800bc32:	701a      	strb	r2, [r3, #0]
 800bc34:	b01b      	add	sp, #108	; 0x6c
 800bc36:	f85d fb04 	ldr.w	pc, [sp], #4
 800bc3a:	bf00      	nop
 800bc3c:	ffff0208 	.word	0xffff0208

0800bc40 <vsiprintf>:
 800bc40:	4613      	mov	r3, r2
 800bc42:	460a      	mov	r2, r1
 800bc44:	4601      	mov	r1, r0
 800bc46:	4802      	ldr	r0, [pc, #8]	; (800bc50 <vsiprintf+0x10>)
 800bc48:	6800      	ldr	r0, [r0, #0]
 800bc4a:	f7ff bfe3 	b.w	800bc14 <_vsiprintf_r>
 800bc4e:	bf00      	nop
 800bc50:	200001a0 	.word	0x200001a0

0800bc54 <quorem>:
 800bc54:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc58:	6903      	ldr	r3, [r0, #16]
 800bc5a:	690c      	ldr	r4, [r1, #16]
 800bc5c:	42a3      	cmp	r3, r4
 800bc5e:	4680      	mov	r8, r0
 800bc60:	f2c0 8082 	blt.w	800bd68 <quorem+0x114>
 800bc64:	3c01      	subs	r4, #1
 800bc66:	f101 0714 	add.w	r7, r1, #20
 800bc6a:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800bc6e:	f100 0614 	add.w	r6, r0, #20
 800bc72:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800bc76:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800bc7a:	eb06 030c 	add.w	r3, r6, ip
 800bc7e:	3501      	adds	r5, #1
 800bc80:	eb07 090c 	add.w	r9, r7, ip
 800bc84:	9301      	str	r3, [sp, #4]
 800bc86:	fbb0 f5f5 	udiv	r5, r0, r5
 800bc8a:	b395      	cbz	r5, 800bcf2 <quorem+0x9e>
 800bc8c:	f04f 0a00 	mov.w	sl, #0
 800bc90:	4638      	mov	r0, r7
 800bc92:	46b6      	mov	lr, r6
 800bc94:	46d3      	mov	fp, sl
 800bc96:	f850 2b04 	ldr.w	r2, [r0], #4
 800bc9a:	b293      	uxth	r3, r2
 800bc9c:	fb05 a303 	mla	r3, r5, r3, sl
 800bca0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800bca4:	b29b      	uxth	r3, r3
 800bca6:	ebab 0303 	sub.w	r3, fp, r3
 800bcaa:	0c12      	lsrs	r2, r2, #16
 800bcac:	f8de b000 	ldr.w	fp, [lr]
 800bcb0:	fb05 a202 	mla	r2, r5, r2, sl
 800bcb4:	fa13 f38b 	uxtah	r3, r3, fp
 800bcb8:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800bcbc:	fa1f fb82 	uxth.w	fp, r2
 800bcc0:	f8de 2000 	ldr.w	r2, [lr]
 800bcc4:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800bcc8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800bccc:	b29b      	uxth	r3, r3
 800bcce:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bcd2:	4581      	cmp	r9, r0
 800bcd4:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800bcd8:	f84e 3b04 	str.w	r3, [lr], #4
 800bcdc:	d2db      	bcs.n	800bc96 <quorem+0x42>
 800bcde:	f856 300c 	ldr.w	r3, [r6, ip]
 800bce2:	b933      	cbnz	r3, 800bcf2 <quorem+0x9e>
 800bce4:	9b01      	ldr	r3, [sp, #4]
 800bce6:	3b04      	subs	r3, #4
 800bce8:	429e      	cmp	r6, r3
 800bcea:	461a      	mov	r2, r3
 800bcec:	d330      	bcc.n	800bd50 <quorem+0xfc>
 800bcee:	f8c8 4010 	str.w	r4, [r8, #16]
 800bcf2:	4640      	mov	r0, r8
 800bcf4:	f001 fba0 	bl	800d438 <__mcmp>
 800bcf8:	2800      	cmp	r0, #0
 800bcfa:	db25      	blt.n	800bd48 <quorem+0xf4>
 800bcfc:	3501      	adds	r5, #1
 800bcfe:	4630      	mov	r0, r6
 800bd00:	f04f 0c00 	mov.w	ip, #0
 800bd04:	f857 2b04 	ldr.w	r2, [r7], #4
 800bd08:	f8d0 e000 	ldr.w	lr, [r0]
 800bd0c:	b293      	uxth	r3, r2
 800bd0e:	ebac 0303 	sub.w	r3, ip, r3
 800bd12:	0c12      	lsrs	r2, r2, #16
 800bd14:	fa13 f38e 	uxtah	r3, r3, lr
 800bd18:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800bd1c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800bd20:	b29b      	uxth	r3, r3
 800bd22:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bd26:	45b9      	cmp	r9, r7
 800bd28:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800bd2c:	f840 3b04 	str.w	r3, [r0], #4
 800bd30:	d2e8      	bcs.n	800bd04 <quorem+0xb0>
 800bd32:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800bd36:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800bd3a:	b92a      	cbnz	r2, 800bd48 <quorem+0xf4>
 800bd3c:	3b04      	subs	r3, #4
 800bd3e:	429e      	cmp	r6, r3
 800bd40:	461a      	mov	r2, r3
 800bd42:	d30b      	bcc.n	800bd5c <quorem+0x108>
 800bd44:	f8c8 4010 	str.w	r4, [r8, #16]
 800bd48:	4628      	mov	r0, r5
 800bd4a:	b003      	add	sp, #12
 800bd4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd50:	6812      	ldr	r2, [r2, #0]
 800bd52:	3b04      	subs	r3, #4
 800bd54:	2a00      	cmp	r2, #0
 800bd56:	d1ca      	bne.n	800bcee <quorem+0x9a>
 800bd58:	3c01      	subs	r4, #1
 800bd5a:	e7c5      	b.n	800bce8 <quorem+0x94>
 800bd5c:	6812      	ldr	r2, [r2, #0]
 800bd5e:	3b04      	subs	r3, #4
 800bd60:	2a00      	cmp	r2, #0
 800bd62:	d1ef      	bne.n	800bd44 <quorem+0xf0>
 800bd64:	3c01      	subs	r4, #1
 800bd66:	e7ea      	b.n	800bd3e <quorem+0xea>
 800bd68:	2000      	movs	r0, #0
 800bd6a:	e7ee      	b.n	800bd4a <quorem+0xf6>
 800bd6c:	0000      	movs	r0, r0
	...

0800bd70 <_dtoa_r>:
 800bd70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd74:	ec57 6b10 	vmov	r6, r7, d0
 800bd78:	b097      	sub	sp, #92	; 0x5c
 800bd7a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800bd7c:	9106      	str	r1, [sp, #24]
 800bd7e:	4604      	mov	r4, r0
 800bd80:	920b      	str	r2, [sp, #44]	; 0x2c
 800bd82:	9312      	str	r3, [sp, #72]	; 0x48
 800bd84:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800bd88:	e9cd 6700 	strd	r6, r7, [sp]
 800bd8c:	b93d      	cbnz	r5, 800bd9e <_dtoa_r+0x2e>
 800bd8e:	2010      	movs	r0, #16
 800bd90:	f7fe f95e 	bl	800a050 <malloc>
 800bd94:	6260      	str	r0, [r4, #36]	; 0x24
 800bd96:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800bd9a:	6005      	str	r5, [r0, #0]
 800bd9c:	60c5      	str	r5, [r0, #12]
 800bd9e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bda0:	6819      	ldr	r1, [r3, #0]
 800bda2:	b151      	cbz	r1, 800bdba <_dtoa_r+0x4a>
 800bda4:	685a      	ldr	r2, [r3, #4]
 800bda6:	604a      	str	r2, [r1, #4]
 800bda8:	2301      	movs	r3, #1
 800bdaa:	4093      	lsls	r3, r2
 800bdac:	608b      	str	r3, [r1, #8]
 800bdae:	4620      	mov	r0, r4
 800bdb0:	f001 f923 	bl	800cffa <_Bfree>
 800bdb4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bdb6:	2200      	movs	r2, #0
 800bdb8:	601a      	str	r2, [r3, #0]
 800bdba:	1e3b      	subs	r3, r7, #0
 800bdbc:	bfbb      	ittet	lt
 800bdbe:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800bdc2:	9301      	strlt	r3, [sp, #4]
 800bdc4:	2300      	movge	r3, #0
 800bdc6:	2201      	movlt	r2, #1
 800bdc8:	bfac      	ite	ge
 800bdca:	f8c8 3000 	strge.w	r3, [r8]
 800bdce:	f8c8 2000 	strlt.w	r2, [r8]
 800bdd2:	4baf      	ldr	r3, [pc, #700]	; (800c090 <_dtoa_r+0x320>)
 800bdd4:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800bdd8:	ea33 0308 	bics.w	r3, r3, r8
 800bddc:	d114      	bne.n	800be08 <_dtoa_r+0x98>
 800bdde:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800bde0:	f242 730f 	movw	r3, #9999	; 0x270f
 800bde4:	6013      	str	r3, [r2, #0]
 800bde6:	9b00      	ldr	r3, [sp, #0]
 800bde8:	b923      	cbnz	r3, 800bdf4 <_dtoa_r+0x84>
 800bdea:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800bdee:	2800      	cmp	r0, #0
 800bdf0:	f000 8542 	beq.w	800c878 <_dtoa_r+0xb08>
 800bdf4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bdf6:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 800c0a4 <_dtoa_r+0x334>
 800bdfa:	2b00      	cmp	r3, #0
 800bdfc:	f000 8544 	beq.w	800c888 <_dtoa_r+0xb18>
 800be00:	f10b 0303 	add.w	r3, fp, #3
 800be04:	f000 bd3e 	b.w	800c884 <_dtoa_r+0xb14>
 800be08:	e9dd 6700 	ldrd	r6, r7, [sp]
 800be0c:	2200      	movs	r2, #0
 800be0e:	2300      	movs	r3, #0
 800be10:	4630      	mov	r0, r6
 800be12:	4639      	mov	r1, r7
 800be14:	f7f4 fe78 	bl	8000b08 <__aeabi_dcmpeq>
 800be18:	4681      	mov	r9, r0
 800be1a:	b168      	cbz	r0, 800be38 <_dtoa_r+0xc8>
 800be1c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800be1e:	2301      	movs	r3, #1
 800be20:	6013      	str	r3, [r2, #0]
 800be22:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800be24:	2b00      	cmp	r3, #0
 800be26:	f000 8524 	beq.w	800c872 <_dtoa_r+0xb02>
 800be2a:	4b9a      	ldr	r3, [pc, #616]	; (800c094 <_dtoa_r+0x324>)
 800be2c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800be2e:	f103 3bff 	add.w	fp, r3, #4294967295
 800be32:	6013      	str	r3, [r2, #0]
 800be34:	f000 bd28 	b.w	800c888 <_dtoa_r+0xb18>
 800be38:	aa14      	add	r2, sp, #80	; 0x50
 800be3a:	a915      	add	r1, sp, #84	; 0x54
 800be3c:	ec47 6b10 	vmov	d0, r6, r7
 800be40:	4620      	mov	r0, r4
 800be42:	f001 fbe7 	bl	800d614 <__d2b>
 800be46:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800be4a:	9004      	str	r0, [sp, #16]
 800be4c:	2d00      	cmp	r5, #0
 800be4e:	d07c      	beq.n	800bf4a <_dtoa_r+0x1da>
 800be50:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800be54:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 800be58:	46b2      	mov	sl, r6
 800be5a:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 800be5e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800be62:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 800be66:	2200      	movs	r2, #0
 800be68:	4b8b      	ldr	r3, [pc, #556]	; (800c098 <_dtoa_r+0x328>)
 800be6a:	4650      	mov	r0, sl
 800be6c:	4659      	mov	r1, fp
 800be6e:	f7f4 fa2b 	bl	80002c8 <__aeabi_dsub>
 800be72:	a381      	add	r3, pc, #516	; (adr r3, 800c078 <_dtoa_r+0x308>)
 800be74:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be78:	f7f4 fbde 	bl	8000638 <__aeabi_dmul>
 800be7c:	a380      	add	r3, pc, #512	; (adr r3, 800c080 <_dtoa_r+0x310>)
 800be7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be82:	f7f4 fa23 	bl	80002cc <__adddf3>
 800be86:	4606      	mov	r6, r0
 800be88:	4628      	mov	r0, r5
 800be8a:	460f      	mov	r7, r1
 800be8c:	f7f4 fb6a 	bl	8000564 <__aeabi_i2d>
 800be90:	a37d      	add	r3, pc, #500	; (adr r3, 800c088 <_dtoa_r+0x318>)
 800be92:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be96:	f7f4 fbcf 	bl	8000638 <__aeabi_dmul>
 800be9a:	4602      	mov	r2, r0
 800be9c:	460b      	mov	r3, r1
 800be9e:	4630      	mov	r0, r6
 800bea0:	4639      	mov	r1, r7
 800bea2:	f7f4 fa13 	bl	80002cc <__adddf3>
 800bea6:	4606      	mov	r6, r0
 800bea8:	460f      	mov	r7, r1
 800beaa:	f7f4 fe75 	bl	8000b98 <__aeabi_d2iz>
 800beae:	2200      	movs	r2, #0
 800beb0:	4682      	mov	sl, r0
 800beb2:	2300      	movs	r3, #0
 800beb4:	4630      	mov	r0, r6
 800beb6:	4639      	mov	r1, r7
 800beb8:	f7f4 fe30 	bl	8000b1c <__aeabi_dcmplt>
 800bebc:	b148      	cbz	r0, 800bed2 <_dtoa_r+0x162>
 800bebe:	4650      	mov	r0, sl
 800bec0:	f7f4 fb50 	bl	8000564 <__aeabi_i2d>
 800bec4:	4632      	mov	r2, r6
 800bec6:	463b      	mov	r3, r7
 800bec8:	f7f4 fe1e 	bl	8000b08 <__aeabi_dcmpeq>
 800becc:	b908      	cbnz	r0, 800bed2 <_dtoa_r+0x162>
 800bece:	f10a 3aff 	add.w	sl, sl, #4294967295
 800bed2:	f1ba 0f16 	cmp.w	sl, #22
 800bed6:	d859      	bhi.n	800bf8c <_dtoa_r+0x21c>
 800bed8:	4970      	ldr	r1, [pc, #448]	; (800c09c <_dtoa_r+0x32c>)
 800beda:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800bede:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bee2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bee6:	f7f4 fe37 	bl	8000b58 <__aeabi_dcmpgt>
 800beea:	2800      	cmp	r0, #0
 800beec:	d050      	beq.n	800bf90 <_dtoa_r+0x220>
 800beee:	f10a 3aff 	add.w	sl, sl, #4294967295
 800bef2:	2300      	movs	r3, #0
 800bef4:	930f      	str	r3, [sp, #60]	; 0x3c
 800bef6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800bef8:	1b5d      	subs	r5, r3, r5
 800befa:	f1b5 0801 	subs.w	r8, r5, #1
 800befe:	bf49      	itett	mi
 800bf00:	f1c5 0301 	rsbmi	r3, r5, #1
 800bf04:	2300      	movpl	r3, #0
 800bf06:	9305      	strmi	r3, [sp, #20]
 800bf08:	f04f 0800 	movmi.w	r8, #0
 800bf0c:	bf58      	it	pl
 800bf0e:	9305      	strpl	r3, [sp, #20]
 800bf10:	f1ba 0f00 	cmp.w	sl, #0
 800bf14:	db3e      	blt.n	800bf94 <_dtoa_r+0x224>
 800bf16:	2300      	movs	r3, #0
 800bf18:	44d0      	add	r8, sl
 800bf1a:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800bf1e:	9307      	str	r3, [sp, #28]
 800bf20:	9b06      	ldr	r3, [sp, #24]
 800bf22:	2b09      	cmp	r3, #9
 800bf24:	f200 8090 	bhi.w	800c048 <_dtoa_r+0x2d8>
 800bf28:	2b05      	cmp	r3, #5
 800bf2a:	bfc4      	itt	gt
 800bf2c:	3b04      	subgt	r3, #4
 800bf2e:	9306      	strgt	r3, [sp, #24]
 800bf30:	9b06      	ldr	r3, [sp, #24]
 800bf32:	f1a3 0302 	sub.w	r3, r3, #2
 800bf36:	bfcc      	ite	gt
 800bf38:	2500      	movgt	r5, #0
 800bf3a:	2501      	movle	r5, #1
 800bf3c:	2b03      	cmp	r3, #3
 800bf3e:	f200 808f 	bhi.w	800c060 <_dtoa_r+0x2f0>
 800bf42:	e8df f003 	tbb	[pc, r3]
 800bf46:	7f7d      	.short	0x7f7d
 800bf48:	7131      	.short	0x7131
 800bf4a:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 800bf4e:	441d      	add	r5, r3
 800bf50:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800bf54:	2820      	cmp	r0, #32
 800bf56:	dd13      	ble.n	800bf80 <_dtoa_r+0x210>
 800bf58:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800bf5c:	9b00      	ldr	r3, [sp, #0]
 800bf5e:	fa08 f800 	lsl.w	r8, r8, r0
 800bf62:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800bf66:	fa23 f000 	lsr.w	r0, r3, r0
 800bf6a:	ea48 0000 	orr.w	r0, r8, r0
 800bf6e:	f7f4 fae9 	bl	8000544 <__aeabi_ui2d>
 800bf72:	2301      	movs	r3, #1
 800bf74:	4682      	mov	sl, r0
 800bf76:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 800bf7a:	3d01      	subs	r5, #1
 800bf7c:	9313      	str	r3, [sp, #76]	; 0x4c
 800bf7e:	e772      	b.n	800be66 <_dtoa_r+0xf6>
 800bf80:	9b00      	ldr	r3, [sp, #0]
 800bf82:	f1c0 0020 	rsb	r0, r0, #32
 800bf86:	fa03 f000 	lsl.w	r0, r3, r0
 800bf8a:	e7f0      	b.n	800bf6e <_dtoa_r+0x1fe>
 800bf8c:	2301      	movs	r3, #1
 800bf8e:	e7b1      	b.n	800bef4 <_dtoa_r+0x184>
 800bf90:	900f      	str	r0, [sp, #60]	; 0x3c
 800bf92:	e7b0      	b.n	800bef6 <_dtoa_r+0x186>
 800bf94:	9b05      	ldr	r3, [sp, #20]
 800bf96:	eba3 030a 	sub.w	r3, r3, sl
 800bf9a:	9305      	str	r3, [sp, #20]
 800bf9c:	f1ca 0300 	rsb	r3, sl, #0
 800bfa0:	9307      	str	r3, [sp, #28]
 800bfa2:	2300      	movs	r3, #0
 800bfa4:	930e      	str	r3, [sp, #56]	; 0x38
 800bfa6:	e7bb      	b.n	800bf20 <_dtoa_r+0x1b0>
 800bfa8:	2301      	movs	r3, #1
 800bfaa:	930a      	str	r3, [sp, #40]	; 0x28
 800bfac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bfae:	2b00      	cmp	r3, #0
 800bfb0:	dd59      	ble.n	800c066 <_dtoa_r+0x2f6>
 800bfb2:	9302      	str	r3, [sp, #8]
 800bfb4:	4699      	mov	r9, r3
 800bfb6:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800bfb8:	2200      	movs	r2, #0
 800bfba:	6072      	str	r2, [r6, #4]
 800bfbc:	2204      	movs	r2, #4
 800bfbe:	f102 0014 	add.w	r0, r2, #20
 800bfc2:	4298      	cmp	r0, r3
 800bfc4:	6871      	ldr	r1, [r6, #4]
 800bfc6:	d953      	bls.n	800c070 <_dtoa_r+0x300>
 800bfc8:	4620      	mov	r0, r4
 800bfca:	f000 ffe2 	bl	800cf92 <_Balloc>
 800bfce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bfd0:	6030      	str	r0, [r6, #0]
 800bfd2:	f1b9 0f0e 	cmp.w	r9, #14
 800bfd6:	f8d3 b000 	ldr.w	fp, [r3]
 800bfda:	f200 80e6 	bhi.w	800c1aa <_dtoa_r+0x43a>
 800bfde:	2d00      	cmp	r5, #0
 800bfe0:	f000 80e3 	beq.w	800c1aa <_dtoa_r+0x43a>
 800bfe4:	ed9d 7b00 	vldr	d7, [sp]
 800bfe8:	f1ba 0f00 	cmp.w	sl, #0
 800bfec:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 800bff0:	dd74      	ble.n	800c0dc <_dtoa_r+0x36c>
 800bff2:	4a2a      	ldr	r2, [pc, #168]	; (800c09c <_dtoa_r+0x32c>)
 800bff4:	f00a 030f 	and.w	r3, sl, #15
 800bff8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800bffc:	ed93 7b00 	vldr	d7, [r3]
 800c000:	ea4f 162a 	mov.w	r6, sl, asr #4
 800c004:	06f0      	lsls	r0, r6, #27
 800c006:	ed8d 7b08 	vstr	d7, [sp, #32]
 800c00a:	d565      	bpl.n	800c0d8 <_dtoa_r+0x368>
 800c00c:	4b24      	ldr	r3, [pc, #144]	; (800c0a0 <_dtoa_r+0x330>)
 800c00e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800c012:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800c016:	f7f4 fc39 	bl	800088c <__aeabi_ddiv>
 800c01a:	e9cd 0100 	strd	r0, r1, [sp]
 800c01e:	f006 060f 	and.w	r6, r6, #15
 800c022:	2503      	movs	r5, #3
 800c024:	4f1e      	ldr	r7, [pc, #120]	; (800c0a0 <_dtoa_r+0x330>)
 800c026:	e04c      	b.n	800c0c2 <_dtoa_r+0x352>
 800c028:	2301      	movs	r3, #1
 800c02a:	930a      	str	r3, [sp, #40]	; 0x28
 800c02c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c02e:	4453      	add	r3, sl
 800c030:	f103 0901 	add.w	r9, r3, #1
 800c034:	9302      	str	r3, [sp, #8]
 800c036:	464b      	mov	r3, r9
 800c038:	2b01      	cmp	r3, #1
 800c03a:	bfb8      	it	lt
 800c03c:	2301      	movlt	r3, #1
 800c03e:	e7ba      	b.n	800bfb6 <_dtoa_r+0x246>
 800c040:	2300      	movs	r3, #0
 800c042:	e7b2      	b.n	800bfaa <_dtoa_r+0x23a>
 800c044:	2300      	movs	r3, #0
 800c046:	e7f0      	b.n	800c02a <_dtoa_r+0x2ba>
 800c048:	2501      	movs	r5, #1
 800c04a:	2300      	movs	r3, #0
 800c04c:	9306      	str	r3, [sp, #24]
 800c04e:	950a      	str	r5, [sp, #40]	; 0x28
 800c050:	f04f 33ff 	mov.w	r3, #4294967295
 800c054:	9302      	str	r3, [sp, #8]
 800c056:	4699      	mov	r9, r3
 800c058:	2200      	movs	r2, #0
 800c05a:	2312      	movs	r3, #18
 800c05c:	920b      	str	r2, [sp, #44]	; 0x2c
 800c05e:	e7aa      	b.n	800bfb6 <_dtoa_r+0x246>
 800c060:	2301      	movs	r3, #1
 800c062:	930a      	str	r3, [sp, #40]	; 0x28
 800c064:	e7f4      	b.n	800c050 <_dtoa_r+0x2e0>
 800c066:	2301      	movs	r3, #1
 800c068:	9302      	str	r3, [sp, #8]
 800c06a:	4699      	mov	r9, r3
 800c06c:	461a      	mov	r2, r3
 800c06e:	e7f5      	b.n	800c05c <_dtoa_r+0x2ec>
 800c070:	3101      	adds	r1, #1
 800c072:	6071      	str	r1, [r6, #4]
 800c074:	0052      	lsls	r2, r2, #1
 800c076:	e7a2      	b.n	800bfbe <_dtoa_r+0x24e>
 800c078:	636f4361 	.word	0x636f4361
 800c07c:	3fd287a7 	.word	0x3fd287a7
 800c080:	8b60c8b3 	.word	0x8b60c8b3
 800c084:	3fc68a28 	.word	0x3fc68a28
 800c088:	509f79fb 	.word	0x509f79fb
 800c08c:	3fd34413 	.word	0x3fd34413
 800c090:	7ff00000 	.word	0x7ff00000
 800c094:	0800dbc1 	.word	0x0800dbc1
 800c098:	3ff80000 	.word	0x3ff80000
 800c09c:	0800dc80 	.word	0x0800dc80
 800c0a0:	0800dc58 	.word	0x0800dc58
 800c0a4:	0800dc49 	.word	0x0800dc49
 800c0a8:	07f1      	lsls	r1, r6, #31
 800c0aa:	d508      	bpl.n	800c0be <_dtoa_r+0x34e>
 800c0ac:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800c0b0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c0b4:	f7f4 fac0 	bl	8000638 <__aeabi_dmul>
 800c0b8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800c0bc:	3501      	adds	r5, #1
 800c0be:	1076      	asrs	r6, r6, #1
 800c0c0:	3708      	adds	r7, #8
 800c0c2:	2e00      	cmp	r6, #0
 800c0c4:	d1f0      	bne.n	800c0a8 <_dtoa_r+0x338>
 800c0c6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800c0ca:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c0ce:	f7f4 fbdd 	bl	800088c <__aeabi_ddiv>
 800c0d2:	e9cd 0100 	strd	r0, r1, [sp]
 800c0d6:	e01a      	b.n	800c10e <_dtoa_r+0x39e>
 800c0d8:	2502      	movs	r5, #2
 800c0da:	e7a3      	b.n	800c024 <_dtoa_r+0x2b4>
 800c0dc:	f000 80a0 	beq.w	800c220 <_dtoa_r+0x4b0>
 800c0e0:	f1ca 0600 	rsb	r6, sl, #0
 800c0e4:	4b9f      	ldr	r3, [pc, #636]	; (800c364 <_dtoa_r+0x5f4>)
 800c0e6:	4fa0      	ldr	r7, [pc, #640]	; (800c368 <_dtoa_r+0x5f8>)
 800c0e8:	f006 020f 	and.w	r2, r6, #15
 800c0ec:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c0f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0f4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800c0f8:	f7f4 fa9e 	bl	8000638 <__aeabi_dmul>
 800c0fc:	e9cd 0100 	strd	r0, r1, [sp]
 800c100:	1136      	asrs	r6, r6, #4
 800c102:	2300      	movs	r3, #0
 800c104:	2502      	movs	r5, #2
 800c106:	2e00      	cmp	r6, #0
 800c108:	d17f      	bne.n	800c20a <_dtoa_r+0x49a>
 800c10a:	2b00      	cmp	r3, #0
 800c10c:	d1e1      	bne.n	800c0d2 <_dtoa_r+0x362>
 800c10e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c110:	2b00      	cmp	r3, #0
 800c112:	f000 8087 	beq.w	800c224 <_dtoa_r+0x4b4>
 800c116:	e9dd 6700 	ldrd	r6, r7, [sp]
 800c11a:	2200      	movs	r2, #0
 800c11c:	4b93      	ldr	r3, [pc, #588]	; (800c36c <_dtoa_r+0x5fc>)
 800c11e:	4630      	mov	r0, r6
 800c120:	4639      	mov	r1, r7
 800c122:	f7f4 fcfb 	bl	8000b1c <__aeabi_dcmplt>
 800c126:	2800      	cmp	r0, #0
 800c128:	d07c      	beq.n	800c224 <_dtoa_r+0x4b4>
 800c12a:	f1b9 0f00 	cmp.w	r9, #0
 800c12e:	d079      	beq.n	800c224 <_dtoa_r+0x4b4>
 800c130:	9b02      	ldr	r3, [sp, #8]
 800c132:	2b00      	cmp	r3, #0
 800c134:	dd35      	ble.n	800c1a2 <_dtoa_r+0x432>
 800c136:	f10a 33ff 	add.w	r3, sl, #4294967295
 800c13a:	9308      	str	r3, [sp, #32]
 800c13c:	4639      	mov	r1, r7
 800c13e:	2200      	movs	r2, #0
 800c140:	4b8b      	ldr	r3, [pc, #556]	; (800c370 <_dtoa_r+0x600>)
 800c142:	4630      	mov	r0, r6
 800c144:	f7f4 fa78 	bl	8000638 <__aeabi_dmul>
 800c148:	e9cd 0100 	strd	r0, r1, [sp]
 800c14c:	9f02      	ldr	r7, [sp, #8]
 800c14e:	3501      	adds	r5, #1
 800c150:	4628      	mov	r0, r5
 800c152:	f7f4 fa07 	bl	8000564 <__aeabi_i2d>
 800c156:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c15a:	f7f4 fa6d 	bl	8000638 <__aeabi_dmul>
 800c15e:	2200      	movs	r2, #0
 800c160:	4b84      	ldr	r3, [pc, #528]	; (800c374 <_dtoa_r+0x604>)
 800c162:	f7f4 f8b3 	bl	80002cc <__adddf3>
 800c166:	4605      	mov	r5, r0
 800c168:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800c16c:	2f00      	cmp	r7, #0
 800c16e:	d15d      	bne.n	800c22c <_dtoa_r+0x4bc>
 800c170:	2200      	movs	r2, #0
 800c172:	4b81      	ldr	r3, [pc, #516]	; (800c378 <_dtoa_r+0x608>)
 800c174:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c178:	f7f4 f8a6 	bl	80002c8 <__aeabi_dsub>
 800c17c:	462a      	mov	r2, r5
 800c17e:	4633      	mov	r3, r6
 800c180:	e9cd 0100 	strd	r0, r1, [sp]
 800c184:	f7f4 fce8 	bl	8000b58 <__aeabi_dcmpgt>
 800c188:	2800      	cmp	r0, #0
 800c18a:	f040 8288 	bne.w	800c69e <_dtoa_r+0x92e>
 800c18e:	462a      	mov	r2, r5
 800c190:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800c194:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c198:	f7f4 fcc0 	bl	8000b1c <__aeabi_dcmplt>
 800c19c:	2800      	cmp	r0, #0
 800c19e:	f040 827c 	bne.w	800c69a <_dtoa_r+0x92a>
 800c1a2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800c1a6:	e9cd 2300 	strd	r2, r3, [sp]
 800c1aa:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c1ac:	2b00      	cmp	r3, #0
 800c1ae:	f2c0 8150 	blt.w	800c452 <_dtoa_r+0x6e2>
 800c1b2:	f1ba 0f0e 	cmp.w	sl, #14
 800c1b6:	f300 814c 	bgt.w	800c452 <_dtoa_r+0x6e2>
 800c1ba:	4b6a      	ldr	r3, [pc, #424]	; (800c364 <_dtoa_r+0x5f4>)
 800c1bc:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800c1c0:	ed93 7b00 	vldr	d7, [r3]
 800c1c4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c1c6:	2b00      	cmp	r3, #0
 800c1c8:	ed8d 7b02 	vstr	d7, [sp, #8]
 800c1cc:	f280 80d8 	bge.w	800c380 <_dtoa_r+0x610>
 800c1d0:	f1b9 0f00 	cmp.w	r9, #0
 800c1d4:	f300 80d4 	bgt.w	800c380 <_dtoa_r+0x610>
 800c1d8:	f040 825e 	bne.w	800c698 <_dtoa_r+0x928>
 800c1dc:	2200      	movs	r2, #0
 800c1de:	4b66      	ldr	r3, [pc, #408]	; (800c378 <_dtoa_r+0x608>)
 800c1e0:	ec51 0b17 	vmov	r0, r1, d7
 800c1e4:	f7f4 fa28 	bl	8000638 <__aeabi_dmul>
 800c1e8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c1ec:	f7f4 fcaa 	bl	8000b44 <__aeabi_dcmpge>
 800c1f0:	464f      	mov	r7, r9
 800c1f2:	464e      	mov	r6, r9
 800c1f4:	2800      	cmp	r0, #0
 800c1f6:	f040 8234 	bne.w	800c662 <_dtoa_r+0x8f2>
 800c1fa:	2331      	movs	r3, #49	; 0x31
 800c1fc:	f10b 0501 	add.w	r5, fp, #1
 800c200:	f88b 3000 	strb.w	r3, [fp]
 800c204:	f10a 0a01 	add.w	sl, sl, #1
 800c208:	e22f      	b.n	800c66a <_dtoa_r+0x8fa>
 800c20a:	07f2      	lsls	r2, r6, #31
 800c20c:	d505      	bpl.n	800c21a <_dtoa_r+0x4aa>
 800c20e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c212:	f7f4 fa11 	bl	8000638 <__aeabi_dmul>
 800c216:	3501      	adds	r5, #1
 800c218:	2301      	movs	r3, #1
 800c21a:	1076      	asrs	r6, r6, #1
 800c21c:	3708      	adds	r7, #8
 800c21e:	e772      	b.n	800c106 <_dtoa_r+0x396>
 800c220:	2502      	movs	r5, #2
 800c222:	e774      	b.n	800c10e <_dtoa_r+0x39e>
 800c224:	f8cd a020 	str.w	sl, [sp, #32]
 800c228:	464f      	mov	r7, r9
 800c22a:	e791      	b.n	800c150 <_dtoa_r+0x3e0>
 800c22c:	4b4d      	ldr	r3, [pc, #308]	; (800c364 <_dtoa_r+0x5f4>)
 800c22e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800c232:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800c236:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c238:	2b00      	cmp	r3, #0
 800c23a:	d047      	beq.n	800c2cc <_dtoa_r+0x55c>
 800c23c:	4602      	mov	r2, r0
 800c23e:	460b      	mov	r3, r1
 800c240:	2000      	movs	r0, #0
 800c242:	494e      	ldr	r1, [pc, #312]	; (800c37c <_dtoa_r+0x60c>)
 800c244:	f7f4 fb22 	bl	800088c <__aeabi_ddiv>
 800c248:	462a      	mov	r2, r5
 800c24a:	4633      	mov	r3, r6
 800c24c:	f7f4 f83c 	bl	80002c8 <__aeabi_dsub>
 800c250:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800c254:	465d      	mov	r5, fp
 800c256:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c25a:	f7f4 fc9d 	bl	8000b98 <__aeabi_d2iz>
 800c25e:	4606      	mov	r6, r0
 800c260:	f7f4 f980 	bl	8000564 <__aeabi_i2d>
 800c264:	4602      	mov	r2, r0
 800c266:	460b      	mov	r3, r1
 800c268:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c26c:	f7f4 f82c 	bl	80002c8 <__aeabi_dsub>
 800c270:	3630      	adds	r6, #48	; 0x30
 800c272:	f805 6b01 	strb.w	r6, [r5], #1
 800c276:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800c27a:	e9cd 0100 	strd	r0, r1, [sp]
 800c27e:	f7f4 fc4d 	bl	8000b1c <__aeabi_dcmplt>
 800c282:	2800      	cmp	r0, #0
 800c284:	d163      	bne.n	800c34e <_dtoa_r+0x5de>
 800c286:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c28a:	2000      	movs	r0, #0
 800c28c:	4937      	ldr	r1, [pc, #220]	; (800c36c <_dtoa_r+0x5fc>)
 800c28e:	f7f4 f81b 	bl	80002c8 <__aeabi_dsub>
 800c292:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800c296:	f7f4 fc41 	bl	8000b1c <__aeabi_dcmplt>
 800c29a:	2800      	cmp	r0, #0
 800c29c:	f040 80b7 	bne.w	800c40e <_dtoa_r+0x69e>
 800c2a0:	eba5 030b 	sub.w	r3, r5, fp
 800c2a4:	429f      	cmp	r7, r3
 800c2a6:	f77f af7c 	ble.w	800c1a2 <_dtoa_r+0x432>
 800c2aa:	2200      	movs	r2, #0
 800c2ac:	4b30      	ldr	r3, [pc, #192]	; (800c370 <_dtoa_r+0x600>)
 800c2ae:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800c2b2:	f7f4 f9c1 	bl	8000638 <__aeabi_dmul>
 800c2b6:	2200      	movs	r2, #0
 800c2b8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800c2bc:	4b2c      	ldr	r3, [pc, #176]	; (800c370 <_dtoa_r+0x600>)
 800c2be:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c2c2:	f7f4 f9b9 	bl	8000638 <__aeabi_dmul>
 800c2c6:	e9cd 0100 	strd	r0, r1, [sp]
 800c2ca:	e7c4      	b.n	800c256 <_dtoa_r+0x4e6>
 800c2cc:	462a      	mov	r2, r5
 800c2ce:	4633      	mov	r3, r6
 800c2d0:	f7f4 f9b2 	bl	8000638 <__aeabi_dmul>
 800c2d4:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800c2d8:	eb0b 0507 	add.w	r5, fp, r7
 800c2dc:	465e      	mov	r6, fp
 800c2de:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c2e2:	f7f4 fc59 	bl	8000b98 <__aeabi_d2iz>
 800c2e6:	4607      	mov	r7, r0
 800c2e8:	f7f4 f93c 	bl	8000564 <__aeabi_i2d>
 800c2ec:	3730      	adds	r7, #48	; 0x30
 800c2ee:	4602      	mov	r2, r0
 800c2f0:	460b      	mov	r3, r1
 800c2f2:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c2f6:	f7f3 ffe7 	bl	80002c8 <__aeabi_dsub>
 800c2fa:	f806 7b01 	strb.w	r7, [r6], #1
 800c2fe:	42ae      	cmp	r6, r5
 800c300:	e9cd 0100 	strd	r0, r1, [sp]
 800c304:	f04f 0200 	mov.w	r2, #0
 800c308:	d126      	bne.n	800c358 <_dtoa_r+0x5e8>
 800c30a:	4b1c      	ldr	r3, [pc, #112]	; (800c37c <_dtoa_r+0x60c>)
 800c30c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800c310:	f7f3 ffdc 	bl	80002cc <__adddf3>
 800c314:	4602      	mov	r2, r0
 800c316:	460b      	mov	r3, r1
 800c318:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c31c:	f7f4 fc1c 	bl	8000b58 <__aeabi_dcmpgt>
 800c320:	2800      	cmp	r0, #0
 800c322:	d174      	bne.n	800c40e <_dtoa_r+0x69e>
 800c324:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800c328:	2000      	movs	r0, #0
 800c32a:	4914      	ldr	r1, [pc, #80]	; (800c37c <_dtoa_r+0x60c>)
 800c32c:	f7f3 ffcc 	bl	80002c8 <__aeabi_dsub>
 800c330:	4602      	mov	r2, r0
 800c332:	460b      	mov	r3, r1
 800c334:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c338:	f7f4 fbf0 	bl	8000b1c <__aeabi_dcmplt>
 800c33c:	2800      	cmp	r0, #0
 800c33e:	f43f af30 	beq.w	800c1a2 <_dtoa_r+0x432>
 800c342:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800c346:	2b30      	cmp	r3, #48	; 0x30
 800c348:	f105 32ff 	add.w	r2, r5, #4294967295
 800c34c:	d002      	beq.n	800c354 <_dtoa_r+0x5e4>
 800c34e:	f8dd a020 	ldr.w	sl, [sp, #32]
 800c352:	e04a      	b.n	800c3ea <_dtoa_r+0x67a>
 800c354:	4615      	mov	r5, r2
 800c356:	e7f4      	b.n	800c342 <_dtoa_r+0x5d2>
 800c358:	4b05      	ldr	r3, [pc, #20]	; (800c370 <_dtoa_r+0x600>)
 800c35a:	f7f4 f96d 	bl	8000638 <__aeabi_dmul>
 800c35e:	e9cd 0100 	strd	r0, r1, [sp]
 800c362:	e7bc      	b.n	800c2de <_dtoa_r+0x56e>
 800c364:	0800dc80 	.word	0x0800dc80
 800c368:	0800dc58 	.word	0x0800dc58
 800c36c:	3ff00000 	.word	0x3ff00000
 800c370:	40240000 	.word	0x40240000
 800c374:	401c0000 	.word	0x401c0000
 800c378:	40140000 	.word	0x40140000
 800c37c:	3fe00000 	.word	0x3fe00000
 800c380:	e9dd 6700 	ldrd	r6, r7, [sp]
 800c384:	465d      	mov	r5, fp
 800c386:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c38a:	4630      	mov	r0, r6
 800c38c:	4639      	mov	r1, r7
 800c38e:	f7f4 fa7d 	bl	800088c <__aeabi_ddiv>
 800c392:	f7f4 fc01 	bl	8000b98 <__aeabi_d2iz>
 800c396:	4680      	mov	r8, r0
 800c398:	f7f4 f8e4 	bl	8000564 <__aeabi_i2d>
 800c39c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c3a0:	f7f4 f94a 	bl	8000638 <__aeabi_dmul>
 800c3a4:	4602      	mov	r2, r0
 800c3a6:	460b      	mov	r3, r1
 800c3a8:	4630      	mov	r0, r6
 800c3aa:	4639      	mov	r1, r7
 800c3ac:	f108 0630 	add.w	r6, r8, #48	; 0x30
 800c3b0:	f7f3 ff8a 	bl	80002c8 <__aeabi_dsub>
 800c3b4:	f805 6b01 	strb.w	r6, [r5], #1
 800c3b8:	eba5 060b 	sub.w	r6, r5, fp
 800c3bc:	45b1      	cmp	r9, r6
 800c3be:	4602      	mov	r2, r0
 800c3c0:	460b      	mov	r3, r1
 800c3c2:	d139      	bne.n	800c438 <_dtoa_r+0x6c8>
 800c3c4:	f7f3 ff82 	bl	80002cc <__adddf3>
 800c3c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c3cc:	4606      	mov	r6, r0
 800c3ce:	460f      	mov	r7, r1
 800c3d0:	f7f4 fbc2 	bl	8000b58 <__aeabi_dcmpgt>
 800c3d4:	b9c8      	cbnz	r0, 800c40a <_dtoa_r+0x69a>
 800c3d6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c3da:	4630      	mov	r0, r6
 800c3dc:	4639      	mov	r1, r7
 800c3de:	f7f4 fb93 	bl	8000b08 <__aeabi_dcmpeq>
 800c3e2:	b110      	cbz	r0, 800c3ea <_dtoa_r+0x67a>
 800c3e4:	f018 0f01 	tst.w	r8, #1
 800c3e8:	d10f      	bne.n	800c40a <_dtoa_r+0x69a>
 800c3ea:	9904      	ldr	r1, [sp, #16]
 800c3ec:	4620      	mov	r0, r4
 800c3ee:	f000 fe04 	bl	800cffa <_Bfree>
 800c3f2:	2300      	movs	r3, #0
 800c3f4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800c3f6:	702b      	strb	r3, [r5, #0]
 800c3f8:	f10a 0301 	add.w	r3, sl, #1
 800c3fc:	6013      	str	r3, [r2, #0]
 800c3fe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c400:	2b00      	cmp	r3, #0
 800c402:	f000 8241 	beq.w	800c888 <_dtoa_r+0xb18>
 800c406:	601d      	str	r5, [r3, #0]
 800c408:	e23e      	b.n	800c888 <_dtoa_r+0xb18>
 800c40a:	f8cd a020 	str.w	sl, [sp, #32]
 800c40e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800c412:	2a39      	cmp	r2, #57	; 0x39
 800c414:	f105 33ff 	add.w	r3, r5, #4294967295
 800c418:	d108      	bne.n	800c42c <_dtoa_r+0x6bc>
 800c41a:	459b      	cmp	fp, r3
 800c41c:	d10a      	bne.n	800c434 <_dtoa_r+0x6c4>
 800c41e:	9b08      	ldr	r3, [sp, #32]
 800c420:	3301      	adds	r3, #1
 800c422:	9308      	str	r3, [sp, #32]
 800c424:	2330      	movs	r3, #48	; 0x30
 800c426:	f88b 3000 	strb.w	r3, [fp]
 800c42a:	465b      	mov	r3, fp
 800c42c:	781a      	ldrb	r2, [r3, #0]
 800c42e:	3201      	adds	r2, #1
 800c430:	701a      	strb	r2, [r3, #0]
 800c432:	e78c      	b.n	800c34e <_dtoa_r+0x5de>
 800c434:	461d      	mov	r5, r3
 800c436:	e7ea      	b.n	800c40e <_dtoa_r+0x69e>
 800c438:	2200      	movs	r2, #0
 800c43a:	4b9b      	ldr	r3, [pc, #620]	; (800c6a8 <_dtoa_r+0x938>)
 800c43c:	f7f4 f8fc 	bl	8000638 <__aeabi_dmul>
 800c440:	2200      	movs	r2, #0
 800c442:	2300      	movs	r3, #0
 800c444:	4606      	mov	r6, r0
 800c446:	460f      	mov	r7, r1
 800c448:	f7f4 fb5e 	bl	8000b08 <__aeabi_dcmpeq>
 800c44c:	2800      	cmp	r0, #0
 800c44e:	d09a      	beq.n	800c386 <_dtoa_r+0x616>
 800c450:	e7cb      	b.n	800c3ea <_dtoa_r+0x67a>
 800c452:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c454:	2a00      	cmp	r2, #0
 800c456:	f000 808b 	beq.w	800c570 <_dtoa_r+0x800>
 800c45a:	9a06      	ldr	r2, [sp, #24]
 800c45c:	2a01      	cmp	r2, #1
 800c45e:	dc6e      	bgt.n	800c53e <_dtoa_r+0x7ce>
 800c460:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800c462:	2a00      	cmp	r2, #0
 800c464:	d067      	beq.n	800c536 <_dtoa_r+0x7c6>
 800c466:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800c46a:	9f07      	ldr	r7, [sp, #28]
 800c46c:	9d05      	ldr	r5, [sp, #20]
 800c46e:	9a05      	ldr	r2, [sp, #20]
 800c470:	2101      	movs	r1, #1
 800c472:	441a      	add	r2, r3
 800c474:	4620      	mov	r0, r4
 800c476:	9205      	str	r2, [sp, #20]
 800c478:	4498      	add	r8, r3
 800c47a:	f000 fe9c 	bl	800d1b6 <__i2b>
 800c47e:	4606      	mov	r6, r0
 800c480:	2d00      	cmp	r5, #0
 800c482:	dd0c      	ble.n	800c49e <_dtoa_r+0x72e>
 800c484:	f1b8 0f00 	cmp.w	r8, #0
 800c488:	dd09      	ble.n	800c49e <_dtoa_r+0x72e>
 800c48a:	4545      	cmp	r5, r8
 800c48c:	9a05      	ldr	r2, [sp, #20]
 800c48e:	462b      	mov	r3, r5
 800c490:	bfa8      	it	ge
 800c492:	4643      	movge	r3, r8
 800c494:	1ad2      	subs	r2, r2, r3
 800c496:	9205      	str	r2, [sp, #20]
 800c498:	1aed      	subs	r5, r5, r3
 800c49a:	eba8 0803 	sub.w	r8, r8, r3
 800c49e:	9b07      	ldr	r3, [sp, #28]
 800c4a0:	b1eb      	cbz	r3, 800c4de <_dtoa_r+0x76e>
 800c4a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c4a4:	2b00      	cmp	r3, #0
 800c4a6:	d067      	beq.n	800c578 <_dtoa_r+0x808>
 800c4a8:	b18f      	cbz	r7, 800c4ce <_dtoa_r+0x75e>
 800c4aa:	4631      	mov	r1, r6
 800c4ac:	463a      	mov	r2, r7
 800c4ae:	4620      	mov	r0, r4
 800c4b0:	f000 ff20 	bl	800d2f4 <__pow5mult>
 800c4b4:	9a04      	ldr	r2, [sp, #16]
 800c4b6:	4601      	mov	r1, r0
 800c4b8:	4606      	mov	r6, r0
 800c4ba:	4620      	mov	r0, r4
 800c4bc:	f000 fe84 	bl	800d1c8 <__multiply>
 800c4c0:	9904      	ldr	r1, [sp, #16]
 800c4c2:	9008      	str	r0, [sp, #32]
 800c4c4:	4620      	mov	r0, r4
 800c4c6:	f000 fd98 	bl	800cffa <_Bfree>
 800c4ca:	9b08      	ldr	r3, [sp, #32]
 800c4cc:	9304      	str	r3, [sp, #16]
 800c4ce:	9b07      	ldr	r3, [sp, #28]
 800c4d0:	1bda      	subs	r2, r3, r7
 800c4d2:	d004      	beq.n	800c4de <_dtoa_r+0x76e>
 800c4d4:	9904      	ldr	r1, [sp, #16]
 800c4d6:	4620      	mov	r0, r4
 800c4d8:	f000 ff0c 	bl	800d2f4 <__pow5mult>
 800c4dc:	9004      	str	r0, [sp, #16]
 800c4de:	2101      	movs	r1, #1
 800c4e0:	4620      	mov	r0, r4
 800c4e2:	f000 fe68 	bl	800d1b6 <__i2b>
 800c4e6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c4e8:	4607      	mov	r7, r0
 800c4ea:	2b00      	cmp	r3, #0
 800c4ec:	f000 81d0 	beq.w	800c890 <_dtoa_r+0xb20>
 800c4f0:	461a      	mov	r2, r3
 800c4f2:	4601      	mov	r1, r0
 800c4f4:	4620      	mov	r0, r4
 800c4f6:	f000 fefd 	bl	800d2f4 <__pow5mult>
 800c4fa:	9b06      	ldr	r3, [sp, #24]
 800c4fc:	2b01      	cmp	r3, #1
 800c4fe:	4607      	mov	r7, r0
 800c500:	dc40      	bgt.n	800c584 <_dtoa_r+0x814>
 800c502:	9b00      	ldr	r3, [sp, #0]
 800c504:	2b00      	cmp	r3, #0
 800c506:	d139      	bne.n	800c57c <_dtoa_r+0x80c>
 800c508:	9b01      	ldr	r3, [sp, #4]
 800c50a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c50e:	2b00      	cmp	r3, #0
 800c510:	d136      	bne.n	800c580 <_dtoa_r+0x810>
 800c512:	9b01      	ldr	r3, [sp, #4]
 800c514:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c518:	0d1b      	lsrs	r3, r3, #20
 800c51a:	051b      	lsls	r3, r3, #20
 800c51c:	b12b      	cbz	r3, 800c52a <_dtoa_r+0x7ba>
 800c51e:	9b05      	ldr	r3, [sp, #20]
 800c520:	3301      	adds	r3, #1
 800c522:	9305      	str	r3, [sp, #20]
 800c524:	f108 0801 	add.w	r8, r8, #1
 800c528:	2301      	movs	r3, #1
 800c52a:	9307      	str	r3, [sp, #28]
 800c52c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c52e:	2b00      	cmp	r3, #0
 800c530:	d12a      	bne.n	800c588 <_dtoa_r+0x818>
 800c532:	2001      	movs	r0, #1
 800c534:	e030      	b.n	800c598 <_dtoa_r+0x828>
 800c536:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c538:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800c53c:	e795      	b.n	800c46a <_dtoa_r+0x6fa>
 800c53e:	9b07      	ldr	r3, [sp, #28]
 800c540:	f109 37ff 	add.w	r7, r9, #4294967295
 800c544:	42bb      	cmp	r3, r7
 800c546:	bfbf      	itttt	lt
 800c548:	9b07      	ldrlt	r3, [sp, #28]
 800c54a:	9707      	strlt	r7, [sp, #28]
 800c54c:	1afa      	sublt	r2, r7, r3
 800c54e:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800c550:	bfbb      	ittet	lt
 800c552:	189b      	addlt	r3, r3, r2
 800c554:	930e      	strlt	r3, [sp, #56]	; 0x38
 800c556:	1bdf      	subge	r7, r3, r7
 800c558:	2700      	movlt	r7, #0
 800c55a:	f1b9 0f00 	cmp.w	r9, #0
 800c55e:	bfb5      	itete	lt
 800c560:	9b05      	ldrlt	r3, [sp, #20]
 800c562:	9d05      	ldrge	r5, [sp, #20]
 800c564:	eba3 0509 	sublt.w	r5, r3, r9
 800c568:	464b      	movge	r3, r9
 800c56a:	bfb8      	it	lt
 800c56c:	2300      	movlt	r3, #0
 800c56e:	e77e      	b.n	800c46e <_dtoa_r+0x6fe>
 800c570:	9f07      	ldr	r7, [sp, #28]
 800c572:	9d05      	ldr	r5, [sp, #20]
 800c574:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800c576:	e783      	b.n	800c480 <_dtoa_r+0x710>
 800c578:	9a07      	ldr	r2, [sp, #28]
 800c57a:	e7ab      	b.n	800c4d4 <_dtoa_r+0x764>
 800c57c:	2300      	movs	r3, #0
 800c57e:	e7d4      	b.n	800c52a <_dtoa_r+0x7ba>
 800c580:	9b00      	ldr	r3, [sp, #0]
 800c582:	e7d2      	b.n	800c52a <_dtoa_r+0x7ba>
 800c584:	2300      	movs	r3, #0
 800c586:	9307      	str	r3, [sp, #28]
 800c588:	693b      	ldr	r3, [r7, #16]
 800c58a:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800c58e:	6918      	ldr	r0, [r3, #16]
 800c590:	f000 fdc3 	bl	800d11a <__hi0bits>
 800c594:	f1c0 0020 	rsb	r0, r0, #32
 800c598:	4440      	add	r0, r8
 800c59a:	f010 001f 	ands.w	r0, r0, #31
 800c59e:	d047      	beq.n	800c630 <_dtoa_r+0x8c0>
 800c5a0:	f1c0 0320 	rsb	r3, r0, #32
 800c5a4:	2b04      	cmp	r3, #4
 800c5a6:	dd3b      	ble.n	800c620 <_dtoa_r+0x8b0>
 800c5a8:	9b05      	ldr	r3, [sp, #20]
 800c5aa:	f1c0 001c 	rsb	r0, r0, #28
 800c5ae:	4403      	add	r3, r0
 800c5b0:	9305      	str	r3, [sp, #20]
 800c5b2:	4405      	add	r5, r0
 800c5b4:	4480      	add	r8, r0
 800c5b6:	9b05      	ldr	r3, [sp, #20]
 800c5b8:	2b00      	cmp	r3, #0
 800c5ba:	dd05      	ble.n	800c5c8 <_dtoa_r+0x858>
 800c5bc:	461a      	mov	r2, r3
 800c5be:	9904      	ldr	r1, [sp, #16]
 800c5c0:	4620      	mov	r0, r4
 800c5c2:	f000 fee5 	bl	800d390 <__lshift>
 800c5c6:	9004      	str	r0, [sp, #16]
 800c5c8:	f1b8 0f00 	cmp.w	r8, #0
 800c5cc:	dd05      	ble.n	800c5da <_dtoa_r+0x86a>
 800c5ce:	4639      	mov	r1, r7
 800c5d0:	4642      	mov	r2, r8
 800c5d2:	4620      	mov	r0, r4
 800c5d4:	f000 fedc 	bl	800d390 <__lshift>
 800c5d8:	4607      	mov	r7, r0
 800c5da:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c5dc:	b353      	cbz	r3, 800c634 <_dtoa_r+0x8c4>
 800c5de:	4639      	mov	r1, r7
 800c5e0:	9804      	ldr	r0, [sp, #16]
 800c5e2:	f000 ff29 	bl	800d438 <__mcmp>
 800c5e6:	2800      	cmp	r0, #0
 800c5e8:	da24      	bge.n	800c634 <_dtoa_r+0x8c4>
 800c5ea:	2300      	movs	r3, #0
 800c5ec:	220a      	movs	r2, #10
 800c5ee:	9904      	ldr	r1, [sp, #16]
 800c5f0:	4620      	mov	r0, r4
 800c5f2:	f000 fd19 	bl	800d028 <__multadd>
 800c5f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c5f8:	9004      	str	r0, [sp, #16]
 800c5fa:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c5fe:	2b00      	cmp	r3, #0
 800c600:	f000 814d 	beq.w	800c89e <_dtoa_r+0xb2e>
 800c604:	2300      	movs	r3, #0
 800c606:	4631      	mov	r1, r6
 800c608:	220a      	movs	r2, #10
 800c60a:	4620      	mov	r0, r4
 800c60c:	f000 fd0c 	bl	800d028 <__multadd>
 800c610:	9b02      	ldr	r3, [sp, #8]
 800c612:	2b00      	cmp	r3, #0
 800c614:	4606      	mov	r6, r0
 800c616:	dc4f      	bgt.n	800c6b8 <_dtoa_r+0x948>
 800c618:	9b06      	ldr	r3, [sp, #24]
 800c61a:	2b02      	cmp	r3, #2
 800c61c:	dd4c      	ble.n	800c6b8 <_dtoa_r+0x948>
 800c61e:	e011      	b.n	800c644 <_dtoa_r+0x8d4>
 800c620:	d0c9      	beq.n	800c5b6 <_dtoa_r+0x846>
 800c622:	9a05      	ldr	r2, [sp, #20]
 800c624:	331c      	adds	r3, #28
 800c626:	441a      	add	r2, r3
 800c628:	9205      	str	r2, [sp, #20]
 800c62a:	441d      	add	r5, r3
 800c62c:	4498      	add	r8, r3
 800c62e:	e7c2      	b.n	800c5b6 <_dtoa_r+0x846>
 800c630:	4603      	mov	r3, r0
 800c632:	e7f6      	b.n	800c622 <_dtoa_r+0x8b2>
 800c634:	f1b9 0f00 	cmp.w	r9, #0
 800c638:	dc38      	bgt.n	800c6ac <_dtoa_r+0x93c>
 800c63a:	9b06      	ldr	r3, [sp, #24]
 800c63c:	2b02      	cmp	r3, #2
 800c63e:	dd35      	ble.n	800c6ac <_dtoa_r+0x93c>
 800c640:	f8cd 9008 	str.w	r9, [sp, #8]
 800c644:	9b02      	ldr	r3, [sp, #8]
 800c646:	b963      	cbnz	r3, 800c662 <_dtoa_r+0x8f2>
 800c648:	4639      	mov	r1, r7
 800c64a:	2205      	movs	r2, #5
 800c64c:	4620      	mov	r0, r4
 800c64e:	f000 fceb 	bl	800d028 <__multadd>
 800c652:	4601      	mov	r1, r0
 800c654:	4607      	mov	r7, r0
 800c656:	9804      	ldr	r0, [sp, #16]
 800c658:	f000 feee 	bl	800d438 <__mcmp>
 800c65c:	2800      	cmp	r0, #0
 800c65e:	f73f adcc 	bgt.w	800c1fa <_dtoa_r+0x48a>
 800c662:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c664:	465d      	mov	r5, fp
 800c666:	ea6f 0a03 	mvn.w	sl, r3
 800c66a:	f04f 0900 	mov.w	r9, #0
 800c66e:	4639      	mov	r1, r7
 800c670:	4620      	mov	r0, r4
 800c672:	f000 fcc2 	bl	800cffa <_Bfree>
 800c676:	2e00      	cmp	r6, #0
 800c678:	f43f aeb7 	beq.w	800c3ea <_dtoa_r+0x67a>
 800c67c:	f1b9 0f00 	cmp.w	r9, #0
 800c680:	d005      	beq.n	800c68e <_dtoa_r+0x91e>
 800c682:	45b1      	cmp	r9, r6
 800c684:	d003      	beq.n	800c68e <_dtoa_r+0x91e>
 800c686:	4649      	mov	r1, r9
 800c688:	4620      	mov	r0, r4
 800c68a:	f000 fcb6 	bl	800cffa <_Bfree>
 800c68e:	4631      	mov	r1, r6
 800c690:	4620      	mov	r0, r4
 800c692:	f000 fcb2 	bl	800cffa <_Bfree>
 800c696:	e6a8      	b.n	800c3ea <_dtoa_r+0x67a>
 800c698:	2700      	movs	r7, #0
 800c69a:	463e      	mov	r6, r7
 800c69c:	e7e1      	b.n	800c662 <_dtoa_r+0x8f2>
 800c69e:	f8dd a020 	ldr.w	sl, [sp, #32]
 800c6a2:	463e      	mov	r6, r7
 800c6a4:	e5a9      	b.n	800c1fa <_dtoa_r+0x48a>
 800c6a6:	bf00      	nop
 800c6a8:	40240000 	.word	0x40240000
 800c6ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c6ae:	f8cd 9008 	str.w	r9, [sp, #8]
 800c6b2:	2b00      	cmp	r3, #0
 800c6b4:	f000 80fa 	beq.w	800c8ac <_dtoa_r+0xb3c>
 800c6b8:	2d00      	cmp	r5, #0
 800c6ba:	dd05      	ble.n	800c6c8 <_dtoa_r+0x958>
 800c6bc:	4631      	mov	r1, r6
 800c6be:	462a      	mov	r2, r5
 800c6c0:	4620      	mov	r0, r4
 800c6c2:	f000 fe65 	bl	800d390 <__lshift>
 800c6c6:	4606      	mov	r6, r0
 800c6c8:	9b07      	ldr	r3, [sp, #28]
 800c6ca:	2b00      	cmp	r3, #0
 800c6cc:	d04c      	beq.n	800c768 <_dtoa_r+0x9f8>
 800c6ce:	6871      	ldr	r1, [r6, #4]
 800c6d0:	4620      	mov	r0, r4
 800c6d2:	f000 fc5e 	bl	800cf92 <_Balloc>
 800c6d6:	6932      	ldr	r2, [r6, #16]
 800c6d8:	3202      	adds	r2, #2
 800c6da:	4605      	mov	r5, r0
 800c6dc:	0092      	lsls	r2, r2, #2
 800c6de:	f106 010c 	add.w	r1, r6, #12
 800c6e2:	300c      	adds	r0, #12
 800c6e4:	f000 fc48 	bl	800cf78 <memcpy>
 800c6e8:	2201      	movs	r2, #1
 800c6ea:	4629      	mov	r1, r5
 800c6ec:	4620      	mov	r0, r4
 800c6ee:	f000 fe4f 	bl	800d390 <__lshift>
 800c6f2:	9b00      	ldr	r3, [sp, #0]
 800c6f4:	f8cd b014 	str.w	fp, [sp, #20]
 800c6f8:	f003 0301 	and.w	r3, r3, #1
 800c6fc:	46b1      	mov	r9, r6
 800c6fe:	9307      	str	r3, [sp, #28]
 800c700:	4606      	mov	r6, r0
 800c702:	4639      	mov	r1, r7
 800c704:	9804      	ldr	r0, [sp, #16]
 800c706:	f7ff faa5 	bl	800bc54 <quorem>
 800c70a:	4649      	mov	r1, r9
 800c70c:	4605      	mov	r5, r0
 800c70e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800c712:	9804      	ldr	r0, [sp, #16]
 800c714:	f000 fe90 	bl	800d438 <__mcmp>
 800c718:	4632      	mov	r2, r6
 800c71a:	9000      	str	r0, [sp, #0]
 800c71c:	4639      	mov	r1, r7
 800c71e:	4620      	mov	r0, r4
 800c720:	f000 fea4 	bl	800d46c <__mdiff>
 800c724:	68c3      	ldr	r3, [r0, #12]
 800c726:	4602      	mov	r2, r0
 800c728:	bb03      	cbnz	r3, 800c76c <_dtoa_r+0x9fc>
 800c72a:	4601      	mov	r1, r0
 800c72c:	9008      	str	r0, [sp, #32]
 800c72e:	9804      	ldr	r0, [sp, #16]
 800c730:	f000 fe82 	bl	800d438 <__mcmp>
 800c734:	9a08      	ldr	r2, [sp, #32]
 800c736:	4603      	mov	r3, r0
 800c738:	4611      	mov	r1, r2
 800c73a:	4620      	mov	r0, r4
 800c73c:	9308      	str	r3, [sp, #32]
 800c73e:	f000 fc5c 	bl	800cffa <_Bfree>
 800c742:	9b08      	ldr	r3, [sp, #32]
 800c744:	b9a3      	cbnz	r3, 800c770 <_dtoa_r+0xa00>
 800c746:	9a06      	ldr	r2, [sp, #24]
 800c748:	b992      	cbnz	r2, 800c770 <_dtoa_r+0xa00>
 800c74a:	9a07      	ldr	r2, [sp, #28]
 800c74c:	b982      	cbnz	r2, 800c770 <_dtoa_r+0xa00>
 800c74e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800c752:	d029      	beq.n	800c7a8 <_dtoa_r+0xa38>
 800c754:	9b00      	ldr	r3, [sp, #0]
 800c756:	2b00      	cmp	r3, #0
 800c758:	dd01      	ble.n	800c75e <_dtoa_r+0x9ee>
 800c75a:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800c75e:	9b05      	ldr	r3, [sp, #20]
 800c760:	1c5d      	adds	r5, r3, #1
 800c762:	f883 8000 	strb.w	r8, [r3]
 800c766:	e782      	b.n	800c66e <_dtoa_r+0x8fe>
 800c768:	4630      	mov	r0, r6
 800c76a:	e7c2      	b.n	800c6f2 <_dtoa_r+0x982>
 800c76c:	2301      	movs	r3, #1
 800c76e:	e7e3      	b.n	800c738 <_dtoa_r+0x9c8>
 800c770:	9a00      	ldr	r2, [sp, #0]
 800c772:	2a00      	cmp	r2, #0
 800c774:	db04      	blt.n	800c780 <_dtoa_r+0xa10>
 800c776:	d125      	bne.n	800c7c4 <_dtoa_r+0xa54>
 800c778:	9a06      	ldr	r2, [sp, #24]
 800c77a:	bb1a      	cbnz	r2, 800c7c4 <_dtoa_r+0xa54>
 800c77c:	9a07      	ldr	r2, [sp, #28]
 800c77e:	bb0a      	cbnz	r2, 800c7c4 <_dtoa_r+0xa54>
 800c780:	2b00      	cmp	r3, #0
 800c782:	ddec      	ble.n	800c75e <_dtoa_r+0x9ee>
 800c784:	2201      	movs	r2, #1
 800c786:	9904      	ldr	r1, [sp, #16]
 800c788:	4620      	mov	r0, r4
 800c78a:	f000 fe01 	bl	800d390 <__lshift>
 800c78e:	4639      	mov	r1, r7
 800c790:	9004      	str	r0, [sp, #16]
 800c792:	f000 fe51 	bl	800d438 <__mcmp>
 800c796:	2800      	cmp	r0, #0
 800c798:	dc03      	bgt.n	800c7a2 <_dtoa_r+0xa32>
 800c79a:	d1e0      	bne.n	800c75e <_dtoa_r+0x9ee>
 800c79c:	f018 0f01 	tst.w	r8, #1
 800c7a0:	d0dd      	beq.n	800c75e <_dtoa_r+0x9ee>
 800c7a2:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800c7a6:	d1d8      	bne.n	800c75a <_dtoa_r+0x9ea>
 800c7a8:	9b05      	ldr	r3, [sp, #20]
 800c7aa:	9a05      	ldr	r2, [sp, #20]
 800c7ac:	1c5d      	adds	r5, r3, #1
 800c7ae:	2339      	movs	r3, #57	; 0x39
 800c7b0:	7013      	strb	r3, [r2, #0]
 800c7b2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800c7b6:	2b39      	cmp	r3, #57	; 0x39
 800c7b8:	f105 32ff 	add.w	r2, r5, #4294967295
 800c7bc:	d04f      	beq.n	800c85e <_dtoa_r+0xaee>
 800c7be:	3301      	adds	r3, #1
 800c7c0:	7013      	strb	r3, [r2, #0]
 800c7c2:	e754      	b.n	800c66e <_dtoa_r+0x8fe>
 800c7c4:	9a05      	ldr	r2, [sp, #20]
 800c7c6:	2b00      	cmp	r3, #0
 800c7c8:	f102 0501 	add.w	r5, r2, #1
 800c7cc:	dd06      	ble.n	800c7dc <_dtoa_r+0xa6c>
 800c7ce:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800c7d2:	d0e9      	beq.n	800c7a8 <_dtoa_r+0xa38>
 800c7d4:	f108 0801 	add.w	r8, r8, #1
 800c7d8:	9b05      	ldr	r3, [sp, #20]
 800c7da:	e7c2      	b.n	800c762 <_dtoa_r+0x9f2>
 800c7dc:	9a02      	ldr	r2, [sp, #8]
 800c7de:	f805 8c01 	strb.w	r8, [r5, #-1]
 800c7e2:	eba5 030b 	sub.w	r3, r5, fp
 800c7e6:	4293      	cmp	r3, r2
 800c7e8:	d021      	beq.n	800c82e <_dtoa_r+0xabe>
 800c7ea:	2300      	movs	r3, #0
 800c7ec:	220a      	movs	r2, #10
 800c7ee:	9904      	ldr	r1, [sp, #16]
 800c7f0:	4620      	mov	r0, r4
 800c7f2:	f000 fc19 	bl	800d028 <__multadd>
 800c7f6:	45b1      	cmp	r9, r6
 800c7f8:	9004      	str	r0, [sp, #16]
 800c7fa:	f04f 0300 	mov.w	r3, #0
 800c7fe:	f04f 020a 	mov.w	r2, #10
 800c802:	4649      	mov	r1, r9
 800c804:	4620      	mov	r0, r4
 800c806:	d105      	bne.n	800c814 <_dtoa_r+0xaa4>
 800c808:	f000 fc0e 	bl	800d028 <__multadd>
 800c80c:	4681      	mov	r9, r0
 800c80e:	4606      	mov	r6, r0
 800c810:	9505      	str	r5, [sp, #20]
 800c812:	e776      	b.n	800c702 <_dtoa_r+0x992>
 800c814:	f000 fc08 	bl	800d028 <__multadd>
 800c818:	4631      	mov	r1, r6
 800c81a:	4681      	mov	r9, r0
 800c81c:	2300      	movs	r3, #0
 800c81e:	220a      	movs	r2, #10
 800c820:	4620      	mov	r0, r4
 800c822:	f000 fc01 	bl	800d028 <__multadd>
 800c826:	4606      	mov	r6, r0
 800c828:	e7f2      	b.n	800c810 <_dtoa_r+0xaa0>
 800c82a:	f04f 0900 	mov.w	r9, #0
 800c82e:	2201      	movs	r2, #1
 800c830:	9904      	ldr	r1, [sp, #16]
 800c832:	4620      	mov	r0, r4
 800c834:	f000 fdac 	bl	800d390 <__lshift>
 800c838:	4639      	mov	r1, r7
 800c83a:	9004      	str	r0, [sp, #16]
 800c83c:	f000 fdfc 	bl	800d438 <__mcmp>
 800c840:	2800      	cmp	r0, #0
 800c842:	dcb6      	bgt.n	800c7b2 <_dtoa_r+0xa42>
 800c844:	d102      	bne.n	800c84c <_dtoa_r+0xadc>
 800c846:	f018 0f01 	tst.w	r8, #1
 800c84a:	d1b2      	bne.n	800c7b2 <_dtoa_r+0xa42>
 800c84c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800c850:	2b30      	cmp	r3, #48	; 0x30
 800c852:	f105 32ff 	add.w	r2, r5, #4294967295
 800c856:	f47f af0a 	bne.w	800c66e <_dtoa_r+0x8fe>
 800c85a:	4615      	mov	r5, r2
 800c85c:	e7f6      	b.n	800c84c <_dtoa_r+0xadc>
 800c85e:	4593      	cmp	fp, r2
 800c860:	d105      	bne.n	800c86e <_dtoa_r+0xafe>
 800c862:	2331      	movs	r3, #49	; 0x31
 800c864:	f10a 0a01 	add.w	sl, sl, #1
 800c868:	f88b 3000 	strb.w	r3, [fp]
 800c86c:	e6ff      	b.n	800c66e <_dtoa_r+0x8fe>
 800c86e:	4615      	mov	r5, r2
 800c870:	e79f      	b.n	800c7b2 <_dtoa_r+0xa42>
 800c872:	f8df b064 	ldr.w	fp, [pc, #100]	; 800c8d8 <_dtoa_r+0xb68>
 800c876:	e007      	b.n	800c888 <_dtoa_r+0xb18>
 800c878:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c87a:	f8df b060 	ldr.w	fp, [pc, #96]	; 800c8dc <_dtoa_r+0xb6c>
 800c87e:	b11b      	cbz	r3, 800c888 <_dtoa_r+0xb18>
 800c880:	f10b 0308 	add.w	r3, fp, #8
 800c884:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800c886:	6013      	str	r3, [r2, #0]
 800c888:	4658      	mov	r0, fp
 800c88a:	b017      	add	sp, #92	; 0x5c
 800c88c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c890:	9b06      	ldr	r3, [sp, #24]
 800c892:	2b01      	cmp	r3, #1
 800c894:	f77f ae35 	ble.w	800c502 <_dtoa_r+0x792>
 800c898:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c89a:	9307      	str	r3, [sp, #28]
 800c89c:	e649      	b.n	800c532 <_dtoa_r+0x7c2>
 800c89e:	9b02      	ldr	r3, [sp, #8]
 800c8a0:	2b00      	cmp	r3, #0
 800c8a2:	dc03      	bgt.n	800c8ac <_dtoa_r+0xb3c>
 800c8a4:	9b06      	ldr	r3, [sp, #24]
 800c8a6:	2b02      	cmp	r3, #2
 800c8a8:	f73f aecc 	bgt.w	800c644 <_dtoa_r+0x8d4>
 800c8ac:	465d      	mov	r5, fp
 800c8ae:	4639      	mov	r1, r7
 800c8b0:	9804      	ldr	r0, [sp, #16]
 800c8b2:	f7ff f9cf 	bl	800bc54 <quorem>
 800c8b6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800c8ba:	f805 8b01 	strb.w	r8, [r5], #1
 800c8be:	9a02      	ldr	r2, [sp, #8]
 800c8c0:	eba5 030b 	sub.w	r3, r5, fp
 800c8c4:	429a      	cmp	r2, r3
 800c8c6:	ddb0      	ble.n	800c82a <_dtoa_r+0xaba>
 800c8c8:	2300      	movs	r3, #0
 800c8ca:	220a      	movs	r2, #10
 800c8cc:	9904      	ldr	r1, [sp, #16]
 800c8ce:	4620      	mov	r0, r4
 800c8d0:	f000 fbaa 	bl	800d028 <__multadd>
 800c8d4:	9004      	str	r0, [sp, #16]
 800c8d6:	e7ea      	b.n	800c8ae <_dtoa_r+0xb3e>
 800c8d8:	0800dbc0 	.word	0x0800dbc0
 800c8dc:	0800dc40 	.word	0x0800dc40

0800c8e0 <rshift>:
 800c8e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c8e2:	6906      	ldr	r6, [r0, #16]
 800c8e4:	114b      	asrs	r3, r1, #5
 800c8e6:	429e      	cmp	r6, r3
 800c8e8:	f100 0414 	add.w	r4, r0, #20
 800c8ec:	dd30      	ble.n	800c950 <rshift+0x70>
 800c8ee:	f011 011f 	ands.w	r1, r1, #31
 800c8f2:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 800c8f6:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 800c8fa:	d108      	bne.n	800c90e <rshift+0x2e>
 800c8fc:	4621      	mov	r1, r4
 800c8fe:	42b2      	cmp	r2, r6
 800c900:	460b      	mov	r3, r1
 800c902:	d211      	bcs.n	800c928 <rshift+0x48>
 800c904:	f852 3b04 	ldr.w	r3, [r2], #4
 800c908:	f841 3b04 	str.w	r3, [r1], #4
 800c90c:	e7f7      	b.n	800c8fe <rshift+0x1e>
 800c90e:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 800c912:	f1c1 0c20 	rsb	ip, r1, #32
 800c916:	40cd      	lsrs	r5, r1
 800c918:	3204      	adds	r2, #4
 800c91a:	4623      	mov	r3, r4
 800c91c:	42b2      	cmp	r2, r6
 800c91e:	4617      	mov	r7, r2
 800c920:	d30c      	bcc.n	800c93c <rshift+0x5c>
 800c922:	601d      	str	r5, [r3, #0]
 800c924:	b105      	cbz	r5, 800c928 <rshift+0x48>
 800c926:	3304      	adds	r3, #4
 800c928:	1b1a      	subs	r2, r3, r4
 800c92a:	42a3      	cmp	r3, r4
 800c92c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800c930:	bf08      	it	eq
 800c932:	2300      	moveq	r3, #0
 800c934:	6102      	str	r2, [r0, #16]
 800c936:	bf08      	it	eq
 800c938:	6143      	streq	r3, [r0, #20]
 800c93a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c93c:	683f      	ldr	r7, [r7, #0]
 800c93e:	fa07 f70c 	lsl.w	r7, r7, ip
 800c942:	433d      	orrs	r5, r7
 800c944:	f843 5b04 	str.w	r5, [r3], #4
 800c948:	f852 5b04 	ldr.w	r5, [r2], #4
 800c94c:	40cd      	lsrs	r5, r1
 800c94e:	e7e5      	b.n	800c91c <rshift+0x3c>
 800c950:	4623      	mov	r3, r4
 800c952:	e7e9      	b.n	800c928 <rshift+0x48>

0800c954 <__hexdig_fun>:
 800c954:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800c958:	2b09      	cmp	r3, #9
 800c95a:	d802      	bhi.n	800c962 <__hexdig_fun+0xe>
 800c95c:	3820      	subs	r0, #32
 800c95e:	b2c0      	uxtb	r0, r0
 800c960:	4770      	bx	lr
 800c962:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800c966:	2b05      	cmp	r3, #5
 800c968:	d801      	bhi.n	800c96e <__hexdig_fun+0x1a>
 800c96a:	3847      	subs	r0, #71	; 0x47
 800c96c:	e7f7      	b.n	800c95e <__hexdig_fun+0xa>
 800c96e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800c972:	2b05      	cmp	r3, #5
 800c974:	d801      	bhi.n	800c97a <__hexdig_fun+0x26>
 800c976:	3827      	subs	r0, #39	; 0x27
 800c978:	e7f1      	b.n	800c95e <__hexdig_fun+0xa>
 800c97a:	2000      	movs	r0, #0
 800c97c:	4770      	bx	lr

0800c97e <__gethex>:
 800c97e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c982:	b08b      	sub	sp, #44	; 0x2c
 800c984:	468a      	mov	sl, r1
 800c986:	9002      	str	r0, [sp, #8]
 800c988:	9816      	ldr	r0, [sp, #88]	; 0x58
 800c98a:	9306      	str	r3, [sp, #24]
 800c98c:	4690      	mov	r8, r2
 800c98e:	f000 fad0 	bl	800cf32 <__localeconv_l>
 800c992:	6803      	ldr	r3, [r0, #0]
 800c994:	9303      	str	r3, [sp, #12]
 800c996:	4618      	mov	r0, r3
 800c998:	f7f3 fc3a 	bl	8000210 <strlen>
 800c99c:	9b03      	ldr	r3, [sp, #12]
 800c99e:	9001      	str	r0, [sp, #4]
 800c9a0:	4403      	add	r3, r0
 800c9a2:	f04f 0b00 	mov.w	fp, #0
 800c9a6:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800c9aa:	9307      	str	r3, [sp, #28]
 800c9ac:	f8da 3000 	ldr.w	r3, [sl]
 800c9b0:	3302      	adds	r3, #2
 800c9b2:	461f      	mov	r7, r3
 800c9b4:	f813 0b01 	ldrb.w	r0, [r3], #1
 800c9b8:	2830      	cmp	r0, #48	; 0x30
 800c9ba:	d06c      	beq.n	800ca96 <__gethex+0x118>
 800c9bc:	f7ff ffca 	bl	800c954 <__hexdig_fun>
 800c9c0:	4604      	mov	r4, r0
 800c9c2:	2800      	cmp	r0, #0
 800c9c4:	d16a      	bne.n	800ca9c <__gethex+0x11e>
 800c9c6:	9a01      	ldr	r2, [sp, #4]
 800c9c8:	9903      	ldr	r1, [sp, #12]
 800c9ca:	4638      	mov	r0, r7
 800c9cc:	f001 f840 	bl	800da50 <strncmp>
 800c9d0:	2800      	cmp	r0, #0
 800c9d2:	d166      	bne.n	800caa2 <__gethex+0x124>
 800c9d4:	9b01      	ldr	r3, [sp, #4]
 800c9d6:	5cf8      	ldrb	r0, [r7, r3]
 800c9d8:	18fe      	adds	r6, r7, r3
 800c9da:	f7ff ffbb 	bl	800c954 <__hexdig_fun>
 800c9de:	2800      	cmp	r0, #0
 800c9e0:	d062      	beq.n	800caa8 <__gethex+0x12a>
 800c9e2:	4633      	mov	r3, r6
 800c9e4:	7818      	ldrb	r0, [r3, #0]
 800c9e6:	2830      	cmp	r0, #48	; 0x30
 800c9e8:	461f      	mov	r7, r3
 800c9ea:	f103 0301 	add.w	r3, r3, #1
 800c9ee:	d0f9      	beq.n	800c9e4 <__gethex+0x66>
 800c9f0:	f7ff ffb0 	bl	800c954 <__hexdig_fun>
 800c9f4:	fab0 f580 	clz	r5, r0
 800c9f8:	096d      	lsrs	r5, r5, #5
 800c9fa:	4634      	mov	r4, r6
 800c9fc:	f04f 0b01 	mov.w	fp, #1
 800ca00:	463a      	mov	r2, r7
 800ca02:	4616      	mov	r6, r2
 800ca04:	3201      	adds	r2, #1
 800ca06:	7830      	ldrb	r0, [r6, #0]
 800ca08:	f7ff ffa4 	bl	800c954 <__hexdig_fun>
 800ca0c:	2800      	cmp	r0, #0
 800ca0e:	d1f8      	bne.n	800ca02 <__gethex+0x84>
 800ca10:	9a01      	ldr	r2, [sp, #4]
 800ca12:	9903      	ldr	r1, [sp, #12]
 800ca14:	4630      	mov	r0, r6
 800ca16:	f001 f81b 	bl	800da50 <strncmp>
 800ca1a:	b950      	cbnz	r0, 800ca32 <__gethex+0xb4>
 800ca1c:	b954      	cbnz	r4, 800ca34 <__gethex+0xb6>
 800ca1e:	9b01      	ldr	r3, [sp, #4]
 800ca20:	18f4      	adds	r4, r6, r3
 800ca22:	4622      	mov	r2, r4
 800ca24:	4616      	mov	r6, r2
 800ca26:	3201      	adds	r2, #1
 800ca28:	7830      	ldrb	r0, [r6, #0]
 800ca2a:	f7ff ff93 	bl	800c954 <__hexdig_fun>
 800ca2e:	2800      	cmp	r0, #0
 800ca30:	d1f8      	bne.n	800ca24 <__gethex+0xa6>
 800ca32:	b10c      	cbz	r4, 800ca38 <__gethex+0xba>
 800ca34:	1ba4      	subs	r4, r4, r6
 800ca36:	00a4      	lsls	r4, r4, #2
 800ca38:	7833      	ldrb	r3, [r6, #0]
 800ca3a:	2b50      	cmp	r3, #80	; 0x50
 800ca3c:	d001      	beq.n	800ca42 <__gethex+0xc4>
 800ca3e:	2b70      	cmp	r3, #112	; 0x70
 800ca40:	d140      	bne.n	800cac4 <__gethex+0x146>
 800ca42:	7873      	ldrb	r3, [r6, #1]
 800ca44:	2b2b      	cmp	r3, #43	; 0x2b
 800ca46:	d031      	beq.n	800caac <__gethex+0x12e>
 800ca48:	2b2d      	cmp	r3, #45	; 0x2d
 800ca4a:	d033      	beq.n	800cab4 <__gethex+0x136>
 800ca4c:	1c71      	adds	r1, r6, #1
 800ca4e:	f04f 0900 	mov.w	r9, #0
 800ca52:	7808      	ldrb	r0, [r1, #0]
 800ca54:	f7ff ff7e 	bl	800c954 <__hexdig_fun>
 800ca58:	1e43      	subs	r3, r0, #1
 800ca5a:	b2db      	uxtb	r3, r3
 800ca5c:	2b18      	cmp	r3, #24
 800ca5e:	d831      	bhi.n	800cac4 <__gethex+0x146>
 800ca60:	f1a0 0210 	sub.w	r2, r0, #16
 800ca64:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800ca68:	f7ff ff74 	bl	800c954 <__hexdig_fun>
 800ca6c:	1e43      	subs	r3, r0, #1
 800ca6e:	b2db      	uxtb	r3, r3
 800ca70:	2b18      	cmp	r3, #24
 800ca72:	d922      	bls.n	800caba <__gethex+0x13c>
 800ca74:	f1b9 0f00 	cmp.w	r9, #0
 800ca78:	d000      	beq.n	800ca7c <__gethex+0xfe>
 800ca7a:	4252      	negs	r2, r2
 800ca7c:	4414      	add	r4, r2
 800ca7e:	f8ca 1000 	str.w	r1, [sl]
 800ca82:	b30d      	cbz	r5, 800cac8 <__gethex+0x14a>
 800ca84:	f1bb 0f00 	cmp.w	fp, #0
 800ca88:	bf0c      	ite	eq
 800ca8a:	2706      	moveq	r7, #6
 800ca8c:	2700      	movne	r7, #0
 800ca8e:	4638      	mov	r0, r7
 800ca90:	b00b      	add	sp, #44	; 0x2c
 800ca92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ca96:	f10b 0b01 	add.w	fp, fp, #1
 800ca9a:	e78a      	b.n	800c9b2 <__gethex+0x34>
 800ca9c:	2500      	movs	r5, #0
 800ca9e:	462c      	mov	r4, r5
 800caa0:	e7ae      	b.n	800ca00 <__gethex+0x82>
 800caa2:	463e      	mov	r6, r7
 800caa4:	2501      	movs	r5, #1
 800caa6:	e7c7      	b.n	800ca38 <__gethex+0xba>
 800caa8:	4604      	mov	r4, r0
 800caaa:	e7fb      	b.n	800caa4 <__gethex+0x126>
 800caac:	f04f 0900 	mov.w	r9, #0
 800cab0:	1cb1      	adds	r1, r6, #2
 800cab2:	e7ce      	b.n	800ca52 <__gethex+0xd4>
 800cab4:	f04f 0901 	mov.w	r9, #1
 800cab8:	e7fa      	b.n	800cab0 <__gethex+0x132>
 800caba:	230a      	movs	r3, #10
 800cabc:	fb03 0202 	mla	r2, r3, r2, r0
 800cac0:	3a10      	subs	r2, #16
 800cac2:	e7cf      	b.n	800ca64 <__gethex+0xe6>
 800cac4:	4631      	mov	r1, r6
 800cac6:	e7da      	b.n	800ca7e <__gethex+0x100>
 800cac8:	1bf3      	subs	r3, r6, r7
 800caca:	3b01      	subs	r3, #1
 800cacc:	4629      	mov	r1, r5
 800cace:	2b07      	cmp	r3, #7
 800cad0:	dc49      	bgt.n	800cb66 <__gethex+0x1e8>
 800cad2:	9802      	ldr	r0, [sp, #8]
 800cad4:	f000 fa5d 	bl	800cf92 <_Balloc>
 800cad8:	9b01      	ldr	r3, [sp, #4]
 800cada:	f100 0914 	add.w	r9, r0, #20
 800cade:	f04f 0b00 	mov.w	fp, #0
 800cae2:	f1c3 0301 	rsb	r3, r3, #1
 800cae6:	4605      	mov	r5, r0
 800cae8:	f8cd 9010 	str.w	r9, [sp, #16]
 800caec:	46da      	mov	sl, fp
 800caee:	9308      	str	r3, [sp, #32]
 800caf0:	42b7      	cmp	r7, r6
 800caf2:	d33b      	bcc.n	800cb6c <__gethex+0x1ee>
 800caf4:	9804      	ldr	r0, [sp, #16]
 800caf6:	f840 ab04 	str.w	sl, [r0], #4
 800cafa:	eba0 0009 	sub.w	r0, r0, r9
 800cafe:	1080      	asrs	r0, r0, #2
 800cb00:	6128      	str	r0, [r5, #16]
 800cb02:	0147      	lsls	r7, r0, #5
 800cb04:	4650      	mov	r0, sl
 800cb06:	f000 fb08 	bl	800d11a <__hi0bits>
 800cb0a:	f8d8 6000 	ldr.w	r6, [r8]
 800cb0e:	1a3f      	subs	r7, r7, r0
 800cb10:	42b7      	cmp	r7, r6
 800cb12:	dd64      	ble.n	800cbde <__gethex+0x260>
 800cb14:	1bbf      	subs	r7, r7, r6
 800cb16:	4639      	mov	r1, r7
 800cb18:	4628      	mov	r0, r5
 800cb1a:	f000 fe17 	bl	800d74c <__any_on>
 800cb1e:	4682      	mov	sl, r0
 800cb20:	b178      	cbz	r0, 800cb42 <__gethex+0x1c4>
 800cb22:	1e7b      	subs	r3, r7, #1
 800cb24:	1159      	asrs	r1, r3, #5
 800cb26:	f003 021f 	and.w	r2, r3, #31
 800cb2a:	f04f 0a01 	mov.w	sl, #1
 800cb2e:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800cb32:	fa0a f202 	lsl.w	r2, sl, r2
 800cb36:	420a      	tst	r2, r1
 800cb38:	d003      	beq.n	800cb42 <__gethex+0x1c4>
 800cb3a:	4553      	cmp	r3, sl
 800cb3c:	dc46      	bgt.n	800cbcc <__gethex+0x24e>
 800cb3e:	f04f 0a02 	mov.w	sl, #2
 800cb42:	4639      	mov	r1, r7
 800cb44:	4628      	mov	r0, r5
 800cb46:	f7ff fecb 	bl	800c8e0 <rshift>
 800cb4a:	443c      	add	r4, r7
 800cb4c:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800cb50:	42a3      	cmp	r3, r4
 800cb52:	da52      	bge.n	800cbfa <__gethex+0x27c>
 800cb54:	4629      	mov	r1, r5
 800cb56:	9802      	ldr	r0, [sp, #8]
 800cb58:	f000 fa4f 	bl	800cffa <_Bfree>
 800cb5c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800cb5e:	2300      	movs	r3, #0
 800cb60:	6013      	str	r3, [r2, #0]
 800cb62:	27a3      	movs	r7, #163	; 0xa3
 800cb64:	e793      	b.n	800ca8e <__gethex+0x110>
 800cb66:	3101      	adds	r1, #1
 800cb68:	105b      	asrs	r3, r3, #1
 800cb6a:	e7b0      	b.n	800cace <__gethex+0x150>
 800cb6c:	1e73      	subs	r3, r6, #1
 800cb6e:	9305      	str	r3, [sp, #20]
 800cb70:	9a07      	ldr	r2, [sp, #28]
 800cb72:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800cb76:	4293      	cmp	r3, r2
 800cb78:	d018      	beq.n	800cbac <__gethex+0x22e>
 800cb7a:	f1bb 0f20 	cmp.w	fp, #32
 800cb7e:	d107      	bne.n	800cb90 <__gethex+0x212>
 800cb80:	9b04      	ldr	r3, [sp, #16]
 800cb82:	f8c3 a000 	str.w	sl, [r3]
 800cb86:	3304      	adds	r3, #4
 800cb88:	f04f 0a00 	mov.w	sl, #0
 800cb8c:	9304      	str	r3, [sp, #16]
 800cb8e:	46d3      	mov	fp, sl
 800cb90:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800cb94:	f7ff fede 	bl	800c954 <__hexdig_fun>
 800cb98:	f000 000f 	and.w	r0, r0, #15
 800cb9c:	fa00 f00b 	lsl.w	r0, r0, fp
 800cba0:	ea4a 0a00 	orr.w	sl, sl, r0
 800cba4:	f10b 0b04 	add.w	fp, fp, #4
 800cba8:	9b05      	ldr	r3, [sp, #20]
 800cbaa:	e00d      	b.n	800cbc8 <__gethex+0x24a>
 800cbac:	9b05      	ldr	r3, [sp, #20]
 800cbae:	9a08      	ldr	r2, [sp, #32]
 800cbb0:	4413      	add	r3, r2
 800cbb2:	42bb      	cmp	r3, r7
 800cbb4:	d3e1      	bcc.n	800cb7a <__gethex+0x1fc>
 800cbb6:	4618      	mov	r0, r3
 800cbb8:	9a01      	ldr	r2, [sp, #4]
 800cbba:	9903      	ldr	r1, [sp, #12]
 800cbbc:	9309      	str	r3, [sp, #36]	; 0x24
 800cbbe:	f000 ff47 	bl	800da50 <strncmp>
 800cbc2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cbc4:	2800      	cmp	r0, #0
 800cbc6:	d1d8      	bne.n	800cb7a <__gethex+0x1fc>
 800cbc8:	461e      	mov	r6, r3
 800cbca:	e791      	b.n	800caf0 <__gethex+0x172>
 800cbcc:	1eb9      	subs	r1, r7, #2
 800cbce:	4628      	mov	r0, r5
 800cbd0:	f000 fdbc 	bl	800d74c <__any_on>
 800cbd4:	2800      	cmp	r0, #0
 800cbd6:	d0b2      	beq.n	800cb3e <__gethex+0x1c0>
 800cbd8:	f04f 0a03 	mov.w	sl, #3
 800cbdc:	e7b1      	b.n	800cb42 <__gethex+0x1c4>
 800cbde:	da09      	bge.n	800cbf4 <__gethex+0x276>
 800cbe0:	1bf7      	subs	r7, r6, r7
 800cbe2:	4629      	mov	r1, r5
 800cbe4:	463a      	mov	r2, r7
 800cbe6:	9802      	ldr	r0, [sp, #8]
 800cbe8:	f000 fbd2 	bl	800d390 <__lshift>
 800cbec:	1be4      	subs	r4, r4, r7
 800cbee:	4605      	mov	r5, r0
 800cbf0:	f100 0914 	add.w	r9, r0, #20
 800cbf4:	f04f 0a00 	mov.w	sl, #0
 800cbf8:	e7a8      	b.n	800cb4c <__gethex+0x1ce>
 800cbfa:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800cbfe:	42a0      	cmp	r0, r4
 800cc00:	dd6a      	ble.n	800ccd8 <__gethex+0x35a>
 800cc02:	1b04      	subs	r4, r0, r4
 800cc04:	42a6      	cmp	r6, r4
 800cc06:	dc2e      	bgt.n	800cc66 <__gethex+0x2e8>
 800cc08:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800cc0c:	2b02      	cmp	r3, #2
 800cc0e:	d022      	beq.n	800cc56 <__gethex+0x2d8>
 800cc10:	2b03      	cmp	r3, #3
 800cc12:	d024      	beq.n	800cc5e <__gethex+0x2e0>
 800cc14:	2b01      	cmp	r3, #1
 800cc16:	d115      	bne.n	800cc44 <__gethex+0x2c6>
 800cc18:	42a6      	cmp	r6, r4
 800cc1a:	d113      	bne.n	800cc44 <__gethex+0x2c6>
 800cc1c:	2e01      	cmp	r6, #1
 800cc1e:	dc0b      	bgt.n	800cc38 <__gethex+0x2ba>
 800cc20:	9a06      	ldr	r2, [sp, #24]
 800cc22:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800cc26:	6013      	str	r3, [r2, #0]
 800cc28:	2301      	movs	r3, #1
 800cc2a:	612b      	str	r3, [r5, #16]
 800cc2c:	f8c9 3000 	str.w	r3, [r9]
 800cc30:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800cc32:	2762      	movs	r7, #98	; 0x62
 800cc34:	601d      	str	r5, [r3, #0]
 800cc36:	e72a      	b.n	800ca8e <__gethex+0x110>
 800cc38:	1e71      	subs	r1, r6, #1
 800cc3a:	4628      	mov	r0, r5
 800cc3c:	f000 fd86 	bl	800d74c <__any_on>
 800cc40:	2800      	cmp	r0, #0
 800cc42:	d1ed      	bne.n	800cc20 <__gethex+0x2a2>
 800cc44:	4629      	mov	r1, r5
 800cc46:	9802      	ldr	r0, [sp, #8]
 800cc48:	f000 f9d7 	bl	800cffa <_Bfree>
 800cc4c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800cc4e:	2300      	movs	r3, #0
 800cc50:	6013      	str	r3, [r2, #0]
 800cc52:	2750      	movs	r7, #80	; 0x50
 800cc54:	e71b      	b.n	800ca8e <__gethex+0x110>
 800cc56:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800cc58:	2b00      	cmp	r3, #0
 800cc5a:	d0e1      	beq.n	800cc20 <__gethex+0x2a2>
 800cc5c:	e7f2      	b.n	800cc44 <__gethex+0x2c6>
 800cc5e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800cc60:	2b00      	cmp	r3, #0
 800cc62:	d1dd      	bne.n	800cc20 <__gethex+0x2a2>
 800cc64:	e7ee      	b.n	800cc44 <__gethex+0x2c6>
 800cc66:	1e67      	subs	r7, r4, #1
 800cc68:	f1ba 0f00 	cmp.w	sl, #0
 800cc6c:	d131      	bne.n	800ccd2 <__gethex+0x354>
 800cc6e:	b127      	cbz	r7, 800cc7a <__gethex+0x2fc>
 800cc70:	4639      	mov	r1, r7
 800cc72:	4628      	mov	r0, r5
 800cc74:	f000 fd6a 	bl	800d74c <__any_on>
 800cc78:	4682      	mov	sl, r0
 800cc7a:	117a      	asrs	r2, r7, #5
 800cc7c:	2301      	movs	r3, #1
 800cc7e:	f007 071f 	and.w	r7, r7, #31
 800cc82:	fa03 f707 	lsl.w	r7, r3, r7
 800cc86:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 800cc8a:	4621      	mov	r1, r4
 800cc8c:	421f      	tst	r7, r3
 800cc8e:	4628      	mov	r0, r5
 800cc90:	bf18      	it	ne
 800cc92:	f04a 0a02 	orrne.w	sl, sl, #2
 800cc96:	1b36      	subs	r6, r6, r4
 800cc98:	f7ff fe22 	bl	800c8e0 <rshift>
 800cc9c:	f8d8 4004 	ldr.w	r4, [r8, #4]
 800cca0:	2702      	movs	r7, #2
 800cca2:	f1ba 0f00 	cmp.w	sl, #0
 800cca6:	d048      	beq.n	800cd3a <__gethex+0x3bc>
 800cca8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800ccac:	2b02      	cmp	r3, #2
 800ccae:	d015      	beq.n	800ccdc <__gethex+0x35e>
 800ccb0:	2b03      	cmp	r3, #3
 800ccb2:	d017      	beq.n	800cce4 <__gethex+0x366>
 800ccb4:	2b01      	cmp	r3, #1
 800ccb6:	d109      	bne.n	800cccc <__gethex+0x34e>
 800ccb8:	f01a 0f02 	tst.w	sl, #2
 800ccbc:	d006      	beq.n	800cccc <__gethex+0x34e>
 800ccbe:	f8d9 3000 	ldr.w	r3, [r9]
 800ccc2:	ea4a 0a03 	orr.w	sl, sl, r3
 800ccc6:	f01a 0f01 	tst.w	sl, #1
 800ccca:	d10e      	bne.n	800ccea <__gethex+0x36c>
 800cccc:	f047 0710 	orr.w	r7, r7, #16
 800ccd0:	e033      	b.n	800cd3a <__gethex+0x3bc>
 800ccd2:	f04f 0a01 	mov.w	sl, #1
 800ccd6:	e7d0      	b.n	800cc7a <__gethex+0x2fc>
 800ccd8:	2701      	movs	r7, #1
 800ccda:	e7e2      	b.n	800cca2 <__gethex+0x324>
 800ccdc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ccde:	f1c3 0301 	rsb	r3, r3, #1
 800cce2:	9315      	str	r3, [sp, #84]	; 0x54
 800cce4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800cce6:	2b00      	cmp	r3, #0
 800cce8:	d0f0      	beq.n	800cccc <__gethex+0x34e>
 800ccea:	f8d5 9010 	ldr.w	r9, [r5, #16]
 800ccee:	f105 0314 	add.w	r3, r5, #20
 800ccf2:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 800ccf6:	eb03 010a 	add.w	r1, r3, sl
 800ccfa:	f04f 0c00 	mov.w	ip, #0
 800ccfe:	4618      	mov	r0, r3
 800cd00:	f853 2b04 	ldr.w	r2, [r3], #4
 800cd04:	f1b2 3fff 	cmp.w	r2, #4294967295
 800cd08:	d01c      	beq.n	800cd44 <__gethex+0x3c6>
 800cd0a:	3201      	adds	r2, #1
 800cd0c:	6002      	str	r2, [r0, #0]
 800cd0e:	2f02      	cmp	r7, #2
 800cd10:	f105 0314 	add.w	r3, r5, #20
 800cd14:	d138      	bne.n	800cd88 <__gethex+0x40a>
 800cd16:	f8d8 2000 	ldr.w	r2, [r8]
 800cd1a:	3a01      	subs	r2, #1
 800cd1c:	42b2      	cmp	r2, r6
 800cd1e:	d10a      	bne.n	800cd36 <__gethex+0x3b8>
 800cd20:	1171      	asrs	r1, r6, #5
 800cd22:	2201      	movs	r2, #1
 800cd24:	f006 061f 	and.w	r6, r6, #31
 800cd28:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800cd2c:	fa02 f606 	lsl.w	r6, r2, r6
 800cd30:	421e      	tst	r6, r3
 800cd32:	bf18      	it	ne
 800cd34:	4617      	movne	r7, r2
 800cd36:	f047 0720 	orr.w	r7, r7, #32
 800cd3a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800cd3c:	601d      	str	r5, [r3, #0]
 800cd3e:	9b06      	ldr	r3, [sp, #24]
 800cd40:	601c      	str	r4, [r3, #0]
 800cd42:	e6a4      	b.n	800ca8e <__gethex+0x110>
 800cd44:	4299      	cmp	r1, r3
 800cd46:	f843 cc04 	str.w	ip, [r3, #-4]
 800cd4a:	d8d8      	bhi.n	800ccfe <__gethex+0x380>
 800cd4c:	68ab      	ldr	r3, [r5, #8]
 800cd4e:	4599      	cmp	r9, r3
 800cd50:	db12      	blt.n	800cd78 <__gethex+0x3fa>
 800cd52:	6869      	ldr	r1, [r5, #4]
 800cd54:	9802      	ldr	r0, [sp, #8]
 800cd56:	3101      	adds	r1, #1
 800cd58:	f000 f91b 	bl	800cf92 <_Balloc>
 800cd5c:	692a      	ldr	r2, [r5, #16]
 800cd5e:	3202      	adds	r2, #2
 800cd60:	f105 010c 	add.w	r1, r5, #12
 800cd64:	4683      	mov	fp, r0
 800cd66:	0092      	lsls	r2, r2, #2
 800cd68:	300c      	adds	r0, #12
 800cd6a:	f000 f905 	bl	800cf78 <memcpy>
 800cd6e:	4629      	mov	r1, r5
 800cd70:	9802      	ldr	r0, [sp, #8]
 800cd72:	f000 f942 	bl	800cffa <_Bfree>
 800cd76:	465d      	mov	r5, fp
 800cd78:	692b      	ldr	r3, [r5, #16]
 800cd7a:	1c5a      	adds	r2, r3, #1
 800cd7c:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800cd80:	612a      	str	r2, [r5, #16]
 800cd82:	2201      	movs	r2, #1
 800cd84:	615a      	str	r2, [r3, #20]
 800cd86:	e7c2      	b.n	800cd0e <__gethex+0x390>
 800cd88:	692a      	ldr	r2, [r5, #16]
 800cd8a:	454a      	cmp	r2, r9
 800cd8c:	dd0b      	ble.n	800cda6 <__gethex+0x428>
 800cd8e:	2101      	movs	r1, #1
 800cd90:	4628      	mov	r0, r5
 800cd92:	f7ff fda5 	bl	800c8e0 <rshift>
 800cd96:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800cd9a:	3401      	adds	r4, #1
 800cd9c:	42a3      	cmp	r3, r4
 800cd9e:	f6ff aed9 	blt.w	800cb54 <__gethex+0x1d6>
 800cda2:	2701      	movs	r7, #1
 800cda4:	e7c7      	b.n	800cd36 <__gethex+0x3b8>
 800cda6:	f016 061f 	ands.w	r6, r6, #31
 800cdaa:	d0fa      	beq.n	800cda2 <__gethex+0x424>
 800cdac:	449a      	add	sl, r3
 800cdae:	f1c6 0620 	rsb	r6, r6, #32
 800cdb2:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800cdb6:	f000 f9b0 	bl	800d11a <__hi0bits>
 800cdba:	42b0      	cmp	r0, r6
 800cdbc:	dbe7      	blt.n	800cd8e <__gethex+0x410>
 800cdbe:	e7f0      	b.n	800cda2 <__gethex+0x424>

0800cdc0 <L_shift>:
 800cdc0:	f1c2 0208 	rsb	r2, r2, #8
 800cdc4:	0092      	lsls	r2, r2, #2
 800cdc6:	b570      	push	{r4, r5, r6, lr}
 800cdc8:	f1c2 0620 	rsb	r6, r2, #32
 800cdcc:	6843      	ldr	r3, [r0, #4]
 800cdce:	6804      	ldr	r4, [r0, #0]
 800cdd0:	fa03 f506 	lsl.w	r5, r3, r6
 800cdd4:	432c      	orrs	r4, r5
 800cdd6:	40d3      	lsrs	r3, r2
 800cdd8:	6004      	str	r4, [r0, #0]
 800cdda:	f840 3f04 	str.w	r3, [r0, #4]!
 800cdde:	4288      	cmp	r0, r1
 800cde0:	d3f4      	bcc.n	800cdcc <L_shift+0xc>
 800cde2:	bd70      	pop	{r4, r5, r6, pc}

0800cde4 <__match>:
 800cde4:	b530      	push	{r4, r5, lr}
 800cde6:	6803      	ldr	r3, [r0, #0]
 800cde8:	3301      	adds	r3, #1
 800cdea:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cdee:	b914      	cbnz	r4, 800cdf6 <__match+0x12>
 800cdf0:	6003      	str	r3, [r0, #0]
 800cdf2:	2001      	movs	r0, #1
 800cdf4:	bd30      	pop	{r4, r5, pc}
 800cdf6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cdfa:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800cdfe:	2d19      	cmp	r5, #25
 800ce00:	bf98      	it	ls
 800ce02:	3220      	addls	r2, #32
 800ce04:	42a2      	cmp	r2, r4
 800ce06:	d0f0      	beq.n	800cdea <__match+0x6>
 800ce08:	2000      	movs	r0, #0
 800ce0a:	e7f3      	b.n	800cdf4 <__match+0x10>

0800ce0c <__hexnan>:
 800ce0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce10:	680b      	ldr	r3, [r1, #0]
 800ce12:	6801      	ldr	r1, [r0, #0]
 800ce14:	115f      	asrs	r7, r3, #5
 800ce16:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 800ce1a:	f013 031f 	ands.w	r3, r3, #31
 800ce1e:	b087      	sub	sp, #28
 800ce20:	bf18      	it	ne
 800ce22:	3704      	addne	r7, #4
 800ce24:	2500      	movs	r5, #0
 800ce26:	1f3e      	subs	r6, r7, #4
 800ce28:	4682      	mov	sl, r0
 800ce2a:	4690      	mov	r8, r2
 800ce2c:	9301      	str	r3, [sp, #4]
 800ce2e:	f847 5c04 	str.w	r5, [r7, #-4]
 800ce32:	46b1      	mov	r9, r6
 800ce34:	4634      	mov	r4, r6
 800ce36:	9502      	str	r5, [sp, #8]
 800ce38:	46ab      	mov	fp, r5
 800ce3a:	784a      	ldrb	r2, [r1, #1]
 800ce3c:	1c4b      	adds	r3, r1, #1
 800ce3e:	9303      	str	r3, [sp, #12]
 800ce40:	b342      	cbz	r2, 800ce94 <__hexnan+0x88>
 800ce42:	4610      	mov	r0, r2
 800ce44:	9105      	str	r1, [sp, #20]
 800ce46:	9204      	str	r2, [sp, #16]
 800ce48:	f7ff fd84 	bl	800c954 <__hexdig_fun>
 800ce4c:	2800      	cmp	r0, #0
 800ce4e:	d143      	bne.n	800ced8 <__hexnan+0xcc>
 800ce50:	9a04      	ldr	r2, [sp, #16]
 800ce52:	9905      	ldr	r1, [sp, #20]
 800ce54:	2a20      	cmp	r2, #32
 800ce56:	d818      	bhi.n	800ce8a <__hexnan+0x7e>
 800ce58:	9b02      	ldr	r3, [sp, #8]
 800ce5a:	459b      	cmp	fp, r3
 800ce5c:	dd13      	ble.n	800ce86 <__hexnan+0x7a>
 800ce5e:	454c      	cmp	r4, r9
 800ce60:	d206      	bcs.n	800ce70 <__hexnan+0x64>
 800ce62:	2d07      	cmp	r5, #7
 800ce64:	dc04      	bgt.n	800ce70 <__hexnan+0x64>
 800ce66:	462a      	mov	r2, r5
 800ce68:	4649      	mov	r1, r9
 800ce6a:	4620      	mov	r0, r4
 800ce6c:	f7ff ffa8 	bl	800cdc0 <L_shift>
 800ce70:	4544      	cmp	r4, r8
 800ce72:	d944      	bls.n	800cefe <__hexnan+0xf2>
 800ce74:	2300      	movs	r3, #0
 800ce76:	f1a4 0904 	sub.w	r9, r4, #4
 800ce7a:	f844 3c04 	str.w	r3, [r4, #-4]
 800ce7e:	f8cd b008 	str.w	fp, [sp, #8]
 800ce82:	464c      	mov	r4, r9
 800ce84:	461d      	mov	r5, r3
 800ce86:	9903      	ldr	r1, [sp, #12]
 800ce88:	e7d7      	b.n	800ce3a <__hexnan+0x2e>
 800ce8a:	2a29      	cmp	r2, #41	; 0x29
 800ce8c:	d14a      	bne.n	800cf24 <__hexnan+0x118>
 800ce8e:	3102      	adds	r1, #2
 800ce90:	f8ca 1000 	str.w	r1, [sl]
 800ce94:	f1bb 0f00 	cmp.w	fp, #0
 800ce98:	d044      	beq.n	800cf24 <__hexnan+0x118>
 800ce9a:	454c      	cmp	r4, r9
 800ce9c:	d206      	bcs.n	800ceac <__hexnan+0xa0>
 800ce9e:	2d07      	cmp	r5, #7
 800cea0:	dc04      	bgt.n	800ceac <__hexnan+0xa0>
 800cea2:	462a      	mov	r2, r5
 800cea4:	4649      	mov	r1, r9
 800cea6:	4620      	mov	r0, r4
 800cea8:	f7ff ff8a 	bl	800cdc0 <L_shift>
 800ceac:	4544      	cmp	r4, r8
 800ceae:	d928      	bls.n	800cf02 <__hexnan+0xf6>
 800ceb0:	4643      	mov	r3, r8
 800ceb2:	f854 2b04 	ldr.w	r2, [r4], #4
 800ceb6:	f843 2b04 	str.w	r2, [r3], #4
 800ceba:	42a6      	cmp	r6, r4
 800cebc:	d2f9      	bcs.n	800ceb2 <__hexnan+0xa6>
 800cebe:	2200      	movs	r2, #0
 800cec0:	f843 2b04 	str.w	r2, [r3], #4
 800cec4:	429e      	cmp	r6, r3
 800cec6:	d2fb      	bcs.n	800cec0 <__hexnan+0xb4>
 800cec8:	6833      	ldr	r3, [r6, #0]
 800ceca:	b91b      	cbnz	r3, 800ced4 <__hexnan+0xc8>
 800cecc:	4546      	cmp	r6, r8
 800cece:	d127      	bne.n	800cf20 <__hexnan+0x114>
 800ced0:	2301      	movs	r3, #1
 800ced2:	6033      	str	r3, [r6, #0]
 800ced4:	2005      	movs	r0, #5
 800ced6:	e026      	b.n	800cf26 <__hexnan+0x11a>
 800ced8:	3501      	adds	r5, #1
 800ceda:	2d08      	cmp	r5, #8
 800cedc:	f10b 0b01 	add.w	fp, fp, #1
 800cee0:	dd06      	ble.n	800cef0 <__hexnan+0xe4>
 800cee2:	4544      	cmp	r4, r8
 800cee4:	d9cf      	bls.n	800ce86 <__hexnan+0x7a>
 800cee6:	2300      	movs	r3, #0
 800cee8:	f844 3c04 	str.w	r3, [r4, #-4]
 800ceec:	2501      	movs	r5, #1
 800ceee:	3c04      	subs	r4, #4
 800cef0:	6822      	ldr	r2, [r4, #0]
 800cef2:	f000 000f 	and.w	r0, r0, #15
 800cef6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800cefa:	6020      	str	r0, [r4, #0]
 800cefc:	e7c3      	b.n	800ce86 <__hexnan+0x7a>
 800cefe:	2508      	movs	r5, #8
 800cf00:	e7c1      	b.n	800ce86 <__hexnan+0x7a>
 800cf02:	9b01      	ldr	r3, [sp, #4]
 800cf04:	2b00      	cmp	r3, #0
 800cf06:	d0df      	beq.n	800cec8 <__hexnan+0xbc>
 800cf08:	f04f 32ff 	mov.w	r2, #4294967295
 800cf0c:	f1c3 0320 	rsb	r3, r3, #32
 800cf10:	fa22 f303 	lsr.w	r3, r2, r3
 800cf14:	f857 2c04 	ldr.w	r2, [r7, #-4]
 800cf18:	401a      	ands	r2, r3
 800cf1a:	f847 2c04 	str.w	r2, [r7, #-4]
 800cf1e:	e7d3      	b.n	800cec8 <__hexnan+0xbc>
 800cf20:	3e04      	subs	r6, #4
 800cf22:	e7d1      	b.n	800cec8 <__hexnan+0xbc>
 800cf24:	2004      	movs	r0, #4
 800cf26:	b007      	add	sp, #28
 800cf28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800cf2c <__locale_ctype_ptr_l>:
 800cf2c:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 800cf30:	4770      	bx	lr

0800cf32 <__localeconv_l>:
 800cf32:	30f0      	adds	r0, #240	; 0xf0
 800cf34:	4770      	bx	lr
	...

0800cf38 <_localeconv_r>:
 800cf38:	4b04      	ldr	r3, [pc, #16]	; (800cf4c <_localeconv_r+0x14>)
 800cf3a:	681b      	ldr	r3, [r3, #0]
 800cf3c:	6a18      	ldr	r0, [r3, #32]
 800cf3e:	4b04      	ldr	r3, [pc, #16]	; (800cf50 <_localeconv_r+0x18>)
 800cf40:	2800      	cmp	r0, #0
 800cf42:	bf08      	it	eq
 800cf44:	4618      	moveq	r0, r3
 800cf46:	30f0      	adds	r0, #240	; 0xf0
 800cf48:	4770      	bx	lr
 800cf4a:	bf00      	nop
 800cf4c:	200001a0 	.word	0x200001a0
 800cf50:	20000204 	.word	0x20000204

0800cf54 <__ascii_mbtowc>:
 800cf54:	b082      	sub	sp, #8
 800cf56:	b901      	cbnz	r1, 800cf5a <__ascii_mbtowc+0x6>
 800cf58:	a901      	add	r1, sp, #4
 800cf5a:	b142      	cbz	r2, 800cf6e <__ascii_mbtowc+0x1a>
 800cf5c:	b14b      	cbz	r3, 800cf72 <__ascii_mbtowc+0x1e>
 800cf5e:	7813      	ldrb	r3, [r2, #0]
 800cf60:	600b      	str	r3, [r1, #0]
 800cf62:	7812      	ldrb	r2, [r2, #0]
 800cf64:	1c10      	adds	r0, r2, #0
 800cf66:	bf18      	it	ne
 800cf68:	2001      	movne	r0, #1
 800cf6a:	b002      	add	sp, #8
 800cf6c:	4770      	bx	lr
 800cf6e:	4610      	mov	r0, r2
 800cf70:	e7fb      	b.n	800cf6a <__ascii_mbtowc+0x16>
 800cf72:	f06f 0001 	mvn.w	r0, #1
 800cf76:	e7f8      	b.n	800cf6a <__ascii_mbtowc+0x16>

0800cf78 <memcpy>:
 800cf78:	b510      	push	{r4, lr}
 800cf7a:	1e43      	subs	r3, r0, #1
 800cf7c:	440a      	add	r2, r1
 800cf7e:	4291      	cmp	r1, r2
 800cf80:	d100      	bne.n	800cf84 <memcpy+0xc>
 800cf82:	bd10      	pop	{r4, pc}
 800cf84:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cf88:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cf8c:	e7f7      	b.n	800cf7e <memcpy+0x6>

0800cf8e <__malloc_lock>:
 800cf8e:	4770      	bx	lr

0800cf90 <__malloc_unlock>:
 800cf90:	4770      	bx	lr

0800cf92 <_Balloc>:
 800cf92:	b570      	push	{r4, r5, r6, lr}
 800cf94:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800cf96:	4604      	mov	r4, r0
 800cf98:	460e      	mov	r6, r1
 800cf9a:	b93d      	cbnz	r5, 800cfac <_Balloc+0x1a>
 800cf9c:	2010      	movs	r0, #16
 800cf9e:	f7fd f857 	bl	800a050 <malloc>
 800cfa2:	6260      	str	r0, [r4, #36]	; 0x24
 800cfa4:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800cfa8:	6005      	str	r5, [r0, #0]
 800cfaa:	60c5      	str	r5, [r0, #12]
 800cfac:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800cfae:	68eb      	ldr	r3, [r5, #12]
 800cfb0:	b183      	cbz	r3, 800cfd4 <_Balloc+0x42>
 800cfb2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cfb4:	68db      	ldr	r3, [r3, #12]
 800cfb6:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800cfba:	b9b8      	cbnz	r0, 800cfec <_Balloc+0x5a>
 800cfbc:	2101      	movs	r1, #1
 800cfbe:	fa01 f506 	lsl.w	r5, r1, r6
 800cfc2:	1d6a      	adds	r2, r5, #5
 800cfc4:	0092      	lsls	r2, r2, #2
 800cfc6:	4620      	mov	r0, r4
 800cfc8:	f000 fbe1 	bl	800d78e <_calloc_r>
 800cfcc:	b160      	cbz	r0, 800cfe8 <_Balloc+0x56>
 800cfce:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800cfd2:	e00e      	b.n	800cff2 <_Balloc+0x60>
 800cfd4:	2221      	movs	r2, #33	; 0x21
 800cfd6:	2104      	movs	r1, #4
 800cfd8:	4620      	mov	r0, r4
 800cfda:	f000 fbd8 	bl	800d78e <_calloc_r>
 800cfde:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cfe0:	60e8      	str	r0, [r5, #12]
 800cfe2:	68db      	ldr	r3, [r3, #12]
 800cfe4:	2b00      	cmp	r3, #0
 800cfe6:	d1e4      	bne.n	800cfb2 <_Balloc+0x20>
 800cfe8:	2000      	movs	r0, #0
 800cfea:	bd70      	pop	{r4, r5, r6, pc}
 800cfec:	6802      	ldr	r2, [r0, #0]
 800cfee:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800cff2:	2300      	movs	r3, #0
 800cff4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800cff8:	e7f7      	b.n	800cfea <_Balloc+0x58>

0800cffa <_Bfree>:
 800cffa:	b570      	push	{r4, r5, r6, lr}
 800cffc:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800cffe:	4606      	mov	r6, r0
 800d000:	460d      	mov	r5, r1
 800d002:	b93c      	cbnz	r4, 800d014 <_Bfree+0x1a>
 800d004:	2010      	movs	r0, #16
 800d006:	f7fd f823 	bl	800a050 <malloc>
 800d00a:	6270      	str	r0, [r6, #36]	; 0x24
 800d00c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d010:	6004      	str	r4, [r0, #0]
 800d012:	60c4      	str	r4, [r0, #12]
 800d014:	b13d      	cbz	r5, 800d026 <_Bfree+0x2c>
 800d016:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800d018:	686a      	ldr	r2, [r5, #4]
 800d01a:	68db      	ldr	r3, [r3, #12]
 800d01c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d020:	6029      	str	r1, [r5, #0]
 800d022:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800d026:	bd70      	pop	{r4, r5, r6, pc}

0800d028 <__multadd>:
 800d028:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d02c:	690d      	ldr	r5, [r1, #16]
 800d02e:	461f      	mov	r7, r3
 800d030:	4606      	mov	r6, r0
 800d032:	460c      	mov	r4, r1
 800d034:	f101 0c14 	add.w	ip, r1, #20
 800d038:	2300      	movs	r3, #0
 800d03a:	f8dc 0000 	ldr.w	r0, [ip]
 800d03e:	b281      	uxth	r1, r0
 800d040:	fb02 7101 	mla	r1, r2, r1, r7
 800d044:	0c0f      	lsrs	r7, r1, #16
 800d046:	0c00      	lsrs	r0, r0, #16
 800d048:	fb02 7000 	mla	r0, r2, r0, r7
 800d04c:	b289      	uxth	r1, r1
 800d04e:	3301      	adds	r3, #1
 800d050:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800d054:	429d      	cmp	r5, r3
 800d056:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800d05a:	f84c 1b04 	str.w	r1, [ip], #4
 800d05e:	dcec      	bgt.n	800d03a <__multadd+0x12>
 800d060:	b1d7      	cbz	r7, 800d098 <__multadd+0x70>
 800d062:	68a3      	ldr	r3, [r4, #8]
 800d064:	42ab      	cmp	r3, r5
 800d066:	dc12      	bgt.n	800d08e <__multadd+0x66>
 800d068:	6861      	ldr	r1, [r4, #4]
 800d06a:	4630      	mov	r0, r6
 800d06c:	3101      	adds	r1, #1
 800d06e:	f7ff ff90 	bl	800cf92 <_Balloc>
 800d072:	6922      	ldr	r2, [r4, #16]
 800d074:	3202      	adds	r2, #2
 800d076:	f104 010c 	add.w	r1, r4, #12
 800d07a:	4680      	mov	r8, r0
 800d07c:	0092      	lsls	r2, r2, #2
 800d07e:	300c      	adds	r0, #12
 800d080:	f7ff ff7a 	bl	800cf78 <memcpy>
 800d084:	4621      	mov	r1, r4
 800d086:	4630      	mov	r0, r6
 800d088:	f7ff ffb7 	bl	800cffa <_Bfree>
 800d08c:	4644      	mov	r4, r8
 800d08e:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800d092:	3501      	adds	r5, #1
 800d094:	615f      	str	r7, [r3, #20]
 800d096:	6125      	str	r5, [r4, #16]
 800d098:	4620      	mov	r0, r4
 800d09a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800d09e <__s2b>:
 800d09e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d0a2:	460c      	mov	r4, r1
 800d0a4:	4615      	mov	r5, r2
 800d0a6:	461f      	mov	r7, r3
 800d0a8:	2209      	movs	r2, #9
 800d0aa:	3308      	adds	r3, #8
 800d0ac:	4606      	mov	r6, r0
 800d0ae:	fb93 f3f2 	sdiv	r3, r3, r2
 800d0b2:	2100      	movs	r1, #0
 800d0b4:	2201      	movs	r2, #1
 800d0b6:	429a      	cmp	r2, r3
 800d0b8:	db20      	blt.n	800d0fc <__s2b+0x5e>
 800d0ba:	4630      	mov	r0, r6
 800d0bc:	f7ff ff69 	bl	800cf92 <_Balloc>
 800d0c0:	9b08      	ldr	r3, [sp, #32]
 800d0c2:	6143      	str	r3, [r0, #20]
 800d0c4:	2d09      	cmp	r5, #9
 800d0c6:	f04f 0301 	mov.w	r3, #1
 800d0ca:	6103      	str	r3, [r0, #16]
 800d0cc:	dd19      	ble.n	800d102 <__s2b+0x64>
 800d0ce:	f104 0809 	add.w	r8, r4, #9
 800d0d2:	46c1      	mov	r9, r8
 800d0d4:	442c      	add	r4, r5
 800d0d6:	f819 3b01 	ldrb.w	r3, [r9], #1
 800d0da:	4601      	mov	r1, r0
 800d0dc:	3b30      	subs	r3, #48	; 0x30
 800d0de:	220a      	movs	r2, #10
 800d0e0:	4630      	mov	r0, r6
 800d0e2:	f7ff ffa1 	bl	800d028 <__multadd>
 800d0e6:	45a1      	cmp	r9, r4
 800d0e8:	d1f5      	bne.n	800d0d6 <__s2b+0x38>
 800d0ea:	eb08 0405 	add.w	r4, r8, r5
 800d0ee:	3c08      	subs	r4, #8
 800d0f0:	1b2d      	subs	r5, r5, r4
 800d0f2:	1963      	adds	r3, r4, r5
 800d0f4:	42bb      	cmp	r3, r7
 800d0f6:	db07      	blt.n	800d108 <__s2b+0x6a>
 800d0f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d0fc:	0052      	lsls	r2, r2, #1
 800d0fe:	3101      	adds	r1, #1
 800d100:	e7d9      	b.n	800d0b6 <__s2b+0x18>
 800d102:	340a      	adds	r4, #10
 800d104:	2509      	movs	r5, #9
 800d106:	e7f3      	b.n	800d0f0 <__s2b+0x52>
 800d108:	f814 3b01 	ldrb.w	r3, [r4], #1
 800d10c:	4601      	mov	r1, r0
 800d10e:	3b30      	subs	r3, #48	; 0x30
 800d110:	220a      	movs	r2, #10
 800d112:	4630      	mov	r0, r6
 800d114:	f7ff ff88 	bl	800d028 <__multadd>
 800d118:	e7eb      	b.n	800d0f2 <__s2b+0x54>

0800d11a <__hi0bits>:
 800d11a:	0c02      	lsrs	r2, r0, #16
 800d11c:	0412      	lsls	r2, r2, #16
 800d11e:	4603      	mov	r3, r0
 800d120:	b9b2      	cbnz	r2, 800d150 <__hi0bits+0x36>
 800d122:	0403      	lsls	r3, r0, #16
 800d124:	2010      	movs	r0, #16
 800d126:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800d12a:	bf04      	itt	eq
 800d12c:	021b      	lsleq	r3, r3, #8
 800d12e:	3008      	addeq	r0, #8
 800d130:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800d134:	bf04      	itt	eq
 800d136:	011b      	lsleq	r3, r3, #4
 800d138:	3004      	addeq	r0, #4
 800d13a:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800d13e:	bf04      	itt	eq
 800d140:	009b      	lsleq	r3, r3, #2
 800d142:	3002      	addeq	r0, #2
 800d144:	2b00      	cmp	r3, #0
 800d146:	db06      	blt.n	800d156 <__hi0bits+0x3c>
 800d148:	005b      	lsls	r3, r3, #1
 800d14a:	d503      	bpl.n	800d154 <__hi0bits+0x3a>
 800d14c:	3001      	adds	r0, #1
 800d14e:	4770      	bx	lr
 800d150:	2000      	movs	r0, #0
 800d152:	e7e8      	b.n	800d126 <__hi0bits+0xc>
 800d154:	2020      	movs	r0, #32
 800d156:	4770      	bx	lr

0800d158 <__lo0bits>:
 800d158:	6803      	ldr	r3, [r0, #0]
 800d15a:	f013 0207 	ands.w	r2, r3, #7
 800d15e:	4601      	mov	r1, r0
 800d160:	d00b      	beq.n	800d17a <__lo0bits+0x22>
 800d162:	07da      	lsls	r2, r3, #31
 800d164:	d423      	bmi.n	800d1ae <__lo0bits+0x56>
 800d166:	0798      	lsls	r0, r3, #30
 800d168:	bf49      	itett	mi
 800d16a:	085b      	lsrmi	r3, r3, #1
 800d16c:	089b      	lsrpl	r3, r3, #2
 800d16e:	2001      	movmi	r0, #1
 800d170:	600b      	strmi	r3, [r1, #0]
 800d172:	bf5c      	itt	pl
 800d174:	600b      	strpl	r3, [r1, #0]
 800d176:	2002      	movpl	r0, #2
 800d178:	4770      	bx	lr
 800d17a:	b298      	uxth	r0, r3
 800d17c:	b9a8      	cbnz	r0, 800d1aa <__lo0bits+0x52>
 800d17e:	0c1b      	lsrs	r3, r3, #16
 800d180:	2010      	movs	r0, #16
 800d182:	f013 0fff 	tst.w	r3, #255	; 0xff
 800d186:	bf04      	itt	eq
 800d188:	0a1b      	lsreq	r3, r3, #8
 800d18a:	3008      	addeq	r0, #8
 800d18c:	071a      	lsls	r2, r3, #28
 800d18e:	bf04      	itt	eq
 800d190:	091b      	lsreq	r3, r3, #4
 800d192:	3004      	addeq	r0, #4
 800d194:	079a      	lsls	r2, r3, #30
 800d196:	bf04      	itt	eq
 800d198:	089b      	lsreq	r3, r3, #2
 800d19a:	3002      	addeq	r0, #2
 800d19c:	07da      	lsls	r2, r3, #31
 800d19e:	d402      	bmi.n	800d1a6 <__lo0bits+0x4e>
 800d1a0:	085b      	lsrs	r3, r3, #1
 800d1a2:	d006      	beq.n	800d1b2 <__lo0bits+0x5a>
 800d1a4:	3001      	adds	r0, #1
 800d1a6:	600b      	str	r3, [r1, #0]
 800d1a8:	4770      	bx	lr
 800d1aa:	4610      	mov	r0, r2
 800d1ac:	e7e9      	b.n	800d182 <__lo0bits+0x2a>
 800d1ae:	2000      	movs	r0, #0
 800d1b0:	4770      	bx	lr
 800d1b2:	2020      	movs	r0, #32
 800d1b4:	4770      	bx	lr

0800d1b6 <__i2b>:
 800d1b6:	b510      	push	{r4, lr}
 800d1b8:	460c      	mov	r4, r1
 800d1ba:	2101      	movs	r1, #1
 800d1bc:	f7ff fee9 	bl	800cf92 <_Balloc>
 800d1c0:	2201      	movs	r2, #1
 800d1c2:	6144      	str	r4, [r0, #20]
 800d1c4:	6102      	str	r2, [r0, #16]
 800d1c6:	bd10      	pop	{r4, pc}

0800d1c8 <__multiply>:
 800d1c8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d1cc:	4614      	mov	r4, r2
 800d1ce:	690a      	ldr	r2, [r1, #16]
 800d1d0:	6923      	ldr	r3, [r4, #16]
 800d1d2:	429a      	cmp	r2, r3
 800d1d4:	bfb8      	it	lt
 800d1d6:	460b      	movlt	r3, r1
 800d1d8:	4688      	mov	r8, r1
 800d1da:	bfbc      	itt	lt
 800d1dc:	46a0      	movlt	r8, r4
 800d1de:	461c      	movlt	r4, r3
 800d1e0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800d1e4:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800d1e8:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800d1ec:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800d1f0:	eb07 0609 	add.w	r6, r7, r9
 800d1f4:	42b3      	cmp	r3, r6
 800d1f6:	bfb8      	it	lt
 800d1f8:	3101      	addlt	r1, #1
 800d1fa:	f7ff feca 	bl	800cf92 <_Balloc>
 800d1fe:	f100 0514 	add.w	r5, r0, #20
 800d202:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800d206:	462b      	mov	r3, r5
 800d208:	2200      	movs	r2, #0
 800d20a:	4573      	cmp	r3, lr
 800d20c:	d316      	bcc.n	800d23c <__multiply+0x74>
 800d20e:	f104 0214 	add.w	r2, r4, #20
 800d212:	f108 0114 	add.w	r1, r8, #20
 800d216:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800d21a:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800d21e:	9300      	str	r3, [sp, #0]
 800d220:	9b00      	ldr	r3, [sp, #0]
 800d222:	9201      	str	r2, [sp, #4]
 800d224:	4293      	cmp	r3, r2
 800d226:	d80c      	bhi.n	800d242 <__multiply+0x7a>
 800d228:	2e00      	cmp	r6, #0
 800d22a:	dd03      	ble.n	800d234 <__multiply+0x6c>
 800d22c:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800d230:	2b00      	cmp	r3, #0
 800d232:	d05d      	beq.n	800d2f0 <__multiply+0x128>
 800d234:	6106      	str	r6, [r0, #16]
 800d236:	b003      	add	sp, #12
 800d238:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d23c:	f843 2b04 	str.w	r2, [r3], #4
 800d240:	e7e3      	b.n	800d20a <__multiply+0x42>
 800d242:	f8b2 b000 	ldrh.w	fp, [r2]
 800d246:	f1bb 0f00 	cmp.w	fp, #0
 800d24a:	d023      	beq.n	800d294 <__multiply+0xcc>
 800d24c:	4689      	mov	r9, r1
 800d24e:	46ac      	mov	ip, r5
 800d250:	f04f 0800 	mov.w	r8, #0
 800d254:	f859 4b04 	ldr.w	r4, [r9], #4
 800d258:	f8dc a000 	ldr.w	sl, [ip]
 800d25c:	b2a3      	uxth	r3, r4
 800d25e:	fa1f fa8a 	uxth.w	sl, sl
 800d262:	fb0b a303 	mla	r3, fp, r3, sl
 800d266:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800d26a:	f8dc 4000 	ldr.w	r4, [ip]
 800d26e:	4443      	add	r3, r8
 800d270:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800d274:	fb0b 840a 	mla	r4, fp, sl, r8
 800d278:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800d27c:	46e2      	mov	sl, ip
 800d27e:	b29b      	uxth	r3, r3
 800d280:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800d284:	454f      	cmp	r7, r9
 800d286:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800d28a:	f84a 3b04 	str.w	r3, [sl], #4
 800d28e:	d82b      	bhi.n	800d2e8 <__multiply+0x120>
 800d290:	f8cc 8004 	str.w	r8, [ip, #4]
 800d294:	9b01      	ldr	r3, [sp, #4]
 800d296:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800d29a:	3204      	adds	r2, #4
 800d29c:	f1ba 0f00 	cmp.w	sl, #0
 800d2a0:	d020      	beq.n	800d2e4 <__multiply+0x11c>
 800d2a2:	682b      	ldr	r3, [r5, #0]
 800d2a4:	4689      	mov	r9, r1
 800d2a6:	46a8      	mov	r8, r5
 800d2a8:	f04f 0b00 	mov.w	fp, #0
 800d2ac:	f8b9 c000 	ldrh.w	ip, [r9]
 800d2b0:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800d2b4:	fb0a 440c 	mla	r4, sl, ip, r4
 800d2b8:	445c      	add	r4, fp
 800d2ba:	46c4      	mov	ip, r8
 800d2bc:	b29b      	uxth	r3, r3
 800d2be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800d2c2:	f84c 3b04 	str.w	r3, [ip], #4
 800d2c6:	f859 3b04 	ldr.w	r3, [r9], #4
 800d2ca:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800d2ce:	0c1b      	lsrs	r3, r3, #16
 800d2d0:	fb0a b303 	mla	r3, sl, r3, fp
 800d2d4:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800d2d8:	454f      	cmp	r7, r9
 800d2da:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800d2de:	d805      	bhi.n	800d2ec <__multiply+0x124>
 800d2e0:	f8c8 3004 	str.w	r3, [r8, #4]
 800d2e4:	3504      	adds	r5, #4
 800d2e6:	e79b      	b.n	800d220 <__multiply+0x58>
 800d2e8:	46d4      	mov	ip, sl
 800d2ea:	e7b3      	b.n	800d254 <__multiply+0x8c>
 800d2ec:	46e0      	mov	r8, ip
 800d2ee:	e7dd      	b.n	800d2ac <__multiply+0xe4>
 800d2f0:	3e01      	subs	r6, #1
 800d2f2:	e799      	b.n	800d228 <__multiply+0x60>

0800d2f4 <__pow5mult>:
 800d2f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d2f8:	4615      	mov	r5, r2
 800d2fa:	f012 0203 	ands.w	r2, r2, #3
 800d2fe:	4606      	mov	r6, r0
 800d300:	460f      	mov	r7, r1
 800d302:	d007      	beq.n	800d314 <__pow5mult+0x20>
 800d304:	3a01      	subs	r2, #1
 800d306:	4c21      	ldr	r4, [pc, #132]	; (800d38c <__pow5mult+0x98>)
 800d308:	2300      	movs	r3, #0
 800d30a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d30e:	f7ff fe8b 	bl	800d028 <__multadd>
 800d312:	4607      	mov	r7, r0
 800d314:	10ad      	asrs	r5, r5, #2
 800d316:	d035      	beq.n	800d384 <__pow5mult+0x90>
 800d318:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800d31a:	b93c      	cbnz	r4, 800d32c <__pow5mult+0x38>
 800d31c:	2010      	movs	r0, #16
 800d31e:	f7fc fe97 	bl	800a050 <malloc>
 800d322:	6270      	str	r0, [r6, #36]	; 0x24
 800d324:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d328:	6004      	str	r4, [r0, #0]
 800d32a:	60c4      	str	r4, [r0, #12]
 800d32c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800d330:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d334:	b94c      	cbnz	r4, 800d34a <__pow5mult+0x56>
 800d336:	f240 2171 	movw	r1, #625	; 0x271
 800d33a:	4630      	mov	r0, r6
 800d33c:	f7ff ff3b 	bl	800d1b6 <__i2b>
 800d340:	2300      	movs	r3, #0
 800d342:	f8c8 0008 	str.w	r0, [r8, #8]
 800d346:	4604      	mov	r4, r0
 800d348:	6003      	str	r3, [r0, #0]
 800d34a:	f04f 0800 	mov.w	r8, #0
 800d34e:	07eb      	lsls	r3, r5, #31
 800d350:	d50a      	bpl.n	800d368 <__pow5mult+0x74>
 800d352:	4639      	mov	r1, r7
 800d354:	4622      	mov	r2, r4
 800d356:	4630      	mov	r0, r6
 800d358:	f7ff ff36 	bl	800d1c8 <__multiply>
 800d35c:	4639      	mov	r1, r7
 800d35e:	4681      	mov	r9, r0
 800d360:	4630      	mov	r0, r6
 800d362:	f7ff fe4a 	bl	800cffa <_Bfree>
 800d366:	464f      	mov	r7, r9
 800d368:	106d      	asrs	r5, r5, #1
 800d36a:	d00b      	beq.n	800d384 <__pow5mult+0x90>
 800d36c:	6820      	ldr	r0, [r4, #0]
 800d36e:	b938      	cbnz	r0, 800d380 <__pow5mult+0x8c>
 800d370:	4622      	mov	r2, r4
 800d372:	4621      	mov	r1, r4
 800d374:	4630      	mov	r0, r6
 800d376:	f7ff ff27 	bl	800d1c8 <__multiply>
 800d37a:	6020      	str	r0, [r4, #0]
 800d37c:	f8c0 8000 	str.w	r8, [r0]
 800d380:	4604      	mov	r4, r0
 800d382:	e7e4      	b.n	800d34e <__pow5mult+0x5a>
 800d384:	4638      	mov	r0, r7
 800d386:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d38a:	bf00      	nop
 800d38c:	0800dd48 	.word	0x0800dd48

0800d390 <__lshift>:
 800d390:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d394:	460c      	mov	r4, r1
 800d396:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d39a:	6923      	ldr	r3, [r4, #16]
 800d39c:	6849      	ldr	r1, [r1, #4]
 800d39e:	eb0a 0903 	add.w	r9, sl, r3
 800d3a2:	68a3      	ldr	r3, [r4, #8]
 800d3a4:	4607      	mov	r7, r0
 800d3a6:	4616      	mov	r6, r2
 800d3a8:	f109 0501 	add.w	r5, r9, #1
 800d3ac:	42ab      	cmp	r3, r5
 800d3ae:	db32      	blt.n	800d416 <__lshift+0x86>
 800d3b0:	4638      	mov	r0, r7
 800d3b2:	f7ff fdee 	bl	800cf92 <_Balloc>
 800d3b6:	2300      	movs	r3, #0
 800d3b8:	4680      	mov	r8, r0
 800d3ba:	f100 0114 	add.w	r1, r0, #20
 800d3be:	461a      	mov	r2, r3
 800d3c0:	4553      	cmp	r3, sl
 800d3c2:	db2b      	blt.n	800d41c <__lshift+0x8c>
 800d3c4:	6920      	ldr	r0, [r4, #16]
 800d3c6:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d3ca:	f104 0314 	add.w	r3, r4, #20
 800d3ce:	f016 021f 	ands.w	r2, r6, #31
 800d3d2:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d3d6:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800d3da:	d025      	beq.n	800d428 <__lshift+0x98>
 800d3dc:	f1c2 0e20 	rsb	lr, r2, #32
 800d3e0:	2000      	movs	r0, #0
 800d3e2:	681e      	ldr	r6, [r3, #0]
 800d3e4:	468a      	mov	sl, r1
 800d3e6:	4096      	lsls	r6, r2
 800d3e8:	4330      	orrs	r0, r6
 800d3ea:	f84a 0b04 	str.w	r0, [sl], #4
 800d3ee:	f853 0b04 	ldr.w	r0, [r3], #4
 800d3f2:	459c      	cmp	ip, r3
 800d3f4:	fa20 f00e 	lsr.w	r0, r0, lr
 800d3f8:	d814      	bhi.n	800d424 <__lshift+0x94>
 800d3fa:	6048      	str	r0, [r1, #4]
 800d3fc:	b108      	cbz	r0, 800d402 <__lshift+0x72>
 800d3fe:	f109 0502 	add.w	r5, r9, #2
 800d402:	3d01      	subs	r5, #1
 800d404:	4638      	mov	r0, r7
 800d406:	f8c8 5010 	str.w	r5, [r8, #16]
 800d40a:	4621      	mov	r1, r4
 800d40c:	f7ff fdf5 	bl	800cffa <_Bfree>
 800d410:	4640      	mov	r0, r8
 800d412:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d416:	3101      	adds	r1, #1
 800d418:	005b      	lsls	r3, r3, #1
 800d41a:	e7c7      	b.n	800d3ac <__lshift+0x1c>
 800d41c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800d420:	3301      	adds	r3, #1
 800d422:	e7cd      	b.n	800d3c0 <__lshift+0x30>
 800d424:	4651      	mov	r1, sl
 800d426:	e7dc      	b.n	800d3e2 <__lshift+0x52>
 800d428:	3904      	subs	r1, #4
 800d42a:	f853 2b04 	ldr.w	r2, [r3], #4
 800d42e:	f841 2f04 	str.w	r2, [r1, #4]!
 800d432:	459c      	cmp	ip, r3
 800d434:	d8f9      	bhi.n	800d42a <__lshift+0x9a>
 800d436:	e7e4      	b.n	800d402 <__lshift+0x72>

0800d438 <__mcmp>:
 800d438:	6903      	ldr	r3, [r0, #16]
 800d43a:	690a      	ldr	r2, [r1, #16]
 800d43c:	1a9b      	subs	r3, r3, r2
 800d43e:	b530      	push	{r4, r5, lr}
 800d440:	d10c      	bne.n	800d45c <__mcmp+0x24>
 800d442:	0092      	lsls	r2, r2, #2
 800d444:	3014      	adds	r0, #20
 800d446:	3114      	adds	r1, #20
 800d448:	1884      	adds	r4, r0, r2
 800d44a:	4411      	add	r1, r2
 800d44c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800d450:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800d454:	4295      	cmp	r5, r2
 800d456:	d003      	beq.n	800d460 <__mcmp+0x28>
 800d458:	d305      	bcc.n	800d466 <__mcmp+0x2e>
 800d45a:	2301      	movs	r3, #1
 800d45c:	4618      	mov	r0, r3
 800d45e:	bd30      	pop	{r4, r5, pc}
 800d460:	42a0      	cmp	r0, r4
 800d462:	d3f3      	bcc.n	800d44c <__mcmp+0x14>
 800d464:	e7fa      	b.n	800d45c <__mcmp+0x24>
 800d466:	f04f 33ff 	mov.w	r3, #4294967295
 800d46a:	e7f7      	b.n	800d45c <__mcmp+0x24>

0800d46c <__mdiff>:
 800d46c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d470:	460d      	mov	r5, r1
 800d472:	4607      	mov	r7, r0
 800d474:	4611      	mov	r1, r2
 800d476:	4628      	mov	r0, r5
 800d478:	4614      	mov	r4, r2
 800d47a:	f7ff ffdd 	bl	800d438 <__mcmp>
 800d47e:	1e06      	subs	r6, r0, #0
 800d480:	d108      	bne.n	800d494 <__mdiff+0x28>
 800d482:	4631      	mov	r1, r6
 800d484:	4638      	mov	r0, r7
 800d486:	f7ff fd84 	bl	800cf92 <_Balloc>
 800d48a:	2301      	movs	r3, #1
 800d48c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800d490:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d494:	bfa4      	itt	ge
 800d496:	4623      	movge	r3, r4
 800d498:	462c      	movge	r4, r5
 800d49a:	4638      	mov	r0, r7
 800d49c:	6861      	ldr	r1, [r4, #4]
 800d49e:	bfa6      	itte	ge
 800d4a0:	461d      	movge	r5, r3
 800d4a2:	2600      	movge	r6, #0
 800d4a4:	2601      	movlt	r6, #1
 800d4a6:	f7ff fd74 	bl	800cf92 <_Balloc>
 800d4aa:	692b      	ldr	r3, [r5, #16]
 800d4ac:	60c6      	str	r6, [r0, #12]
 800d4ae:	6926      	ldr	r6, [r4, #16]
 800d4b0:	f105 0914 	add.w	r9, r5, #20
 800d4b4:	f104 0214 	add.w	r2, r4, #20
 800d4b8:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800d4bc:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800d4c0:	f100 0514 	add.w	r5, r0, #20
 800d4c4:	f04f 0e00 	mov.w	lr, #0
 800d4c8:	f852 ab04 	ldr.w	sl, [r2], #4
 800d4cc:	f859 4b04 	ldr.w	r4, [r9], #4
 800d4d0:	fa1e f18a 	uxtah	r1, lr, sl
 800d4d4:	b2a3      	uxth	r3, r4
 800d4d6:	1ac9      	subs	r1, r1, r3
 800d4d8:	0c23      	lsrs	r3, r4, #16
 800d4da:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800d4de:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800d4e2:	b289      	uxth	r1, r1
 800d4e4:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800d4e8:	45c8      	cmp	r8, r9
 800d4ea:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800d4ee:	4694      	mov	ip, r2
 800d4f0:	f845 3b04 	str.w	r3, [r5], #4
 800d4f4:	d8e8      	bhi.n	800d4c8 <__mdiff+0x5c>
 800d4f6:	45bc      	cmp	ip, r7
 800d4f8:	d304      	bcc.n	800d504 <__mdiff+0x98>
 800d4fa:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800d4fe:	b183      	cbz	r3, 800d522 <__mdiff+0xb6>
 800d500:	6106      	str	r6, [r0, #16]
 800d502:	e7c5      	b.n	800d490 <__mdiff+0x24>
 800d504:	f85c 1b04 	ldr.w	r1, [ip], #4
 800d508:	fa1e f381 	uxtah	r3, lr, r1
 800d50c:	141a      	asrs	r2, r3, #16
 800d50e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800d512:	b29b      	uxth	r3, r3
 800d514:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d518:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800d51c:	f845 3b04 	str.w	r3, [r5], #4
 800d520:	e7e9      	b.n	800d4f6 <__mdiff+0x8a>
 800d522:	3e01      	subs	r6, #1
 800d524:	e7e9      	b.n	800d4fa <__mdiff+0x8e>
	...

0800d528 <__ulp>:
 800d528:	4b12      	ldr	r3, [pc, #72]	; (800d574 <__ulp+0x4c>)
 800d52a:	ee10 2a90 	vmov	r2, s1
 800d52e:	401a      	ands	r2, r3
 800d530:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 800d534:	2b00      	cmp	r3, #0
 800d536:	dd04      	ble.n	800d542 <__ulp+0x1a>
 800d538:	2000      	movs	r0, #0
 800d53a:	4619      	mov	r1, r3
 800d53c:	ec41 0b10 	vmov	d0, r0, r1
 800d540:	4770      	bx	lr
 800d542:	425b      	negs	r3, r3
 800d544:	151b      	asrs	r3, r3, #20
 800d546:	2b13      	cmp	r3, #19
 800d548:	f04f 0000 	mov.w	r0, #0
 800d54c:	f04f 0100 	mov.w	r1, #0
 800d550:	dc04      	bgt.n	800d55c <__ulp+0x34>
 800d552:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800d556:	fa42 f103 	asr.w	r1, r2, r3
 800d55a:	e7ef      	b.n	800d53c <__ulp+0x14>
 800d55c:	3b14      	subs	r3, #20
 800d55e:	2b1e      	cmp	r3, #30
 800d560:	f04f 0201 	mov.w	r2, #1
 800d564:	bfda      	itte	le
 800d566:	f1c3 031f 	rsble	r3, r3, #31
 800d56a:	fa02 f303 	lslle.w	r3, r2, r3
 800d56e:	4613      	movgt	r3, r2
 800d570:	4618      	mov	r0, r3
 800d572:	e7e3      	b.n	800d53c <__ulp+0x14>
 800d574:	7ff00000 	.word	0x7ff00000

0800d578 <__b2d>:
 800d578:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d57a:	6905      	ldr	r5, [r0, #16]
 800d57c:	f100 0714 	add.w	r7, r0, #20
 800d580:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800d584:	1f2e      	subs	r6, r5, #4
 800d586:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800d58a:	4620      	mov	r0, r4
 800d58c:	f7ff fdc5 	bl	800d11a <__hi0bits>
 800d590:	f1c0 0320 	rsb	r3, r0, #32
 800d594:	280a      	cmp	r0, #10
 800d596:	600b      	str	r3, [r1, #0]
 800d598:	f8df c074 	ldr.w	ip, [pc, #116]	; 800d610 <__b2d+0x98>
 800d59c:	dc14      	bgt.n	800d5c8 <__b2d+0x50>
 800d59e:	f1c0 0e0b 	rsb	lr, r0, #11
 800d5a2:	fa24 f10e 	lsr.w	r1, r4, lr
 800d5a6:	42b7      	cmp	r7, r6
 800d5a8:	ea41 030c 	orr.w	r3, r1, ip
 800d5ac:	bf34      	ite	cc
 800d5ae:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800d5b2:	2100      	movcs	r1, #0
 800d5b4:	3015      	adds	r0, #21
 800d5b6:	fa04 f000 	lsl.w	r0, r4, r0
 800d5ba:	fa21 f10e 	lsr.w	r1, r1, lr
 800d5be:	ea40 0201 	orr.w	r2, r0, r1
 800d5c2:	ec43 2b10 	vmov	d0, r2, r3
 800d5c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d5c8:	42b7      	cmp	r7, r6
 800d5ca:	bf3a      	itte	cc
 800d5cc:	f1a5 0608 	subcc.w	r6, r5, #8
 800d5d0:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800d5d4:	2100      	movcs	r1, #0
 800d5d6:	380b      	subs	r0, #11
 800d5d8:	d015      	beq.n	800d606 <__b2d+0x8e>
 800d5da:	4084      	lsls	r4, r0
 800d5dc:	f1c0 0520 	rsb	r5, r0, #32
 800d5e0:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 800d5e4:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 800d5e8:	42be      	cmp	r6, r7
 800d5ea:	fa21 fc05 	lsr.w	ip, r1, r5
 800d5ee:	ea44 030c 	orr.w	r3, r4, ip
 800d5f2:	bf8c      	ite	hi
 800d5f4:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800d5f8:	2400      	movls	r4, #0
 800d5fa:	fa01 f000 	lsl.w	r0, r1, r0
 800d5fe:	40ec      	lsrs	r4, r5
 800d600:	ea40 0204 	orr.w	r2, r0, r4
 800d604:	e7dd      	b.n	800d5c2 <__b2d+0x4a>
 800d606:	ea44 030c 	orr.w	r3, r4, ip
 800d60a:	460a      	mov	r2, r1
 800d60c:	e7d9      	b.n	800d5c2 <__b2d+0x4a>
 800d60e:	bf00      	nop
 800d610:	3ff00000 	.word	0x3ff00000

0800d614 <__d2b>:
 800d614:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d618:	460e      	mov	r6, r1
 800d61a:	2101      	movs	r1, #1
 800d61c:	ec59 8b10 	vmov	r8, r9, d0
 800d620:	4615      	mov	r5, r2
 800d622:	f7ff fcb6 	bl	800cf92 <_Balloc>
 800d626:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800d62a:	4607      	mov	r7, r0
 800d62c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d630:	bb34      	cbnz	r4, 800d680 <__d2b+0x6c>
 800d632:	9301      	str	r3, [sp, #4]
 800d634:	f1b8 0300 	subs.w	r3, r8, #0
 800d638:	d027      	beq.n	800d68a <__d2b+0x76>
 800d63a:	a802      	add	r0, sp, #8
 800d63c:	f840 3d08 	str.w	r3, [r0, #-8]!
 800d640:	f7ff fd8a 	bl	800d158 <__lo0bits>
 800d644:	9900      	ldr	r1, [sp, #0]
 800d646:	b1f0      	cbz	r0, 800d686 <__d2b+0x72>
 800d648:	9a01      	ldr	r2, [sp, #4]
 800d64a:	f1c0 0320 	rsb	r3, r0, #32
 800d64e:	fa02 f303 	lsl.w	r3, r2, r3
 800d652:	430b      	orrs	r3, r1
 800d654:	40c2      	lsrs	r2, r0
 800d656:	617b      	str	r3, [r7, #20]
 800d658:	9201      	str	r2, [sp, #4]
 800d65a:	9b01      	ldr	r3, [sp, #4]
 800d65c:	61bb      	str	r3, [r7, #24]
 800d65e:	2b00      	cmp	r3, #0
 800d660:	bf14      	ite	ne
 800d662:	2102      	movne	r1, #2
 800d664:	2101      	moveq	r1, #1
 800d666:	6139      	str	r1, [r7, #16]
 800d668:	b1c4      	cbz	r4, 800d69c <__d2b+0x88>
 800d66a:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800d66e:	4404      	add	r4, r0
 800d670:	6034      	str	r4, [r6, #0]
 800d672:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800d676:	6028      	str	r0, [r5, #0]
 800d678:	4638      	mov	r0, r7
 800d67a:	b003      	add	sp, #12
 800d67c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d680:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d684:	e7d5      	b.n	800d632 <__d2b+0x1e>
 800d686:	6179      	str	r1, [r7, #20]
 800d688:	e7e7      	b.n	800d65a <__d2b+0x46>
 800d68a:	a801      	add	r0, sp, #4
 800d68c:	f7ff fd64 	bl	800d158 <__lo0bits>
 800d690:	9b01      	ldr	r3, [sp, #4]
 800d692:	617b      	str	r3, [r7, #20]
 800d694:	2101      	movs	r1, #1
 800d696:	6139      	str	r1, [r7, #16]
 800d698:	3020      	adds	r0, #32
 800d69a:	e7e5      	b.n	800d668 <__d2b+0x54>
 800d69c:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800d6a0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800d6a4:	6030      	str	r0, [r6, #0]
 800d6a6:	6918      	ldr	r0, [r3, #16]
 800d6a8:	f7ff fd37 	bl	800d11a <__hi0bits>
 800d6ac:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800d6b0:	e7e1      	b.n	800d676 <__d2b+0x62>

0800d6b2 <__ratio>:
 800d6b2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d6b6:	4688      	mov	r8, r1
 800d6b8:	4669      	mov	r1, sp
 800d6ba:	4681      	mov	r9, r0
 800d6bc:	f7ff ff5c 	bl	800d578 <__b2d>
 800d6c0:	a901      	add	r1, sp, #4
 800d6c2:	4640      	mov	r0, r8
 800d6c4:	ec57 6b10 	vmov	r6, r7, d0
 800d6c8:	f7ff ff56 	bl	800d578 <__b2d>
 800d6cc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800d6d0:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800d6d4:	eba3 0c02 	sub.w	ip, r3, r2
 800d6d8:	e9dd 3200 	ldrd	r3, r2, [sp]
 800d6dc:	1a9b      	subs	r3, r3, r2
 800d6de:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800d6e2:	ec5b ab10 	vmov	sl, fp, d0
 800d6e6:	2b00      	cmp	r3, #0
 800d6e8:	bfce      	itee	gt
 800d6ea:	463a      	movgt	r2, r7
 800d6ec:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800d6f0:	465a      	movle	r2, fp
 800d6f2:	4659      	mov	r1, fp
 800d6f4:	463d      	mov	r5, r7
 800d6f6:	bfd4      	ite	le
 800d6f8:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 800d6fc:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 800d700:	4630      	mov	r0, r6
 800d702:	ee10 2a10 	vmov	r2, s0
 800d706:	460b      	mov	r3, r1
 800d708:	4629      	mov	r1, r5
 800d70a:	f7f3 f8bf 	bl	800088c <__aeabi_ddiv>
 800d70e:	ec41 0b10 	vmov	d0, r0, r1
 800d712:	b003      	add	sp, #12
 800d714:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d718 <__copybits>:
 800d718:	3901      	subs	r1, #1
 800d71a:	b510      	push	{r4, lr}
 800d71c:	1149      	asrs	r1, r1, #5
 800d71e:	6914      	ldr	r4, [r2, #16]
 800d720:	3101      	adds	r1, #1
 800d722:	f102 0314 	add.w	r3, r2, #20
 800d726:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800d72a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800d72e:	42a3      	cmp	r3, r4
 800d730:	4602      	mov	r2, r0
 800d732:	d303      	bcc.n	800d73c <__copybits+0x24>
 800d734:	2300      	movs	r3, #0
 800d736:	428a      	cmp	r2, r1
 800d738:	d305      	bcc.n	800d746 <__copybits+0x2e>
 800d73a:	bd10      	pop	{r4, pc}
 800d73c:	f853 2b04 	ldr.w	r2, [r3], #4
 800d740:	f840 2b04 	str.w	r2, [r0], #4
 800d744:	e7f3      	b.n	800d72e <__copybits+0x16>
 800d746:	f842 3b04 	str.w	r3, [r2], #4
 800d74a:	e7f4      	b.n	800d736 <__copybits+0x1e>

0800d74c <__any_on>:
 800d74c:	f100 0214 	add.w	r2, r0, #20
 800d750:	6900      	ldr	r0, [r0, #16]
 800d752:	114b      	asrs	r3, r1, #5
 800d754:	4298      	cmp	r0, r3
 800d756:	b510      	push	{r4, lr}
 800d758:	db11      	blt.n	800d77e <__any_on+0x32>
 800d75a:	dd0a      	ble.n	800d772 <__any_on+0x26>
 800d75c:	f011 011f 	ands.w	r1, r1, #31
 800d760:	d007      	beq.n	800d772 <__any_on+0x26>
 800d762:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800d766:	fa24 f001 	lsr.w	r0, r4, r1
 800d76a:	fa00 f101 	lsl.w	r1, r0, r1
 800d76e:	428c      	cmp	r4, r1
 800d770:	d10b      	bne.n	800d78a <__any_on+0x3e>
 800d772:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800d776:	4293      	cmp	r3, r2
 800d778:	d803      	bhi.n	800d782 <__any_on+0x36>
 800d77a:	2000      	movs	r0, #0
 800d77c:	bd10      	pop	{r4, pc}
 800d77e:	4603      	mov	r3, r0
 800d780:	e7f7      	b.n	800d772 <__any_on+0x26>
 800d782:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d786:	2900      	cmp	r1, #0
 800d788:	d0f5      	beq.n	800d776 <__any_on+0x2a>
 800d78a:	2001      	movs	r0, #1
 800d78c:	e7f6      	b.n	800d77c <__any_on+0x30>

0800d78e <_calloc_r>:
 800d78e:	b538      	push	{r3, r4, r5, lr}
 800d790:	fb02 f401 	mul.w	r4, r2, r1
 800d794:	4621      	mov	r1, r4
 800d796:	f7fc fcc1 	bl	800a11c <_malloc_r>
 800d79a:	4605      	mov	r5, r0
 800d79c:	b118      	cbz	r0, 800d7a6 <_calloc_r+0x18>
 800d79e:	4622      	mov	r2, r4
 800d7a0:	2100      	movs	r1, #0
 800d7a2:	f7fc fc65 	bl	800a070 <memset>
 800d7a6:	4628      	mov	r0, r5
 800d7a8:	bd38      	pop	{r3, r4, r5, pc}

0800d7aa <__ssputs_r>:
 800d7aa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d7ae:	688e      	ldr	r6, [r1, #8]
 800d7b0:	429e      	cmp	r6, r3
 800d7b2:	4682      	mov	sl, r0
 800d7b4:	460c      	mov	r4, r1
 800d7b6:	4690      	mov	r8, r2
 800d7b8:	4699      	mov	r9, r3
 800d7ba:	d837      	bhi.n	800d82c <__ssputs_r+0x82>
 800d7bc:	898a      	ldrh	r2, [r1, #12]
 800d7be:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800d7c2:	d031      	beq.n	800d828 <__ssputs_r+0x7e>
 800d7c4:	6825      	ldr	r5, [r4, #0]
 800d7c6:	6909      	ldr	r1, [r1, #16]
 800d7c8:	1a6f      	subs	r7, r5, r1
 800d7ca:	6965      	ldr	r5, [r4, #20]
 800d7cc:	2302      	movs	r3, #2
 800d7ce:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d7d2:	fb95 f5f3 	sdiv	r5, r5, r3
 800d7d6:	f109 0301 	add.w	r3, r9, #1
 800d7da:	443b      	add	r3, r7
 800d7dc:	429d      	cmp	r5, r3
 800d7de:	bf38      	it	cc
 800d7e0:	461d      	movcc	r5, r3
 800d7e2:	0553      	lsls	r3, r2, #21
 800d7e4:	d530      	bpl.n	800d848 <__ssputs_r+0x9e>
 800d7e6:	4629      	mov	r1, r5
 800d7e8:	f7fc fc98 	bl	800a11c <_malloc_r>
 800d7ec:	4606      	mov	r6, r0
 800d7ee:	b950      	cbnz	r0, 800d806 <__ssputs_r+0x5c>
 800d7f0:	230c      	movs	r3, #12
 800d7f2:	f8ca 3000 	str.w	r3, [sl]
 800d7f6:	89a3      	ldrh	r3, [r4, #12]
 800d7f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d7fc:	81a3      	strh	r3, [r4, #12]
 800d7fe:	f04f 30ff 	mov.w	r0, #4294967295
 800d802:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d806:	463a      	mov	r2, r7
 800d808:	6921      	ldr	r1, [r4, #16]
 800d80a:	f7ff fbb5 	bl	800cf78 <memcpy>
 800d80e:	89a3      	ldrh	r3, [r4, #12]
 800d810:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800d814:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d818:	81a3      	strh	r3, [r4, #12]
 800d81a:	6126      	str	r6, [r4, #16]
 800d81c:	6165      	str	r5, [r4, #20]
 800d81e:	443e      	add	r6, r7
 800d820:	1bed      	subs	r5, r5, r7
 800d822:	6026      	str	r6, [r4, #0]
 800d824:	60a5      	str	r5, [r4, #8]
 800d826:	464e      	mov	r6, r9
 800d828:	454e      	cmp	r6, r9
 800d82a:	d900      	bls.n	800d82e <__ssputs_r+0x84>
 800d82c:	464e      	mov	r6, r9
 800d82e:	4632      	mov	r2, r6
 800d830:	4641      	mov	r1, r8
 800d832:	6820      	ldr	r0, [r4, #0]
 800d834:	f000 f92b 	bl	800da8e <memmove>
 800d838:	68a3      	ldr	r3, [r4, #8]
 800d83a:	1b9b      	subs	r3, r3, r6
 800d83c:	60a3      	str	r3, [r4, #8]
 800d83e:	6823      	ldr	r3, [r4, #0]
 800d840:	441e      	add	r6, r3
 800d842:	6026      	str	r6, [r4, #0]
 800d844:	2000      	movs	r0, #0
 800d846:	e7dc      	b.n	800d802 <__ssputs_r+0x58>
 800d848:	462a      	mov	r2, r5
 800d84a:	f000 f939 	bl	800dac0 <_realloc_r>
 800d84e:	4606      	mov	r6, r0
 800d850:	2800      	cmp	r0, #0
 800d852:	d1e2      	bne.n	800d81a <__ssputs_r+0x70>
 800d854:	6921      	ldr	r1, [r4, #16]
 800d856:	4650      	mov	r0, sl
 800d858:	f7fc fc12 	bl	800a080 <_free_r>
 800d85c:	e7c8      	b.n	800d7f0 <__ssputs_r+0x46>
	...

0800d860 <_svfiprintf_r>:
 800d860:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d864:	461d      	mov	r5, r3
 800d866:	898b      	ldrh	r3, [r1, #12]
 800d868:	061f      	lsls	r7, r3, #24
 800d86a:	b09d      	sub	sp, #116	; 0x74
 800d86c:	4680      	mov	r8, r0
 800d86e:	460c      	mov	r4, r1
 800d870:	4616      	mov	r6, r2
 800d872:	d50f      	bpl.n	800d894 <_svfiprintf_r+0x34>
 800d874:	690b      	ldr	r3, [r1, #16]
 800d876:	b96b      	cbnz	r3, 800d894 <_svfiprintf_r+0x34>
 800d878:	2140      	movs	r1, #64	; 0x40
 800d87a:	f7fc fc4f 	bl	800a11c <_malloc_r>
 800d87e:	6020      	str	r0, [r4, #0]
 800d880:	6120      	str	r0, [r4, #16]
 800d882:	b928      	cbnz	r0, 800d890 <_svfiprintf_r+0x30>
 800d884:	230c      	movs	r3, #12
 800d886:	f8c8 3000 	str.w	r3, [r8]
 800d88a:	f04f 30ff 	mov.w	r0, #4294967295
 800d88e:	e0c8      	b.n	800da22 <_svfiprintf_r+0x1c2>
 800d890:	2340      	movs	r3, #64	; 0x40
 800d892:	6163      	str	r3, [r4, #20]
 800d894:	2300      	movs	r3, #0
 800d896:	9309      	str	r3, [sp, #36]	; 0x24
 800d898:	2320      	movs	r3, #32
 800d89a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d89e:	2330      	movs	r3, #48	; 0x30
 800d8a0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d8a4:	9503      	str	r5, [sp, #12]
 800d8a6:	f04f 0b01 	mov.w	fp, #1
 800d8aa:	4637      	mov	r7, r6
 800d8ac:	463d      	mov	r5, r7
 800d8ae:	f815 3b01 	ldrb.w	r3, [r5], #1
 800d8b2:	b10b      	cbz	r3, 800d8b8 <_svfiprintf_r+0x58>
 800d8b4:	2b25      	cmp	r3, #37	; 0x25
 800d8b6:	d13e      	bne.n	800d936 <_svfiprintf_r+0xd6>
 800d8b8:	ebb7 0a06 	subs.w	sl, r7, r6
 800d8bc:	d00b      	beq.n	800d8d6 <_svfiprintf_r+0x76>
 800d8be:	4653      	mov	r3, sl
 800d8c0:	4632      	mov	r2, r6
 800d8c2:	4621      	mov	r1, r4
 800d8c4:	4640      	mov	r0, r8
 800d8c6:	f7ff ff70 	bl	800d7aa <__ssputs_r>
 800d8ca:	3001      	adds	r0, #1
 800d8cc:	f000 80a4 	beq.w	800da18 <_svfiprintf_r+0x1b8>
 800d8d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d8d2:	4453      	add	r3, sl
 800d8d4:	9309      	str	r3, [sp, #36]	; 0x24
 800d8d6:	783b      	ldrb	r3, [r7, #0]
 800d8d8:	2b00      	cmp	r3, #0
 800d8da:	f000 809d 	beq.w	800da18 <_svfiprintf_r+0x1b8>
 800d8de:	2300      	movs	r3, #0
 800d8e0:	f04f 32ff 	mov.w	r2, #4294967295
 800d8e4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d8e8:	9304      	str	r3, [sp, #16]
 800d8ea:	9307      	str	r3, [sp, #28]
 800d8ec:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d8f0:	931a      	str	r3, [sp, #104]	; 0x68
 800d8f2:	462f      	mov	r7, r5
 800d8f4:	2205      	movs	r2, #5
 800d8f6:	f817 1b01 	ldrb.w	r1, [r7], #1
 800d8fa:	4850      	ldr	r0, [pc, #320]	; (800da3c <_svfiprintf_r+0x1dc>)
 800d8fc:	f7f2 fc90 	bl	8000220 <memchr>
 800d900:	9b04      	ldr	r3, [sp, #16]
 800d902:	b9d0      	cbnz	r0, 800d93a <_svfiprintf_r+0xda>
 800d904:	06d9      	lsls	r1, r3, #27
 800d906:	bf44      	itt	mi
 800d908:	2220      	movmi	r2, #32
 800d90a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800d90e:	071a      	lsls	r2, r3, #28
 800d910:	bf44      	itt	mi
 800d912:	222b      	movmi	r2, #43	; 0x2b
 800d914:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800d918:	782a      	ldrb	r2, [r5, #0]
 800d91a:	2a2a      	cmp	r2, #42	; 0x2a
 800d91c:	d015      	beq.n	800d94a <_svfiprintf_r+0xea>
 800d91e:	9a07      	ldr	r2, [sp, #28]
 800d920:	462f      	mov	r7, r5
 800d922:	2000      	movs	r0, #0
 800d924:	250a      	movs	r5, #10
 800d926:	4639      	mov	r1, r7
 800d928:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d92c:	3b30      	subs	r3, #48	; 0x30
 800d92e:	2b09      	cmp	r3, #9
 800d930:	d94d      	bls.n	800d9ce <_svfiprintf_r+0x16e>
 800d932:	b1b8      	cbz	r0, 800d964 <_svfiprintf_r+0x104>
 800d934:	e00f      	b.n	800d956 <_svfiprintf_r+0xf6>
 800d936:	462f      	mov	r7, r5
 800d938:	e7b8      	b.n	800d8ac <_svfiprintf_r+0x4c>
 800d93a:	4a40      	ldr	r2, [pc, #256]	; (800da3c <_svfiprintf_r+0x1dc>)
 800d93c:	1a80      	subs	r0, r0, r2
 800d93e:	fa0b f000 	lsl.w	r0, fp, r0
 800d942:	4318      	orrs	r0, r3
 800d944:	9004      	str	r0, [sp, #16]
 800d946:	463d      	mov	r5, r7
 800d948:	e7d3      	b.n	800d8f2 <_svfiprintf_r+0x92>
 800d94a:	9a03      	ldr	r2, [sp, #12]
 800d94c:	1d11      	adds	r1, r2, #4
 800d94e:	6812      	ldr	r2, [r2, #0]
 800d950:	9103      	str	r1, [sp, #12]
 800d952:	2a00      	cmp	r2, #0
 800d954:	db01      	blt.n	800d95a <_svfiprintf_r+0xfa>
 800d956:	9207      	str	r2, [sp, #28]
 800d958:	e004      	b.n	800d964 <_svfiprintf_r+0x104>
 800d95a:	4252      	negs	r2, r2
 800d95c:	f043 0302 	orr.w	r3, r3, #2
 800d960:	9207      	str	r2, [sp, #28]
 800d962:	9304      	str	r3, [sp, #16]
 800d964:	783b      	ldrb	r3, [r7, #0]
 800d966:	2b2e      	cmp	r3, #46	; 0x2e
 800d968:	d10c      	bne.n	800d984 <_svfiprintf_r+0x124>
 800d96a:	787b      	ldrb	r3, [r7, #1]
 800d96c:	2b2a      	cmp	r3, #42	; 0x2a
 800d96e:	d133      	bne.n	800d9d8 <_svfiprintf_r+0x178>
 800d970:	9b03      	ldr	r3, [sp, #12]
 800d972:	1d1a      	adds	r2, r3, #4
 800d974:	681b      	ldr	r3, [r3, #0]
 800d976:	9203      	str	r2, [sp, #12]
 800d978:	2b00      	cmp	r3, #0
 800d97a:	bfb8      	it	lt
 800d97c:	f04f 33ff 	movlt.w	r3, #4294967295
 800d980:	3702      	adds	r7, #2
 800d982:	9305      	str	r3, [sp, #20]
 800d984:	4d2e      	ldr	r5, [pc, #184]	; (800da40 <_svfiprintf_r+0x1e0>)
 800d986:	7839      	ldrb	r1, [r7, #0]
 800d988:	2203      	movs	r2, #3
 800d98a:	4628      	mov	r0, r5
 800d98c:	f7f2 fc48 	bl	8000220 <memchr>
 800d990:	b138      	cbz	r0, 800d9a2 <_svfiprintf_r+0x142>
 800d992:	2340      	movs	r3, #64	; 0x40
 800d994:	1b40      	subs	r0, r0, r5
 800d996:	fa03 f000 	lsl.w	r0, r3, r0
 800d99a:	9b04      	ldr	r3, [sp, #16]
 800d99c:	4303      	orrs	r3, r0
 800d99e:	3701      	adds	r7, #1
 800d9a0:	9304      	str	r3, [sp, #16]
 800d9a2:	7839      	ldrb	r1, [r7, #0]
 800d9a4:	4827      	ldr	r0, [pc, #156]	; (800da44 <_svfiprintf_r+0x1e4>)
 800d9a6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d9aa:	2206      	movs	r2, #6
 800d9ac:	1c7e      	adds	r6, r7, #1
 800d9ae:	f7f2 fc37 	bl	8000220 <memchr>
 800d9b2:	2800      	cmp	r0, #0
 800d9b4:	d038      	beq.n	800da28 <_svfiprintf_r+0x1c8>
 800d9b6:	4b24      	ldr	r3, [pc, #144]	; (800da48 <_svfiprintf_r+0x1e8>)
 800d9b8:	bb13      	cbnz	r3, 800da00 <_svfiprintf_r+0x1a0>
 800d9ba:	9b03      	ldr	r3, [sp, #12]
 800d9bc:	3307      	adds	r3, #7
 800d9be:	f023 0307 	bic.w	r3, r3, #7
 800d9c2:	3308      	adds	r3, #8
 800d9c4:	9303      	str	r3, [sp, #12]
 800d9c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d9c8:	444b      	add	r3, r9
 800d9ca:	9309      	str	r3, [sp, #36]	; 0x24
 800d9cc:	e76d      	b.n	800d8aa <_svfiprintf_r+0x4a>
 800d9ce:	fb05 3202 	mla	r2, r5, r2, r3
 800d9d2:	2001      	movs	r0, #1
 800d9d4:	460f      	mov	r7, r1
 800d9d6:	e7a6      	b.n	800d926 <_svfiprintf_r+0xc6>
 800d9d8:	2300      	movs	r3, #0
 800d9da:	3701      	adds	r7, #1
 800d9dc:	9305      	str	r3, [sp, #20]
 800d9de:	4619      	mov	r1, r3
 800d9e0:	250a      	movs	r5, #10
 800d9e2:	4638      	mov	r0, r7
 800d9e4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d9e8:	3a30      	subs	r2, #48	; 0x30
 800d9ea:	2a09      	cmp	r2, #9
 800d9ec:	d903      	bls.n	800d9f6 <_svfiprintf_r+0x196>
 800d9ee:	2b00      	cmp	r3, #0
 800d9f0:	d0c8      	beq.n	800d984 <_svfiprintf_r+0x124>
 800d9f2:	9105      	str	r1, [sp, #20]
 800d9f4:	e7c6      	b.n	800d984 <_svfiprintf_r+0x124>
 800d9f6:	fb05 2101 	mla	r1, r5, r1, r2
 800d9fa:	2301      	movs	r3, #1
 800d9fc:	4607      	mov	r7, r0
 800d9fe:	e7f0      	b.n	800d9e2 <_svfiprintf_r+0x182>
 800da00:	ab03      	add	r3, sp, #12
 800da02:	9300      	str	r3, [sp, #0]
 800da04:	4622      	mov	r2, r4
 800da06:	4b11      	ldr	r3, [pc, #68]	; (800da4c <_svfiprintf_r+0x1ec>)
 800da08:	a904      	add	r1, sp, #16
 800da0a:	4640      	mov	r0, r8
 800da0c:	f7fc fc74 	bl	800a2f8 <_printf_float>
 800da10:	f1b0 3fff 	cmp.w	r0, #4294967295
 800da14:	4681      	mov	r9, r0
 800da16:	d1d6      	bne.n	800d9c6 <_svfiprintf_r+0x166>
 800da18:	89a3      	ldrh	r3, [r4, #12]
 800da1a:	065b      	lsls	r3, r3, #25
 800da1c:	f53f af35 	bmi.w	800d88a <_svfiprintf_r+0x2a>
 800da20:	9809      	ldr	r0, [sp, #36]	; 0x24
 800da22:	b01d      	add	sp, #116	; 0x74
 800da24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800da28:	ab03      	add	r3, sp, #12
 800da2a:	9300      	str	r3, [sp, #0]
 800da2c:	4622      	mov	r2, r4
 800da2e:	4b07      	ldr	r3, [pc, #28]	; (800da4c <_svfiprintf_r+0x1ec>)
 800da30:	a904      	add	r1, sp, #16
 800da32:	4640      	mov	r0, r8
 800da34:	f7fc ff16 	bl	800a864 <_printf_i>
 800da38:	e7ea      	b.n	800da10 <_svfiprintf_r+0x1b0>
 800da3a:	bf00      	nop
 800da3c:	0800dd54 	.word	0x0800dd54
 800da40:	0800dd5a 	.word	0x0800dd5a
 800da44:	0800dd5e 	.word	0x0800dd5e
 800da48:	0800a2f9 	.word	0x0800a2f9
 800da4c:	0800d7ab 	.word	0x0800d7ab

0800da50 <strncmp>:
 800da50:	b510      	push	{r4, lr}
 800da52:	b16a      	cbz	r2, 800da70 <strncmp+0x20>
 800da54:	3901      	subs	r1, #1
 800da56:	1884      	adds	r4, r0, r2
 800da58:	f810 3b01 	ldrb.w	r3, [r0], #1
 800da5c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800da60:	4293      	cmp	r3, r2
 800da62:	d103      	bne.n	800da6c <strncmp+0x1c>
 800da64:	42a0      	cmp	r0, r4
 800da66:	d001      	beq.n	800da6c <strncmp+0x1c>
 800da68:	2b00      	cmp	r3, #0
 800da6a:	d1f5      	bne.n	800da58 <strncmp+0x8>
 800da6c:	1a98      	subs	r0, r3, r2
 800da6e:	bd10      	pop	{r4, pc}
 800da70:	4610      	mov	r0, r2
 800da72:	e7fc      	b.n	800da6e <strncmp+0x1e>

0800da74 <__ascii_wctomb>:
 800da74:	b149      	cbz	r1, 800da8a <__ascii_wctomb+0x16>
 800da76:	2aff      	cmp	r2, #255	; 0xff
 800da78:	bf85      	ittet	hi
 800da7a:	238a      	movhi	r3, #138	; 0x8a
 800da7c:	6003      	strhi	r3, [r0, #0]
 800da7e:	700a      	strbls	r2, [r1, #0]
 800da80:	f04f 30ff 	movhi.w	r0, #4294967295
 800da84:	bf98      	it	ls
 800da86:	2001      	movls	r0, #1
 800da88:	4770      	bx	lr
 800da8a:	4608      	mov	r0, r1
 800da8c:	4770      	bx	lr

0800da8e <memmove>:
 800da8e:	4288      	cmp	r0, r1
 800da90:	b510      	push	{r4, lr}
 800da92:	eb01 0302 	add.w	r3, r1, r2
 800da96:	d807      	bhi.n	800daa8 <memmove+0x1a>
 800da98:	1e42      	subs	r2, r0, #1
 800da9a:	4299      	cmp	r1, r3
 800da9c:	d00a      	beq.n	800dab4 <memmove+0x26>
 800da9e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800daa2:	f802 4f01 	strb.w	r4, [r2, #1]!
 800daa6:	e7f8      	b.n	800da9a <memmove+0xc>
 800daa8:	4283      	cmp	r3, r0
 800daaa:	d9f5      	bls.n	800da98 <memmove+0xa>
 800daac:	1881      	adds	r1, r0, r2
 800daae:	1ad2      	subs	r2, r2, r3
 800dab0:	42d3      	cmn	r3, r2
 800dab2:	d100      	bne.n	800dab6 <memmove+0x28>
 800dab4:	bd10      	pop	{r4, pc}
 800dab6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800daba:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800dabe:	e7f7      	b.n	800dab0 <memmove+0x22>

0800dac0 <_realloc_r>:
 800dac0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dac2:	4607      	mov	r7, r0
 800dac4:	4614      	mov	r4, r2
 800dac6:	460e      	mov	r6, r1
 800dac8:	b921      	cbnz	r1, 800dad4 <_realloc_r+0x14>
 800daca:	4611      	mov	r1, r2
 800dacc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800dad0:	f7fc bb24 	b.w	800a11c <_malloc_r>
 800dad4:	b922      	cbnz	r2, 800dae0 <_realloc_r+0x20>
 800dad6:	f7fc fad3 	bl	800a080 <_free_r>
 800dada:	4625      	mov	r5, r4
 800dadc:	4628      	mov	r0, r5
 800dade:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dae0:	f000 f814 	bl	800db0c <_malloc_usable_size_r>
 800dae4:	42a0      	cmp	r0, r4
 800dae6:	d20f      	bcs.n	800db08 <_realloc_r+0x48>
 800dae8:	4621      	mov	r1, r4
 800daea:	4638      	mov	r0, r7
 800daec:	f7fc fb16 	bl	800a11c <_malloc_r>
 800daf0:	4605      	mov	r5, r0
 800daf2:	2800      	cmp	r0, #0
 800daf4:	d0f2      	beq.n	800dadc <_realloc_r+0x1c>
 800daf6:	4631      	mov	r1, r6
 800daf8:	4622      	mov	r2, r4
 800dafa:	f7ff fa3d 	bl	800cf78 <memcpy>
 800dafe:	4631      	mov	r1, r6
 800db00:	4638      	mov	r0, r7
 800db02:	f7fc fabd 	bl	800a080 <_free_r>
 800db06:	e7e9      	b.n	800dadc <_realloc_r+0x1c>
 800db08:	4635      	mov	r5, r6
 800db0a:	e7e7      	b.n	800dadc <_realloc_r+0x1c>

0800db0c <_malloc_usable_size_r>:
 800db0c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800db10:	1f18      	subs	r0, r3, #4
 800db12:	2b00      	cmp	r3, #0
 800db14:	bfbc      	itt	lt
 800db16:	580b      	ldrlt	r3, [r1, r0]
 800db18:	18c0      	addlt	r0, r0, r3
 800db1a:	4770      	bx	lr

0800db1c <_init>:
 800db1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800db1e:	bf00      	nop
 800db20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800db22:	bc08      	pop	{r3}
 800db24:	469e      	mov	lr, r3
 800db26:	4770      	bx	lr

0800db28 <_fini>:
 800db28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800db2a:	bf00      	nop
 800db2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800db2e:	bc08      	pop	{r3}
 800db30:	469e      	mov	lr, r3
 800db32:	4770      	bx	lr
